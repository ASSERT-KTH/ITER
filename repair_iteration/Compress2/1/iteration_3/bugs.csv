bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getKey());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getKey());	  Throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  not  a  statement	81	None	replace
2	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getValue()  + "n ");  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getValue()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getValue()  + "n ");	  Throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  not  a  statement	81	None	replace
3	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.toString());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.toString());	  Throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  not  a  statement	81	None	replace
4	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getRawValue());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getRawValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getRawValue());	  Throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  not  a  statement	81	None	replace
5	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getClass());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getClass());	  Throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  not  a  statement	81	None	replace
6	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getName());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getName());	  Throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  not  a  statement	81	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	100	None	add
8	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  Throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  Throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    Throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  not  a  statement	100	None	add
9	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  Throwables.throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  Throwables.throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    Throwables.throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  <identifier>  expected	100	None	add
10	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  Throwables.log( "invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  Throwables.log( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    Throwables.log( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	100	None	add
11	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  Throwables.warning( "invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  Throwables.warning( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    Throwables.warning( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	100	None	add
12	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(i));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(i));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(i));	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
13	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "n ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "n ");	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
14	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(0));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(0));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(0));	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
15	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of ");  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of ");	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
16	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(1));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(1));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(1));	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
17	[BUG]  [BUGGY]  return(input  >=  null)?  null  :  input.toString();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  >=  null)?  null  :  input.toString();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  >=  null)?  null  :  input.toString();	  return(input!=    null)?    null    :    input.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	61	None	replace
18	[BUG]  [BUGGY]  Return(input!=  null)?  null  :  input.toString();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Return(input!=  null)?  null  :  input.toString();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Return(input!=  null)?  null  :  input.toString();	  return(input!=    null)?    null    :    input.toString();    	non-compiled	[CE]  not  a  statement	61	None	replace
19	[BUG]  [BUGGY]  return(input  >>  null)?  null  :  input.toString();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  >>  null)?  null  :  input.toString();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  >>  null)?  null  :  input.toString();	  return(input!=    null)?    null    :    input.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	61	None	replace
20	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  header: "  +  input.toString());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	compilable	  [FE]  IOException  	23	1	replace
21	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.toString());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  header: "  +  input.toString());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	compilable	  [FE]  IOException  	23	1	replace
22	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "invalid  header: "  +  input.toString());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
23	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  header: "  +  input.toString());  [FE]  IllegalArgumentException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  header: "  +  input.toString());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
24	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header: "  +  input.getMessage());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
25	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "Invalid  header: "  +  input.toString());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  header: "  +  input.toString());  [FE]  IllegalArgumentException  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  header: "  +  input.toString());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	compilable	  [FE]  IllegalArgumentException  	23	1	replace
27	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header: "  +  input.getValue());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
28	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getPath());  [CE]  cannot  find  symbol  [FE]              IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header: "  +  input.getPath());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
29	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input.getBytes());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	99	None	replace
30	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getBytes());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	99	None	replace
31	[BUG]  [BUGGY]  Throwables.warning( "invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "invalid  input: "  +  input.getBytes());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
32	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getKey()));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getKey()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getKey()));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getValue()));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
33	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getValue()  + "));  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getValue()  + "));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getValue()  + "));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getValue()));    	non-compiled	[CE]  unclosed  string  literal	4	None	replace
34	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input,  offset.getValue()));  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input,  offset.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input,  offset.getValue()));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getValue()));    	non-compiled	[CE]  long  cannot  be  dereferenced	4	None	replace
35	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getClass().getName()));  [CE]  cannot  find  symbol  Throwables  [FE]                                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getClass().getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getClass().getName()));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getValue()));    	non-compiled	[CE]  cannot  find  symbol  Throwables	4	None	replace
36	[BUG]  [BUGGY]  filemode  =  input.read();  offset  +=  filemode.length;  [CE]  cannot  find  symbol  filemode  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read();  offset  +=  filemode.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read();  offset  +=  filemode.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol  filemode	80	None	replace
37	[BUG]  [BUGGY]  filemode  =  input.read();  offset  +=  in.length;  [CE]  cannot  find  symbol  filemode  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read();  offset  +=  in.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read();  offset  +=  in.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol  filemode	80	None	replace
38	[BUG]  [BUGGY]  int  filemode  =  input.read();  offset  +=  input.length;  [CE]  cannot  find  symbol  length  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  int  filemode  =  input.read();  offset  +=  input.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	int  filemode  =  input.read();  offset  +=  input.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol  length	80	None	replace
39	[BUG]  [BUGGY]  filemode  =  input.read();  offset  +=  output.length;  [CE]  cannot  find  symbol  filemode  [FE]                          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read();  offset  +=  output.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read();  offset  +=  output.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol  filemode	80	None	replace
40	[BUG]  [BUGGY]  filemode  =  input.read();  offset  +=  pInput.length;  [CE]  cannot  find  symbol  filemode  [FE]                            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read();  offset  +=  pInput.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read();  offset  +=  pInput.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol  filemode	80	None	replace
41	[BUG]  [BUGGY]  [FE]  IOException  [FE]                              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  offset  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	offset  =  input.read();	          filemode    =    input.read();    offset    +=    input.length;    	compilable	  [FE]  IOException  	80	1	replace
42	[BUG]  [BUGGY]  offset  =  input.read();  [FE]  IOException  [FE]                              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  offset  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	offset  =  input.read();	          filemode    =    input.read();    offset    +=    input.length;    	compilable	  [FE]  IOException  	80	1	replace
43	[BUG]  [BUGGY]  return(input  >=  null)?  null  :  input.available();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  >=  null)?  null  :  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  >=  null)?  null  :  input.available();	  return(input!=    null)?    null    :    input.available();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	60	None	replace
44	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.length();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.length();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.length();	  return(input!=    null)?    null    :    input.available();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
45	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.openStream();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.openStream();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.openStream();	  return(input!=    null)?    null    :    input.available();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
46	[BUG]  [BUGGY]  return  input!=  null?  null  :  input.available();  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return  input!=  null?  null  :  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return  input!=  null?  null  :  input.available();	  return(input!=    null)?    null    :    input.available();    	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	60	None	replace
47	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.available());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    	non-compiled	[CE]  <identifier>  expected	34	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.available(),  offset);  [CE]  no  suitable  constructor  found  for  IllegalStateException(String,long)  [FE]      IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.available(),  offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.available(),  offset);	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(String,long)	34	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.getValue());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	48	None	add
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throwables.throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throwables.throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    Throwables.throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  <identifier>  expected	48	None	add
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    Throw  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  not  a  statement	48	None	add
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throwables.log( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throwables.log( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    Throwables.log( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	48	None	add
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throwables.warning( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throwables.warning( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    Throwables.warning( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	48	None	add
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throwables.throwable( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  Throwables.throwable( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    Throwables.throwable( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	48	None	add
56	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(this);	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header   "    +    new    String(realized));    }    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	30	None	replace
57	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getArEntryType());  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getArEntryType());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(getArEntryType());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header   "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
58	[BUG]  [BUGGY]  Reader  reader  =  input.read();  [CE]  cannot  find  symbol  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Reader  reader  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Reader  reader  =  input.read();	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header   "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
59	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getNextArEntry());  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getNextArEntry());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(getNextArEntry());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header   "    +    new    String(realized));    }    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	30	None	replace
60	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getArEntryName());  [CE]  cannot  find  symbol  [FE]                          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getArEntryName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(getArEntryName());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header   "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
61	[BUG]  [BUGGY]  Thread.currentThread().setContext(new  ArArchiveEntry(this,  input));  [CE]  no  suitable  constructor  found  for  ArArchiveEntry(ArArchiveInputStream,InputStream)  [FE]                            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContext(new  ArArchiveEntry(this,  input));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContext(new  ArArchiveEntry(this,  input));	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header   "    +    new    String(realized));    }    	non-compiled	[CE]  no  suitable  constructor  found  for  ArArchiveEntry(ArArchiveInputStream,InputStream)	30	None	replace
62	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	compilable	  [FE]  IOException  	85	1	replace
63	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [FE]  IOException  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	compilable	  [FE]  IOException  	85	1	replace
64	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	compilable	  [FE]  IllegalArgumentException  	85	1	replace
65	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	compilable	  [FE]  IllegalArgumentException  	85	1	replace
66	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  final  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	final  Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	compilable	  [FE]  IOException  	85	1	replace
67	[BUG]  [BUGGY]  final  Throwable  cause  =  new  IllegalArgumentException( " ");  [FE]  IOException  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  final  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	final  Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	compilable	  [FE]  IOException  	85	1	replace
68	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Input  error: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Input  error: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  cause  =  new  IllegalArgumentException( "Input  error: "  +  input.getValue());	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
69	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Unexpected  input: "  +  input.toString());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	compilable	  [FE]  IOException  	12	1	replace
70	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.toString());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Unexpected  input: "  +  input.toString());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	compilable	  [FE]  IOException  	12	1	replace
71	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.length);  [CE]  cannot  find  symbol  length  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Unexpected  input: "  +  input.length);	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
72	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Unexpected  input: "  +  input.getValue());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
73	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "Unexpected  input: "  +  input.available());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
74	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  input: "  +  input.available());  [FE]  IllegalArgumentException  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Unexpected  input: "  +  input.available());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
75	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getKey());  [CE]  cannot  find  symbol  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Unexpected  input: "  +  input.getKey());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
76	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
77	[BUG]  [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
78	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	26	None	replace
79	[BUG]  [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	26	None	replace
80	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " "));  }  [CE]  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " "));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " "));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
81	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.getLength();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.getLength();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.getLength();	  return(input    ==    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
82	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.getBytes();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.getBytes();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.getBytes();	  return(input    ==    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
83	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.read();  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.read();	  return(input    ==    null)?    null    :    input.length;    	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	65	None	replace
84	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.bytelength;  [CE]  cannot  find  symbol  bytelength  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.bytelength;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.bytelength;	  return(input    ==    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol  bytelength	65	None	replace
85	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  not  a  statement	52	None	replace
86	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(input.available()));  [CE]  no  suitable  method  found  for  equals(int)  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( " ".equals(input.available()));	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	52	None	replace
87	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(input.getValue()));  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(input.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( " ".equals(input.getValue()));	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
88	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(input.getName()));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( " ".equals(input.getName()));	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	33	None	add
90	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  Throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  Throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    Throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  not  a  statement	33	None	add
91	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  Throwables.throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  Throwables.throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    Throwables.throw  new  IllegalStateException( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  <identifier>  expected	33	None	add
92	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  Throwables.log( "Invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  Throwables.log( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    Throwables.log( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	33	None	add
93	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  Throwables.warning( "Invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  Throwables.warning( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    Throwables.warning( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	33	None	add
94	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	compilable	  [FE]  IOException  	66	1	replace
95	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  [FE]  IOException  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	compilable	  [FE]  IOException  	66	1	replace
96	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	compilable	  [FE]  IOException  	66	1	replace
97	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	compilable	  [FE]  IOException  	66	1	replace
98	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  System.err.println( "Invalid  input: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  System.err.println( "Invalid  input: "  +  input.toString());  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	compilable	  [FE]  IOException  	66	1	replace
99	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  System.err.println( "Invalid  input: "  +  input.toString());  }  [FE]  IOException  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  System.err.println( "Invalid  input: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  else  {  System.err.println( "Invalid  input: "  +  input.toString());  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	compilable	  [FE]  IOException  	66	1	replace
100	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	new  IOException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	compilable	  [FE]  IOException  	66	1	replace
101	[BUG]  [BUGGY]  new  IOException( "Invalid  input: "  +  input.toString());  [FE]  IOException  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IOException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	compilable	  [FE]  IOException  	66	1	replace
102	[BUG]  [BUGGY]  Throwables.log( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	66	None	replace
103	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.getValue());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
104	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getKey());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.getKey());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
105	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.getMessage());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
106	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.toString()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( "invalid  input: "  +  input.toString()  + "n ");	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    	compilable	  [FE]  IllegalStateException  	101	1	replace
107	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.toString()  + "n ");  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.toString()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.toString()  + "n ");	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    	compilable	  [FE]  IllegalStateException  	101	1	replace
108	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getKey());  [CE]  <identifier>  expected  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getKey());	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
109	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getMessage());  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getMessage());	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
110	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.toString()  + "n ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.toString()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.toString()  + "n ");	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
111	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getName());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getName());	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
112	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getClass());  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getClass());	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
113	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.length);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.length);	  throw    new    IOException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
114	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.length);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.length);	  throw    new    IOException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
115	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.length,  expected.length);  [CE]  cannot  find  symbol  length  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.length,  expected.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.length,  expected.length);	  throw    new    IOException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
116	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.getValue()));  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " ".equals(input.getValue()));	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
117	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getMessage());  [CE]  <identifier>  expected  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getMessage());	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
118	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getKey());  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getKey());	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
119	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + "n ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + "n ");	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
120	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getClass());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getClass());	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
121	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + ", ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + ", ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + ", ");	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
122	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());	  throw    new    IllegalStateException(   "Input    error:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	73	None	replace
123	[BUG]  [BUGGY]  Throwables.warning( "Input  error: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Input  error: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Input  error: "  +  input.getBytes());	  throw    new    IllegalStateException(   "Input    error:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
124	[BUG]  [BUGGY]  Throwables.log( "Input  error: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Input  error: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Input  error: "  +  input.getBytes());	  throw    new    IllegalStateException(   "Input    error:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
125	[BUG]  [BUGGY]  Throwables.wrap( "Input  error: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap( "Input  error: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Input  error: "  +  input.getBytes());	  throw    new    IllegalStateException(   "Input    error:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
126	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes(i));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes(i));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getBytes(i));	  Throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	93	None	replace
127	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes(0));  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes(0));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getBytes(0));	  Throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	93	None	replace
128	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "n ");  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "n ");	  Throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	93	None	replace
129	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes(),  offset);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes(),  offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getBytes(),  offset);	  Throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	93	None	replace
130	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input,  offset.getBytes());  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input,  offset.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input,  offset.getBytes());	  Throwables.wrap(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
131	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getBytes(),  offset);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getBytes(),  offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input.getBytes(),  offset);	  Throwables.wrap(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
132	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]                                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input.toString());	  Throwables.wrap(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol  Throwables	59	None	replace
133	[BUG]  [BUGGY]  Throwables.wrap(e,   "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  e  [FE]                                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(e,   "Invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(e,   "Invalid  input: "  +  input.getBytes());	  Throwables.wrap(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol  e	59	None	replace
134	[BUG]  [BUGGY]  Throwables.wrap(input, "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(input, "Invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(input, "Invalid  input: "  +  input.getBytes());	  Throwables.wrap(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
135	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
136	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()  [CE]  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  	28	None	replace
137	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header  [CE]  unclosed  string  literal  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  unclosed  string  literal	28	None	replace
138	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  unclosed  string  literal	28	None	replace
139	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString  [CE]  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  	28	None	replace
140	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
141	[BUG]  [BUGGY]  Throwables.warning( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "   ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "   ");	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
142	[BUG]  [BUGGY]  Throwables.warning( ", ");  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( ", ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( ", ");	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
143	[BUG]  [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]                  IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  input: "  +  input.available());	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
144	[BUG]  [BUGGY]  Throwables.warning( "msg.bad.input.expected.length ");  [CE]  cannot  find  symbol  Throwables  [FE]                    IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "msg.bad.input.expected.length ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "msg.bad.input.expected.length ");	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
145	[BUG]  [BUGGY]  Throwables.warning( "msg.bad.internal.expected.length ");  [CE]  cannot  find  symbol  Throwables  [FE]                      IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "msg.bad.internal.expected.length ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "msg.bad.internal.expected.length ");	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
146	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IOException( " ");  }	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	compilable	  [FE]  IOException  	92	1	replace
147	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IOException( " ");  }	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	compilable	  [FE]  IOException  	92	1	replace
148	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  0,  expected,  0,  input.length);  }  [CE]  cannot  find  symbol  expected  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  0,  expected,  0,  input.length);  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  0,  expected,  0,  input.length);  }	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	non-compiled	[CE]  cannot  find  symbol  expected	92	None	replace
149	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  input.close();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  input.close();  }	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	compilable	  [FE]  IOException  	92	1	replace
150	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  input.close();  }  [FE]  IOException  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  input.close();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  input.close();  }	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	compilable	  [FE]  IOException  	92	1	replace
151	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ".equals(input.available()));  }  [CE]  no  suitable  method  found  for  equals(int)  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ".equals(input.available()));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IOException( " ".equals(input.available()));  }	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	92	None	replace
152	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  0,  expected[i],  0,  input.length);  }  [CE]  cannot  find  symbol  expected  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  0,  expected[i],  0,  input.length);  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  else  {  System.arraycopy(input,  0,  expected[i],  0,  input.length);  }	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	non-compiled	[CE]  cannot  find  symbol  expected	92	None	replace
153	[BUG]  [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  throw  new  IOException( "Unexpected  input:   "  +  input.available());  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  throw  new  IOException( "Unexpected  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Unexpected    input:   "    +    input.available());    throw  new  IOException( "Unexpected  input:   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	11	None	add
154	[BUG]  [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  if(   "Unexpected  input:   "  +  input.available())  {  throw  new  IOException( "Unexpected  input:   "  +  input.available());  }  [CE]  incompatible  types  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  if(   "Unexpected  input:   "  +  input.available())  {  throw  new  IOException( "Unexpected  input:   "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Unexpected    input:   "    +    input.available());    if(   "Unexpected  input:   "  +  input.available())  {  throw  new  IOException( "Unexpected  input:   "  +  input.available());  }	  	non-compiled	[CE]  incompatible  types	11	None	add
155	[BUG]  [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throwables.log( "Unexpected  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throwables.log( "Unexpected  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Unexpected    input:   "    +    input.available());    Throwables.log( "Unexpected  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	11	None	add
156	[BUG]  [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throwables.warning( "Unexpected  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throwables.warning( "Unexpected  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Unexpected    input:   "    +    input.available());    Throwables.warning( "Unexpected  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	11	None	add
157	[BUG]  [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throwables.throwable( "Unexpected  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throwables.throwable( "Unexpected  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Unexpected    input:   "    +    input.available());    Throwables.throwable( "Unexpected  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	11	None	add
158	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ") ");  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ") ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ") ");	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	58	None	replace
159	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes(i));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes(i));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes(i));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	58	None	replace
160	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()));  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
161	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.toString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.toString());	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	58	None	replace
162	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes(0));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes(0));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes(0));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	58	None	replace
163	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ",  expected: "  +  expected[i]);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ",  expected: "  +  expected[i]);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ",  expected: "  +  expected[i]);	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	58	None	replace
164	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.available());  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.available());	  throw    new    IOException(   "Invalid    input:   "    +    input.available());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
165	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.available());	  throw    new    IOException(   "Invalid    input:   "    +    input.available());    	compilable	  [FE]  IllegalArgumentException  	7	1	replace
166	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.available());  [FE]  IllegalArgumentException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.available());	  throw    new    IOException(   "Invalid    input:   "    +    input.available());    	compilable	  [FE]  IllegalArgumentException  	7	1	replace
167	[BUG]  [BUGGY]  Return(input  ==  null)?  null  :  input.toString();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Return(input  ==  null)?  null  :  input.toString();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Return(input  ==  null)?  null  :  input.toString();	  return(input    ==    null)?    null    :    input.toString();    	non-compiled	[CE]  not  a  statement	82	None	replace
168	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.getKey();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.getKey();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.getKey();	  return(input    ==    null)?    null    :    input.toString();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
169	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());	  throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	90	None	replace
170	[BUG]  [BUGGY]  Throwables.warning( "JSC_INTERNAL_ERROR ");  [CE]  cannot  find  symbol  Throwables  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "JSC_INTERNAL_ERROR ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "JSC_INTERNAL_ERROR ");	  throw    new    IOException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	15	None	replace
171	[BUG]  [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  input: "  +  input.getBytes());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
172	[BUG]  [BUGGY]  Throwables.log( "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Invalid  input: "  +  input.getBytes());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
173	[BUG]  [BUGGY]  new  IllegalStateException( "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalStateException( "Invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalStateException( "Invalid  input: "  +  input.getBytes());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
174	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input,  filemode.getBytes());  [CE]  cannot  find  symbol  filemode  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input,  filemode.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input,  filemode.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input,    offset.getBytes());    	non-compiled	[CE]  cannot  find  symbol  filemode	118	None	replace
175	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input,  offset.getBytes());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input,  offset.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input,  offset.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input,    offset.getBytes());    	non-compiled	[CE]  <identifier>  expected	118	None	replace
176	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input,  in.getBytes());  [CE]  cannot  find  symbol  in  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input,  in.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input,  in.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input,    offset.getBytes());    	non-compiled	[CE]  cannot  find  symbol  in	118	None	replace
177	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]    ==    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
178	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]    ==    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	113	None	replace
179	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]    ==    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
180	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }  [CE]  not  a  statement  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  filemode[i]  ==  realized[i])  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]    ==    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  not  a  statement	113	None	replace
181	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " "));  }  [CE]  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " "));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( " "));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]    ==    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
182	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.getName());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
183	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input.getName());  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input.getName());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
184	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getName());  [CE]  <identifier>  expected  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getName());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	102	None	replace
185	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getName(),  offset);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getName(),  offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.getName(),  offset);	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
186	[BUG]  [BUGGY]  input  =  input.read();  [CE]  cannot  assign  a  value  to  final  variable  input  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  input  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	input  =  input.read();	          pInput    =    input.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  input	76	None	replace
187	[BUG]  [BUGGY]  InputStream  input  =  input.read();  [CE]  incompatible  types  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  InputStream  input  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	InputStream  input  =  input.read();	          pInput    =    input.read();    	non-compiled	[CE]  incompatible  types	76	None	replace
188	[BUG]  [BUGGY]  InputStream  input  =  input.readInput();  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  InputStream  input  =  input.readInput();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	InputStream  input  =  input.readInput();	          pInput    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
189	[BUG]  [BUGGY]  readInput  =  input.read();  [CE]  cannot  find  symbol  readInput  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  readInput  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	readInput  =  input.read();	          pInput    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  readInput	76	None	replace
190	[BUG]  [BUGGY]  fileInput  =  input.read();  [CE]  cannot  find  symbol  fileInput  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  fileInput  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	fileInput  =  input.read();	          pInput    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  fileInput	76	None	replace
191	[BUG]  [BUGGY]  Throwables.throwable( "   ");  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( "   ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( "   ");	  throw    new    IllegalArgumentException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	46	None	replace
192	[BUG]  [BUGGY]  Throwables.throwable( ", ");  [CE]  cannot  find  symbol  Throwables  [FE]                  IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( ", ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( ", ");	  throw    new    IllegalArgumentException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	46	None	replace
193	[BUG]  [BUGGY]  Reader.throwable( "   ");  [CE]  cannot  find  symbol  Reader  [FE]                    IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Reader.throwable( "   ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Reader.throwable( "   ");	  throw    new    IllegalArgumentException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Reader	46	None	replace
194	[BUG]  [BUGGY]  Throwables.throwable( "  [null] ");  [CE]  cannot  find  symbol  Throwables  [FE]                      IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( "  [null] ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( "  [null] ");	  throw    new    IllegalArgumentException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	46	None	replace
195	[BUG]  [BUGGY]  Throwables.throwable( " ",  input);  [CE]  cannot  find  symbol  Throwables  [FE]                        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( " ",  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( " ",  input);	  throw    new    IllegalArgumentException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	46	None	replace
196	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  input.close();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	input.close();	          pInput.close();    	compilable	  [FE]  IOException  	79	1	replace
197	[BUG]  [BUGGY]  input.close();  [FE]  IOException  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  input.close();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	input.close();	          pInput.close();    	compilable	  [FE]  IOException  	79	1	replace
198	[BUG]  [BUGGY]  filemode.close();  [CE]  cannot  find  symbol  filemode  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode.close();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode.close();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol  filemode	79	None	replace
199	[BUG]  [BUGGY]  reader.close();  [CE]  cannot  find  symbol  reader  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  reader.close();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	reader.close();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol  reader	79	None	replace
200	[BUG]  [BUGGY]  in.close();  [CE]  cannot  find  symbol  in  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  in.close();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	in.close();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol  in	79	None	replace
201	[BUG]  [BUGGY]  user.close();  [CE]  cannot  find  symbol  user  [FE]                          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  user.close();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	user.close();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol  user	79	None	replace
202	[BUG]  [BUGGY]  pInput.flush();  [CE]  cannot  find  symbol  pInput  [FE]                            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  pInput.flush();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	pInput.flush();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol  pInput	79	None	replace
203	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.toString());  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.toString());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
204	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getKey());  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.getKey());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
205	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.toString()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( "Invalid  input: "  +  input.toString()  + "n ");	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    	compilable	  [FE]  IllegalStateException  	36	1	replace
206	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.toString()  + "n ");  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.toString()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.toString()  + "n ");	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    	compilable	  [FE]  IllegalStateException  	36	1	replace
207	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.getMessage());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
208	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
209	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName  [CE]  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  	31	None	replace
210	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName()  [CE]  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName()  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName()	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  	31	None	replace
211	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
212	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
213	[BUG]  [BUGGY]  Throwables.log( " ");  [CE]  cannot  find  symbol  Throwables  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( " ");	  throw    new    IOException(       "       ");    Throwables.log(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	17	None	replace
214	[BUG]  [BUGGY]  Throwables.log( "JSC_INTERNAL_ERROR ");  [CE]  cannot  find  symbol  Throwables  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "JSC_INTERNAL_ERROR ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "JSC_INTERNAL_ERROR ");	  throw    new    IOException(       "       ");    Throwables.log(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	17	None	replace
215	[BUG]  [BUGGY]  Throwables.log( "Invalid  input: "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Invalid  input: "  +  input.available());	  throw    new    IOException(       "       ");    Throwables.log(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	17	None	replace
216	[BUG]  [BUGGY]  Throwables.log( "Unexpected  error: ");  [CE]  cannot  find  symbol  Throwables  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Unexpected  error: ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Unexpected  error: ");	  throw    new    IOException(       "       ");    Throwables.log(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	17	None	replace
217	[BUG]  [BUGGY]  Throwables.log( "] ");  [CE]  cannot  find  symbol  Throwables  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "] ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "] ");	  throw    new    IOException(       "       ");    Throwables.log(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	17	None	replace
218	[BUG]  [BUGGY]  Throwables.throwable( "JSC_INTERNAL_ERROR ");  [CE]  cannot  find  symbol  Throwables  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( "JSC_INTERNAL_ERROR ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( "JSC_INTERNAL_ERROR ");	  throw    new    IOException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	14	None	replace
219	[BUG]  [BUGGY]  Throwables.throwable( "JSC_INTERNAL_SERIALIZED_ERROR ");  [CE]  cannot  find  symbol  Throwables  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( "JSC_INTERNAL_SERIALIZED_ERROR ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( "JSC_INTERNAL_SERIALIZED_ERROR ");	  throw    new    IOException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	14	None	replace
220	[BUG]  [BUGGY]  Throwables.throwable( "PMD.error( "  +  input.available()  + ") ");  [CE]  cannot  find  symbol  Throwables  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( "PMD.error( "  +  input.available()  + ") ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( "PMD.error( "  +  input.available()  + ") ");	  throw    new    IOException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	14	None	replace
221	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
222	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
223	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( "  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( "	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
224	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
225	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()!=  0)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
226	[BUG]  [BUGGY]  readFully();  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  readFully();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	readFully();	  read();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
227	[BUG]  [BUGGY]  readFile();  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  readFile();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	readFile();	  read();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
228	[BUG]  [BUGGY]  readFully(input);  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  readFully(input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	readFully(input);	  read();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
229	[BUG]  [BUGGY]  handleMissingName();  [CE]  cannot  find  symbol  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  handleMissingName();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	handleMissingName();	  read();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
230	[BUG]  [BUGGY]  read(input);  [CE]  no  suitable  method  found  for  read(InputStream)  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read(input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read(input);	  read();    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream)	25	None	replace
231	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  throw  new  IOException( "invalid  header   "  +  input.available());  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  throw  new  IOException( "invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    throw  new  IOException( "invalid  header   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	95	None	add
232	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }	  	non-compiled	[CE]  unreachable  statement	95	None	add
233	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  else  {  read();  }  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  else  {  read();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  else  {  read();  }	  	non-compiled	[CE]  unreachable  statement	95	None	add
234	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throwables.warning( "invalid  header   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throwables.warning( "invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    Throwables.warning( "invalid  header   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	95	None	add
235	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throwables.log( "invalid  header   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throwables.log( "invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    Throwables.log( "invalid  header   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	95	None	add
236	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throwables.throwables( "invalid  header   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]              IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throwables.throwables( "invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    Throwables.throwables( "invalid  header   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	95	None	add
237	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getKey());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getKey());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
238	[BUG]  [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  input: "  +  input.getValue());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
239	[BUG]  [BUGGY]  Throwables.log( "Invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Invalid  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Invalid  input: "  +  input.getValue());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
240	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue(),  offset);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue(),  offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue(),  offset);	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
241	[BUG]  [BUGGY]  Throwable  t  =  input.read();  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  t  =  input.read();	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  incompatible  types	98	None	replace
242	[BUG]  [BUGGY]  IllegalArgumentException( " ");  t  =  input.read();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ");  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ");  t  =  input.read();	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
243	[BUG]  [BUGGY]  IllegalArgumentException( " ");  if(t!=  input.read())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ");  if(t!=  input.read())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ");  if(t!=  input.read())  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
244	[BUG]  [BUGGY]  IllegalArgumentException( " ");  if(t  ==  input.read())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ");  if(t  ==  input.read())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ");  if(t  ==  input.read())  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
245	[BUG]  [BUGGY]  IllegalArgumentException( " ");  Throwable  t  =  input.read();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ");  Throwable  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ");  Throwable  t  =  input.read();	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
246	[BUG]  [BUGGY]  IllegalArgumentException( " ");  if(t!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ");  if(t!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ");  if(t!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
247	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ", ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	55	1	replace
248	[BUG]  [BUGGY]  throw  new  IllegalStateException( ", ");  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( ", ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( ", ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	55	1	replace
249	[BUG]  [BUGGY]  File  filemode  =  input.available();  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  File  filemode  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	File  filemode  =  input.available();	          filemode    =    input.available();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
250	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  int  filemode  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	int  filemode  =  input.available();	          filemode    =    input.available();    	compilable	  [FE]  IOException  	78	1	replace
251	[BUG]  [BUGGY]  int  filemode  =  input.available();  [FE]  IOException  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  int  filemode  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	int  filemode  =  input.available();	          filemode    =    input.available();    	compilable	  [FE]  IOException  	78	1	replace
252	[BUG]  [BUGGY]  input  =  input.available();  [CE]  cannot  assign  a  value  to  final  variable  input  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  input  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	input  =  input.available();	          filemode    =    input.available();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  input	78	None	replace
253	[BUG]  [BUGGY]  wiremode  =  input.available();  [CE]  cannot  find  symbol  wiremode  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  wiremode  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	wiremode  =  input.available();	          filemode    =    input.available();    	non-compiled	[CE]  cannot  find  symbol  wiremode	78	None	replace
254	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  offset);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  offset);	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
255	[BUG]  [BUGGY]  [FE]  java.io.IOException:    [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( ", ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( ", ");	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  java.io.IOException:    	18	1	replace
256	[BUG]  [BUGGY]  throw  new  IOException( ", ");  [FE]  java.io.IOException:    [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( ", ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( ", ");	  throw    new    IOException(       "       ");    throw    new    IOException(   ",       ");    	compilable	  [FE]  java.io.IOException:    	18	1	replace
257	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	  [FE]  IOException  	97	1	replace
258	[BUG]  [BUGGY]  new  IllegalArgumentException( " ");  [FE]  IOException  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	compilable	  [FE]  IOException  	97	1	replace
259	[BUG]  [BUGGY]  ||  input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ||  input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	||  input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
260	[BUG]  [BUGGY]  new  IllegalArgumentException( " ".equals(input.available()));  [CE]  no  suitable  method  found  for  equals(int)  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalArgumentException( " ".equals(input.available()));	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	97	None	replace
261	[BUG]  [BUGGY]  ||  input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ||  input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	||  input.available()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
262	[BUG]  [BUGGY]  new  IllegalArgumentException( " ".equals(input.getValue()));  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ".equals(input.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalArgumentException( " ".equals(input.getValue()));	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
263	[BUG]  [BUGGY]  filemode  =  input.read(i);  [CE]  cannot  find  symbol  filemode  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(i);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(i);	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
264	[BUG]  [BUGGY]  filemode  =  input.read(input);  [CE]  cannot  find  symbol  filemode  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(input);	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
265	[BUG]  [BUGGY]  filemode  =  input.read(offset);  [CE]  cannot  find  symbol  filemode  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(offset);	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
266	[BUG]  [BUGGY]  filemode  =  input.read(data);  [CE]  cannot  find  symbol  filemode  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(data);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(data);	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
267	[BUG]  [BUGGY]  filemode  =  input.read(new  String(offset));  [CE]  cannot  find  symbol  filemode  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(new  String(offset));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(new  String(offset));	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
268	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.getName());  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  header   "  +  input.getName());	  throw    new    IOException(   "invalid    header       "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
269	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header   "  +  input.getName());  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header   "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header   "  +  input.getName());	  throw    new    IOException(   "invalid    header       "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	105	None	replace
270	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header   "  +  input.getName());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header   "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header   "  +  input.getName());	  throw    new    IOException(   "invalid    header       "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	105	None	replace
271	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input:... "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  input:... "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(       "Invalid    input:...   "    +    input.toString());    	compilable	  [FE]  IOException  	84	1	replace
272	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input:... "  +  input.toString());  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input:... "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input:... "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(       "Invalid    input:...   "    +    input.toString());    	compilable	  [FE]  IOException  	84	1	replace
273	[BUG]  [BUGGY]  Throwables.log( "Invalid  input: "  +  input.toString());  throw  new  IOException( "Invalid  input:... "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Invalid  input: "  +  input.toString());  throw  new  IOException( "Invalid  input:... "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Invalid  input: "  +  input.toString());  throw  new  IOException( "Invalid  input:... "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(       "Invalid    input:...   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	84	None	replace
274	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(       "       ");    	compilable	  [FE]  IllegalStateException  	53	1	replace
275	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(       "       ");    	compilable	  [FE]  IllegalStateException  	53	1	replace
276	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.available()));  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(input.available()));	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  <identifier>  expected	53	None	replace
277	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.getName()));  [CE]  <identifier>  expected  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(input.getName()));	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  <identifier>  expected	53	None	replace
278	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  header: "  +  input.getName());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  header: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  header: "  +  input.getName());	  throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	19	None	replace
279	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  header: "  +  input.getName()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  header: "  +  input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  header: "  +  input.getName()));	  throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
280	[BUG]  [BUGGY]  Throwables.warning( "Invalid  header: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  header: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  header: "  +  input.getName());	  throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
281	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " "));  }  [CE]  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " "));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( " "));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
282	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	new  IOException( " ");	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	compilable	  [FE]  IOException  	110	1	replace
283	[BUG]  [BUGGY]  new  IOException( " ");  [FE]  IOException  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IOException( " ");	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	compilable	  [FE]  IOException  	110	1	replace
284	[BUG]  [BUGGY]  new  IOException( " ".equals(input.available()));  [CE]  no  suitable  method  found  for  equals(int)  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IOException( " ".equals(input.available()));	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	110	None	replace
285	[BUG]  [BUGGY]  new  IOException( " ".equals(input.getValue()));  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( " ".equals(input.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IOException( " ".equals(input.getValue()));	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
286	[BUG]  [BUGGY]  new  IOException( " ".equals(input.getName()));  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( " ".equals(input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IOException( " ".equals(input.getName()));	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
287	[BUG]  [BUGGY]  new  IOException( " ".equals(input.getBytes()));  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( " ".equals(input.getBytes()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IOException( " ".equals(input.getBytes()));	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
288	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	35	None	add
289	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  Throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  Throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    Throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  not  a  statement	35	None	add
290	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  Throwables.throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  Throwables.throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    Throwables.throw  new  IllegalStateException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  <identifier>  expected	35	None	add
291	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  Throwables.log( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  Throwables.log( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    Throwables.log( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	35	None	add
292	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  Throwables.warning( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  Throwables.warning( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    Throwables.warning( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	35	None	add
293	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
294	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header  [CE]  unclosed  string  literal  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  unclosed  string  literal	122	None	replace
295	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName  [CE]  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  	122	None	replace
296	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName()  [CE]  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName()  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName()	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  	122	None	replace
297	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
299	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
300	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [CE]  unclosed  string  literal  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  unclosed  string  literal	111	None	replace
301	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized  [CE]  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	111	None	replace
302	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized)  [CE]  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized)  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized)	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	111	None	replace
303	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
304	[BUG]  [BUGGY]  input  =  input.getArEntry();  [CE]  cannot  assign  a  value  to  final  variable  input  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  input  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	input  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  input	75	None	replace
305	[BUG]  [BUGGY]  InputStream  input  =  input.getArEntry();  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  InputStream  input  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	InputStream  input  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
306	[BUG]  [BUGGY]  fileInput  =  input.getArEntry();  [CE]  cannot  find  symbol  fileInput  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  fileInput  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	fileInput  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  fileInput	75	None	replace
307	[BUG]  [BUGGY]  input.getArEntry();  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
308	[BUG]  [BUGGY]  Input  input  =  input.getArEntry();  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Input  input  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Input  input  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
309	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getKey());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input.getKey());	  Throwables.wrap(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
310	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getValue(),  offset);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getValue(),  offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input.getValue(),  offset);	  Throwables.wrap(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
311	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input,  offset.getValue());  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input,  offset.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input,  offset.getValue());	  Throwables.wrap(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  long  cannot  be  dereferenced	5	None	replace
312	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	116	None	add
313	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throwables.throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throwables.throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    Throwables.throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  <identifier>  expected	116	None	add
314	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    Throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  not  a  statement	116	None	add
315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throwables.warning( "invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throwables.warning( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    Throwables.warning( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	116	None	add
316	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throwables.log( "invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throwables.log( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    Throwables.log( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	116	None	add
317	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throwables.throwable( "invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  Throwables.throwable( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    Throwables.throwable( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	116	None	add
318	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    input.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
319	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    input.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	112	None	replace
320	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " "));  }  [CE]  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " "));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( " "));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    input.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
321	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    input.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
322	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "' ");  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "' ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "' ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    input.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
323	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getPath());  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getPath());	  throw    new    IOException(   "Invalid    input:   "    +    input.getPath());    	non-compiled	[CE]  <identifier>  expected	87	None	replace
324	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getRawPath());  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getRawPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getRawPath());	  throw    new    IOException(   "Invalid    input:   "    +    input.getPath());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
325	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  filemode.getPath());  [CE]  cannot  find  symbol  filemode  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  filemode.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  filemode.getPath());	  throw    new    IOException(   "Invalid    input:   "    +    input.getPath());    	non-compiled	[CE]  cannot  find  symbol  filemode	87	None	replace
326	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getText());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getText());	  throw    new    IOException(   "Invalid    input:   "    +    input.getText());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
327	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getText());  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getText());	  throw    new    IOException(   "Invalid    input:   "    +    input.getText());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
328	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getText());  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getText());	  throw    new    IOException(   "Invalid    input:   "    +    input.getText());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
329	[BUG]  [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getText());  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap( "Invalid  input: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap( "Invalid  input: "  +  input.getText());	  throw    new    IOException(   "Invalid    input:   "    +    input.getText());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
330	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getName());  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getName());	  throw    new    IOException(   "Invalid    input:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	88	None	replace
331	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getRawClass());  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getRawClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getRawClass());	  throw    new    IOException(   "Invalid    input:   "    +    input.getName());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
332	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  int  filemode  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	int  filemode  =  input.read();	          filemode    =    input.read();    	compilable	  [FE]  IOException  	74	1	replace
333	[BUG]  [BUGGY]  int  filemode  =  input.read();  [FE]  IOException  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  int  filemode  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	int  filemode  =  input.read();	          filemode    =    input.read();    	compilable	  [FE]  IOException  	74	1	replace
334	[BUG]  [BUGGY]  File  filemode  =  input.read();  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  File  filemode  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	File  filemode  =  input.read();	          filemode    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
335	[BUG]  [BUGGY]  wiremode  =  input.read();  [CE]  cannot  find  symbol  wiremode  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  wiremode  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	wiremode  =  input.read();	          filemode    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  wiremode	74	None	replace
336	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getMessage());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
337	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + "n ");	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	compilable	  [FE]  IllegalArgumentException  	49	1	replace
338	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + "n ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString()  + "n ");	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	compilable	  [FE]  IllegalArgumentException  	49	1	replace
339	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getPath());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getPath());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
340	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(input.available(),  input.length));  [CE]  cannot  find  symbol  length  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(input.available(),  input.length));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "   ".equals(input.available(),  input.length));	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	non-compiled	[CE]  cannot  find  symbol  length	39	None	replace
341	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(input.available()),  input.length);  [CE]  no  suitable  method  found  for  equals(int)  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "   ".equals(input.available()),  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "   ".equals(input.available()),  input.length);	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	39	None	replace
342	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input.available()  : "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "Invalid  input.available()  : "  +  input.available());	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	compilable	  [FE]  IllegalArgumentException  	39	1	replace
343	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input.available()  : "  +  input.available());  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input.available()  : "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input.available()  : "  +  input.available());	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	compilable	  [FE]  IllegalArgumentException  	39	1	replace
344	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  error: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "Input  error: "  +  input.available());	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	compilable	  [FE]  IllegalArgumentException  	39	1	replace
345	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Input  error: "  +  input.available());  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Input  error: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Input  error: "  +  input.available());	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	compilable	  [FE]  IllegalArgumentException  	39	1	replace
346	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( " ".length());  }  [CE]  no  suitable  constructor  found  for  IllegalStateException(int)  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( " ".length());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IllegalStateException( " ".length());  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException('   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(int)	94	None	replace
347	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.length();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.length();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.length();	  return(input    ==    null)?    null    :    input.available();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
348	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.openStream();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.openStream();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.openStream();	  return(input    ==    null)?    null    :    input.available();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
349	[BUG]  [BUGGY]  return  input  ==  null?  null  :  input.available();  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return  input  ==  null?  null  :  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return  input  ==  null?  null  :  input.available();	  return(input    ==    null)?    null    :    input.available();    	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	63	None	replace
350	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.getValue();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.getValue();	  return(input!=    null)?    null    :    input.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
351	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.getKey();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.getKey();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.getKey();	  return(input!=    null)?    null    :    input.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
352	[BUG]  [BUGGY]  return(input  >=  null)?  null  :  input.getValue();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  >=  null)?  null  :  input.getValue();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  >=  null)?  null  :  input.getValue();	  return(input!=    null)?    null    :    input.getValue();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	64	None	replace
353	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  throw  new  IOException( "Invalid  input:   "  +  input.available());  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  throw  new  IOException( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.available());    throw  new  IOException( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	6	None	add
354	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input:   "  +  input.available());  }  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input:   "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.available());    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  input:   "  +  input.available());  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
355	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.throwAsIOException( "Invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.throwAsIOException( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.available());    Throwables.throwAsIOException( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	6	None	add
356	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.throwable( "Invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.throwable( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.available());    Throwables.throwable( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	6	None	add
357	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.warning( "Invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.warning( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.available());    Throwables.warning( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	6	None	add
358	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.toString());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.toString());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
359	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getClass());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getClass());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
360	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getRawClass());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getRawClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getRawClass());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
361	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getName()  + "n ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getName()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getName()  + "n ");	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
362	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getMessage());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getMessage());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
363	[BUG]  [BUGGY]  IOException( " ");  Throwable  t  =  input.read();  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IOException( " ");  Throwable  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IOException( " ");  Throwable  t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
364	[BUG]  [BUGGY]  ThreadContext.throw  new  IOException( " ");  Throwable  t  =  input.read();  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ThreadContext.throw  new  IOException( " ");  Throwable  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	ThreadContext.throw  new  IOException( " ");  Throwable  t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  <identifier>  expected	109	None	replace
365	[BUG]  [BUGGY]  ThreadContext.throw  new  IllegalArgumentException( " ");  Throwable  t  =  input.read();  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ThreadContext.throw  new  IllegalArgumentException( " ");  Throwable  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	ThreadContext.throw  new  IllegalArgumentException( " ");  Throwable  t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  <identifier>  expected	109	None	replace
366	[BUG]  [BUGGY]  ThreadContext.throw  new  IllegalStateException( " ");  Throwable  t  =  input.read();  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ThreadContext.throw  new  IllegalStateException( " ");  Throwable  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	ThreadContext.throw  new  IllegalStateException( " ");  Throwable  t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  <identifier>  expected	109	None	replace
367	[BUG]  [BUGGY]  ThreadContext.throw  new  IllegalArgumentException( " ");  t  =  input.read();  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ThreadContext.throw  new  IllegalArgumentException( " ");  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	ThreadContext.throw  new  IllegalArgumentException( " ");  t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  <identifier>  expected	109	None	replace
368	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  header   "  +  input.toString());	  throw    new    IOException(   "invalid    header       "    +    input.toString());    	compilable	  [FE]  IOException  	104	1	replace
369	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.toString());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  header   "  +  input.toString());	  throw    new    IOException(   "invalid    header       "    +    input.toString());    	compilable	  [FE]  IOException  	104	1	replace
370	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  input: "  +  input.getValue());	  throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
371	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input.toString());  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input.toString());	  throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	117	None	replace
372	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  input: "  +  input.getMessage());	  throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
373	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getKey());  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  input: "  +  input.getKey());	  throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
374	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  input: "  +  input.toString());  [CE]  <identifier>  expected  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	83	None	replace
375	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.toString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.toString());	  Throwables.throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
376	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getClass());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.getClass());	  Throwables.throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
377	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getRawClass());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getRawClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.getRawClass());	  Throwables.throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
378	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getPath());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.getPath());	  Throwables.throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
379	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getRawName());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getRawName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.getRawName());	  Throwables.throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
380	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getKey());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.getKey());	  Throwables.throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
381	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.available()));  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(input.available()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
382	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.getName()));  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(input.getName()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
383	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.getValue()));  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(input.getValue()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
384	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.toString()));  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.toString()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(input.toString()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
385	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
386	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unreachable: "  +  input.available());	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
387	[BUG]  [BUGGY]  System.err.println( "Unreachable: "  +  input.available());  [FE]  IOException  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unreachable: "  +  input.available());	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
388	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable: ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unreachable: ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
389	[BUG]  [BUGGY]  System.err.println( "Unreachable: ");  [FE]  IOException  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable: ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unreachable: ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
390	[BUG]  [BUGGY]  Reader.write(input,  0,  input.length);  [CE]  cannot  find  symbol  length  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Reader.write(input,  0,  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Reader.write(input,  0,  input.length);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	non-compiled	[CE]  cannot  find  symbol  length	121	None	replace
391	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable  filemode: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unreachable  filemode: "  +  input.available());	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
392	[BUG]  [BUGGY]  System.err.println( "Unreachable  filemode: "  +  input.available());  [FE]  IOException  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable  filemode: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unreachable  filemode: "  +  input.available());	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
393	[BUG]  [BUGGY]  System.err.println( "Unreachable: "  +  input.length);  [CE]  cannot  find  symbol  length  [FE]                  IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unreachable: "  +  input.length);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	non-compiled	[CE]  cannot  find  symbol  length	121	None	replace
394	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unreachable  input: "  +  input);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
395	[BUG]  [BUGGY]  System.err.println( "Unreachable  input: "  +  input);  [FE]  IOException  [FE]                    IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unreachable  input: "  +  input);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
396	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  not  a  statement	44	None	replace
397	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  throw  new  IOException( "invalid  header:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  throw  new  IOException( "invalid  header:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    throw  new  IOException( "invalid  header:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	22	None	add
398	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }	  	non-compiled	[CE]  unreachable  statement	22	None	add
399	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }	  	non-compiled	[CE]  unreachable  statement	22	None	add
400	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  Throwables.log( "invalid  header:   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  Throwables.log( "invalid  header:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    Throwables.log( "invalid  header:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	22	None	add
401	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
402	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()  [CE]  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  	71	None	replace
403	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString  [CE]  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  	71	None	replace
404	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
405	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getValue()  + "n ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getValue()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getValue()  + "n ");	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
406	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getRawClass());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getRawClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getRawClass());	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
407	[BUG]  [BUGGY]  Throwables.showError( " ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.showError( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.showError( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwables.showError(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	45	None	replace
408	[BUG]  [BUGGY]  Throwables.showError( "Invalid  input: "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.showError( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.showError( "Invalid  input: "  +  input.available());	  throw    new    IllegalArgumentException(       "       ");    Throwables.showError(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	45	None	replace
409	[BUG]  [BUGGY]  Throwables.showError( "Unexpected  error: ");  [CE]  cannot  find  symbol  Throwables  [FE]                  IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.showError( "Unexpected  error: ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.showError( "Unexpected  error: ");	  throw    new    IllegalArgumentException(       "       ");    Throwables.showError(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	45	None	replace
410	[BUG]  [BUGGY]  Throwables.showError( "Invalid  input: "  +  input);  [CE]  cannot  find  symbol  Throwables  [FE]                    IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.showError( "Invalid  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.showError( "Invalid  input: "  +  input);	  throw    new    IllegalArgumentException(       "       ");    Throwables.showError(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	45	None	replace
411	[BUG]  [BUGGY]  Throwables.showError( "Invalid  input: ");  [CE]  cannot  find  symbol  Throwables  [FE]                      IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.showError( "Invalid  input: ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.showError( "Invalid  input: ");	  throw    new    IllegalArgumentException(       "       ");    Throwables.showError(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	45	None	replace
412	[BUG]  [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.warning(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	70	None	replace
413	[BUG]  [BUGGY]  String  input  =  input.toString();  Throwables.warning( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  String  input  =  input.toString();  Throwables.warning( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	String  input  =  input.toString();  Throwables.warning( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.warning(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	70	None	replace
414	[BUG]  [BUGGY]  Throwables.error( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.error( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.error( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.warning(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	70	None	replace
415	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  header   "  +  input.available());	  throw    new    IOException(   "invalid    header       "    +    input.available());    	compilable	  [FE]  IOException  	96	1	replace
416	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.available());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  header   "  +  input.available());	  throw    new    IOException(   "invalid    header       "    +    input.available());    	compilable	  [FE]  IOException  	96	1	replace
417	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  header: "  +  input.available());	  throw    new    IOException(   "invalid    header       "    +    input.available());    	compilable	  [FE]  IOException  	96	1	replace
418	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.available());  [FE]  IOException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  header: "  +  input.available());	  throw    new    IOException(   "invalid    header       "    +    input.available());    	compilable	  [FE]  IOException  	96	1	replace
419	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "invalid  header: "  +  input.available());	  throw    new    IOException(   "invalid    header       "    +    input.available());    	compilable	  [FE]  IOException  	96	1	replace
420	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.available());  [FE]  IOException  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header: "  +  input.available());	  throw    new    IOException(   "invalid    header       "    +    input.available());    	compilable	  [FE]  IOException  	96	1	replace
421	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.length);  [CE]  cannot  find  symbol  length  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.length);	  throw    new    IOException(   "invalid    header       "    +    input.available());    	non-compiled	[CE]  cannot  find  symbol  length	96	None	replace
422	[BUG]  [BUGGY]  ger.log( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  ger  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ger.log( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	ger.log( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.log(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  ger	68	None	replace
423	[BUG]  [BUGGY]  Throwables.log( "Invalid  input: "  +  output.toString());  [CE]  cannot  find  symbol  output  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Invalid  input: "  +  output.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Invalid  input: "  +  output.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.log(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  output	68	None	replace
424	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
425	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  >=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  >=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  >=  realized[i])  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
426	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  not  a  statement  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  not  a  statement	115	None	replace
427	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input);  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	72	None	replace
428	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getValue());  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.getValue());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	72	None	replace
429	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Unexpected  input: "  +  input);  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Unexpected  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Unexpected  input: "  +  input);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	72	None	replace
430	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	72	None	replace
431	[BUG]  [BUGGY]  Throwables.throw  new  IOException( " ");  [CE]  <identifier>  expected  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( " ");	  throw    new    IOException(       "       ");    Throwables.throw    new    IOException(       "       ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
432	[BUG]  [BUGGY]  Throwables.throw  new  IOException( " ".equals(input.available()));  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( " ".equals(input.available()));	  throw    new    IOException(       "       ");    Throwables.throw    new    IOException(       "       ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
433	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue()  + "n ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue()  + "n ");	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    read();	  	compilable	  [FE]  AssertionFailedError  	24	1	add
435	[BUG]  [BUGGY]  read();  read();  [FE]  AssertionFailedError  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    read();	  	compilable	  [FE]  AssertionFailedError  	24	1	add
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  read();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    if(input.available()  ==  0)  {  read();  }	  	compilable	  [FE]  AssertionFailedError  	24	1	add
437	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  read();  }  [FE]  AssertionFailedError  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  read();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  read();  }	  	compilable	  [FE]  AssertionFailedError  	24	1	add
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    if(input.available()  ==  0)  {  read();  }  else  {  throw  new  IOException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	24	1	add
439	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [FE]  AssertionFailedError  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  read();  }  else  {  throw  new  IOException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	24	1	add
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  >  0)  {  read();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    if(input.available()  >  0)  {  read();  }	  	compilable	  [FE]  AssertionFailedError  	24	1	add
441	[BUG]  [BUGGY]  read();  if(input.available()  >  0)  {  read();  }  [FE]  AssertionFailedError  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  >  0)  {  read();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  >  0)  {  read();  }	  	compilable	  [FE]  AssertionFailedError  	24	1	add
442	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  >  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    if(input.available()  >  0)  {  read();  }  else  {  throw  new  IOException( " ");  }	  	compilable	  [FE]  IOException  	24	1	add
443	[BUG]  [BUGGY]  read();  if(input.available()  >  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [FE]  IOException  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  >  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  >  0)  {  read();  }  else  {  throw  new  IOException( " ");  }	  	compilable	  [FE]  IOException  	24	1	add
444	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.toString());  }	  	compilable	  [FE]  IOException  	24	1	add
445	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.toString());  }  [FE]  IOException  [FE]              IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.toString());  }	  	compilable	  [FE]  IOException  	24	1	add
446	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    if(input.available()  ==  0)  {  throw  new  IOException( " ");  }	  	compilable	  [FE]  IOException  	24	1	add
447	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [FE]  IOException  [FE]                IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( " ");  }	  	compilable	  [FE]  IOException  	24	1	add
448	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.getBytes());  }  [CE]  cannot  find  symbol  [FE]                  IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.getBytes());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.getBytes());  }	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
449	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "invalid  input: "  +  input.toString());	  throw    new    IOException(   "invalid    input:   "    +    input.available());    	compilable	  [FE]  IOException  	9	1	replace
450	[BUG]  [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.toString());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  input: "  +  input.toString());	  throw    new    IOException(   "invalid    input:   "    +    input.available());    	compilable	  [FE]  IOException  	9	1	replace
451	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( "invalid  input: "  +  input.available());	  throw    new    IOException(   "invalid    input:   "    +    input.available());    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
452	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.available());  [FE]  IllegalArgumentException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  input: "  +  input.available());	  throw    new    IOException(   "invalid    input:   "    +    input.available());    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
453	[BUG]  [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  input: "  +  input.getValue());	  throw    new    IOException(   "invalid    input:   "    +    input.available());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
454	[BUG]  [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.length);  [CE]  cannot  find  symbol  length  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  input: "  +  input.length);	  throw    new    IOException(   "invalid    input:   "    +    input.available());    	non-compiled	[CE]  cannot  find  symbol  length	9	None	replace
455	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  header: "  +  input.getName());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  header: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  header: "  +  input.getName());	  Throw    new    IOException(   "invalid    header:       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	107	None	replace
456	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.toString());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header: "  +  input.toString());	  Throw    new    IOException(   "invalid    header:       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	107	None	replace
457	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getRawClass());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getRawClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header: "  +  input.getRawClass());	  Throw    new    IOException(   "invalid    header:       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	107	None	replace
458	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getPath());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header: "  +  input.getPath());	  Throw    new    IOException(   "invalid    header:       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	107	None	replace
459	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getRawName());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getRawName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header: "  +  input.getRawName());	  Throw    new    IOException(   "invalid    header:       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	107	None	replace
460	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getClass());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header: "  +  input.getClass());	  Throw    new    IOException(   "invalid    header:       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	107	None	replace
461	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalStateException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	compilable	  [FE]  IOException  	120	1	replace
462	[BUG]  [BUGGY]  new  IllegalStateException( " ");  [FE]  IOException  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalStateException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	compilable	  [FE]  IOException  	120	1	replace
463	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(input.available()));  [CE]  no  suitable  method  found  for  equals(int)  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalStateException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalStateException( " ".equals(input.available()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	120	None	replace
464	[BUG]  [BUGGY]  ||  input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ||  input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	||  input.available()  ==  0)  {  throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
465	[BUG]  [BUGGY]  ||  input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ||  input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	||  input.available()  ==  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
466	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(input.getValue()));  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalStateException( " ".equals(input.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalStateException( " ".equals(input.getValue()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
467	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.getLength();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.getLength();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.getLength();	  return(input!=    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
468	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.getBytes();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.getBytes();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.getBytes();	  return(input!=    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
469	[BUG]  [BUGGY]  return(input  >=  null)?  null  :  input.length;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  >=  null)?  null  :  input.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  >=  null)?  null  :  input.length;	  return(input!=    null)?    null    :    input.length;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	62	None	replace
470	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.read();  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.read();	  return(input!=    null)?    null    :    input.length;    	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	62	None	replace
471	[BUG]  [BUGGY]  if( "Invalid  input: "  +  input.toString());  [CE]  incompatible  types  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    if(       "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  incompatible  types	119	None	replace
472	[BUG]  [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if( "Invalid  input: "  +  input.toString())  {	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    if(       "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
473	[BUG]  [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( "invalid  input: "  +  input.toString());  }  [CE]  incompatible  types  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( "invalid  input: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( "invalid  input: "  +  input.toString());  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    if(       "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  incompatible  types	119	None	replace
474	[BUG]  [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  [CE]  incompatible  types  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( "Invalid  input: "  +  input.toString());  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    if(       "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  incompatible  types	119	None	replace
475	[BUG]  [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( " ");  }  [CE]  incompatible  types  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if( "Invalid  input: "  +  input.toString())  {  throw  new  IOException( " ");  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    if(       "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  incompatible  types	119	None	replace
476	[BUG]  [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  return;  }  [CE]  incompatible  types  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if( "Invalid  input: "  +  input.toString())  {  return;  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if( "Invalid  input: "  +  input.toString())  {  return;  }	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    if(       "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  incompatible  types	119	None	replace
477	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  throw  new  IOException( "invalid  header   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  throw  new  IOException( "invalid  header   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    throw  new  IOException( "invalid  header   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	103	None	add
478	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }	  	non-compiled	[CE]  unreachable  statement	103	None	add
479	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }	  	non-compiled	[CE]  unreachable  statement	103	None	add
480	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.toString()  ==  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  [CE]  unreachable  statement  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.toString()  ==  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    if(input.toString()  ==  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }	  	non-compiled	[CE]  unreachable  statement	103	None	add
481	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  else  {  read();  }  [CE]  unreachable  statement  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  else  {  read();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  else  {  read();  }	  	non-compiled	[CE]  unreachable  statement	103	None	add
482	[BUG]  [BUGGY]  Throw  new  IOException( " ");  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( " ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( " ");	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	non-compiled	[CE]  not  a  statement	16	None	replace
483	[BUG]  [BUGGY]  Throwable  t  =  input.read( "   ");  [CE]  no  suitable  method  found  for  read(String)  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  t  =  input.read( "   ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  t  =  input.read( "   ");	  throw    new    IOException(       "       ");    Throwable    t    =    input.read(   "       ");    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	108	None	replace
484	[BUG]  [BUGGY]  Throwable  t  =  input.read( ", ");  [CE]  no  suitable  method  found  for  read(String)  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  t  =  input.read( ", ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  t  =  input.read( ", ");	  throw    new    IOException(       "       ");    Throwable    t    =    input.read(   "       ");    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	108	None	replace
485	[BUG]  [BUGGY]  Throwable  t  =  input.read( "n ");  [CE]  no  suitable  method  found  for  read(String)  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  t  =  input.read( "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  t  =  input.read( "n ");	  throw    new    IOException(       "       ");    Throwable    t    =    input.read(   "       ");    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	108	None	replace
486	[BUG]  [BUGGY]  Throwable  t  =  input.read( "[ ");  [CE]  no  suitable  method  found  for  read(String)  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  t  =  input.read( "[ ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  t  =  input.read( "[ ");	  throw    new    IOException(       "       ");    Throwable    t    =    input.read(   "       ");    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	108	None	replace
487	[BUG]  [BUGGY]  Throwable  t  =  input.read( "  <   ");  [CE]  no  suitable  method  found  for  read(String)  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  t  =  input.read( "  <   ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  t  =  input.read( "  <   ");	  throw    new    IOException(       "       ");    Throwable    t    =    input.read(   "       ");    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	108	None	replace
488	[BUG]  [BUGGY]  Throwable  t  =  input.read( ": ");  [CE]  no  suitable  method  found  for  read(String)  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  t  =  input.read( ": ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  t  =  input.read( ": ");	  throw    new    IOException(       "       ");    Throwable    t    =    input.read(   "       ");    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	108	None	replace
489	[BUG]  [BUGGY]  Throwables.throwAsIOException( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwAsIOException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwAsIOException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.throwAsIOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	67	None	replace
490	[BUG]  [BUGGY]  ThrowAsIOException( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ThrowAsIOException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	ThrowAsIOException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.throwAsIOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
491	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(i));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(i));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(i));	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
492	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "n ");  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "n ");	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
493	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(0));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(0));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(0));	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
494	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "  bytes  may  have  side  effects  and  can't  be  removed ");  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "  bytes  may  have  side  effects  and  can't  be  removed ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "  bytes  may  have  side  effects  and  can't  be  removed ");	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
495	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "  bytes  can  not  be  deprecated. ");  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "  bytes  can  not  be  deprecated. ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes()  + "  bytes  can  not  be  deprecated. ");	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
496	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  throw  new  IOException( "invalid  input:   "  +  input.available());  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  throw  new  IOException( "invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    throw  new  IOException( "invalid  input:   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	8	None	add
497	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  input:   "  +  input.available());  }  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  input:   "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    if(input.available()  ==  0)  {  throw  new  IOException( "invalid  input:   "  +  input.available());  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
498	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throwables.warning( "invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throwables.warning( "invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    Throwables.warning( "invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	8	None	add
499	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throwables.throwables( "invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throwables.throwables( "invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    Throwables.throwables( "invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	8	None	add
500	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throwables.log( "invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]            IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throwables.log( "invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    Throwables.log( "invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	8	None	add
501	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.length);  [CE]  <identifier>  expected  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "Invalid  input: "  +  input.length);	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
502	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getLength());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getLength());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.getLength());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
503	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                  IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.length  -  1);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.length  -  1);	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
504	[BUG]  [BUGGY]  Throwables.log( "Invalid  input: "  +  input.length);  [CE]  cannot  find  symbol  length  [FE]                    IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Invalid  input: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Invalid  input: "  +  input.length);	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
505	[BUG]  [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.length);  [CE]  cannot  find  symbol  length  [FE]                      IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  input: "  +  input.length);	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  cannot  find  symbol  length	37	None	replace
506	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header   "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  header   "  +  input.getBytes());	  throw    new    IOException(   "invalid    header       "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
507	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header   "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header   "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header   "  +  input.getBytes());	  throw    new    IOException(   "invalid    header       "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	106	None	replace
508	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header: "  +  input.getBytes());	  throw    new    IOException(   "invalid    header       "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
509	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  header: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  header: "  +  input.getBytes());	  throw    new    IOException(   "invalid    header       "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
510	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header   "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header   "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header   "  +  input.getBytes());	  throw    new    IOException(   "invalid    header       "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	106	None	replace
511	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
512	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName()  [CE]  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName()  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName()	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  	114	None	replace
513	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName  [CE]  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  	114	None	replace
514	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
515	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
516	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  >=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  input.getName());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
517	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  input: "  +  input.getClass());	  throw    new    IOException(   "Invalid    input:   "    +    input.getMessage());    	compilable	  [FE]  IOException  	50	1	replace
518	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getClass());  [FE]  IOException  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getClass());	  throw    new    IOException(   "Invalid    input:   "    +    input.getMessage());    	compilable	  [FE]  IOException  	50	1	replace
519	[BUG]  [BUGGY]  throw  new  IOException( " ".equals(input.getName()));  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( " ".equals(input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( " ".equals(input.getName()));	  throw    new    IOException(       "       ");    Throwables.throw    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
520	[BUG]  [BUGGY]  throw  new  IOException( " ".equals(input.available()));  [CE]  no  suitable  method  found  for  equals(int)  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( " ".equals(input.available()));	  throw    new    IOException(       "       ");    Throwables.throw    new    IOException(       "       ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	91	None	replace
521	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  input: "  +  input);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  input: "  +  input);	  throw    new    IOException(       "       ");    Throwables.throw    new    IOException(       "       ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
522	[BUG]  [BUGGY]  Throwables.throwable( ": ");  [CE]  cannot  find  symbol  Throwables  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( ": ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( ": ");	  throw    new    IOException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	14	None	replace
523	[BUG]  [BUGGY]  Throwables.throwable( "; ");  [CE]  cannot  find  symbol  Throwables  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( "; ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( "; ");	  throw    new    IOException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	14	None	replace
524	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getLength());  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.getLength());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.getLength());	  throw    new    IOException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
525	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getText());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.getText());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
526	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  new  IllegalStateException( "Invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  new  IllegalStateException( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    new  IllegalStateException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	35	None	add
527	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
528	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getNextArEntryLoader());  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getNextArEntryLoader());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(getNextArEntryLoader());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
529	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getArEntryResource());  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getArEntryResource());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(getArEntryResource());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
530	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getArEntryResolver());  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getArEntryResolver());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(getArEntryResolver());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
531	[BUG]  [BUGGY]  new  IllegalArgumentException( " ".equals(input.getName()));  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ".equals(input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalArgumentException( " ".equals(input.getName()));	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
532	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getAbsolutePath());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getAbsolutePath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.getAbsolutePath());	  Throwables.throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
533	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getPath());  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.getPath());	  throw    new    IOException(   "invalid    header       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
534	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getValue());  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.getValue());	  throw    new    IOException(   "invalid    header       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
535	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getText());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.getText());	  throw    new    IOException(   "invalid    header       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
536	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IllegalStateException( ". ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException('   ");    	compilable	  [FE]  IllegalStateException  	94	1	replace
537	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( ". ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IllegalStateException( ". ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException('   ");    	compilable	  [FE]  IllegalStateException  	94	1	replace
538	[BUG]  [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  input: "  +  input.getBytes());	  throw    new    IOException(       "       ");    Throw    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
539	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header   "  +  input.getBytes());  [CE]  not  a  statement  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header   "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header   "  +  input.getBytes());	  throw    new    IOException(   "invalid    header       "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	106	None	replace
540	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header  [ "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header  [ "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header  [ "  +  input.getBytes());	  throw    new    IOException(   "invalid    header       "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
541	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( "invalid  input: "  +  input.available());	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(       "       ");    	compilable	  [FE]  IllegalStateException  	51	1	replace
542	[BUG]  [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.available());  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "invalid  input: "  +  input.available());	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(       "       ");    	compilable	  [FE]  IllegalStateException  	51	1	replace
543	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header  [ "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "invalid  header  [ "  +  input.available());	  throw    new    IOException(   "invalid    header       "    +    input.available());    	compilable	  [FE]  IOException  	96	1	replace
544	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header  [ "  +  input.available());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header  [ "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header  [ "  +  input.available());	  throw    new    IOException(   "invalid    header       "    +    input.available());    	compilable	  [FE]  IOException  	96	1	replace
545	[BUG]  [BUGGY]  i.close();  [CE]  cannot  find  symbol  i  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  i.close();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	i.close();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol  i	79	None	replace
546	[BUG]  [BUGGY]  accessor.close();  [CE]  cannot  find  symbol  accessor  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  accessor.close();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	accessor.close();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol  accessor	79	None	replace
547	[BUG]  [BUGGY]  Throwable  input  =  input.getValue();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  input  =  input.getValue();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  input  =  input.getValue();	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
548	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.getName()));  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " ".equals(input.getName()));	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
549	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input,  input.getBytes());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input,  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input,  input.getBytes());	  throw    new    IOException(   "Invalid    input:   "    +    input,    offset.getBytes());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
550	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.available());  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.available());	  throw    new    IOException(   "Invalid    input:   "    +    input.available());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
551	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  }	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    	compilable	  [FE]  IllegalStateException  	34	1	replace
552	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IllegalStateException( "Invalid  input: "  +  input.available());  }	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    	compilable	  [FE]  IllegalStateException  	34	1	replace
553	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getAbsolutePath());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getAbsolutePath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getAbsolutePath());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
554	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getPath());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getPath());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
555	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getText());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getText());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
556	[BUG]  [BUGGY]  Return(input!=  null)?  null  :  input.available();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Return(input!=  null)?  null  :  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Return(input!=  null)?  null  :  input.available();	  return(input!=    null)?    null    :    input.available();    	non-compiled	[CE]  not  a  statement	60	None	replace
557	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getRawClass());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getRawClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getRawClass());	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  <identifier>  expected	3	None	replace
558	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName());  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClass(getClass().getName());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
559	[BUG]  [BUGGY]  [FE]    [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	Thread.currentThread().interrupt();	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]    	26	1	replace
560	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [FE]    [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().interrupt();	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]    	26	1	replace
561	[BUG]  [BUGGY]  InputStream  input  =  input.available();  [CE]  incompatible  types  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  InputStream  input  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	InputStream  input  =  input.available();	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  incompatible  types	111	None	replace
562	[BUG]  [BUGGY]  InputStream  input  =  input.getInput();  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  InputStream  input  =  input.getInput();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	InputStream  input  =  input.getInput();	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
563	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  int  expectedLength  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	int  expectedLength  =  input.available();	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	111	1	replace
564	[BUG]  [BUGGY]  int  expectedLength  =  input.available();  [FE]  IOException  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  int  expectedLength  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	int  expectedLength  =  input.available();	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	compilable	  [FE]  IOException  	111	1	replace
565	[BUG]  [BUGGY]  initFilemode(input.available());  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  initFilemode(input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	initFilemode(input.available());	          filemode    =    input.available();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
566	[BUG]  [BUGGY]  Reader.log( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Reader  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Reader.log( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Reader.log( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.log(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Reader	68	None	replace
567	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(new  ArArchiveEntryLoader());  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(new  ArArchiveEntryLoader());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().setContextClassLoader(new  ArArchiveEntryLoader());	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
568	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throw  new  IOException(   "Invalid  input:   "  +  input.available());  [CE]  not  a  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throw  new  IOException(   "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.available());    Throw  new  IOException(   "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  not  a  statement	6	None	add
569	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.throw  new  IOException( "Invalid  input:   "  +  input.available());  [CE]  <identifier>  expected  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.throw  new  IOException( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.available());    Throwables.throw  new  IOException( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  <identifier>  expected	6	None	add
570	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throw  new  IOException( "invalid  input:   "  +  input.available());  [CE]  not  a  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throw  new  IOException( "invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    Throw  new  IOException( "invalid  input:   "  +  input.available());	  	non-compiled	[CE]  not  a  statement	8	None	add
571	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throwables.throw  new  IOException( "invalid  input:   "  +  input.available());  [CE]  <identifier>  expected  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  Throwables.throw  new  IOException( "invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    Throwables.throw  new  IOException( "invalid  input:   "  +  input.available());	  	non-compiled	[CE]  <identifier>  expected	8	None	add
572	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  throw  new  IOException( ",invalid  input:   "  +  input.available());  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  throw  new  IOException( ",invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    throw  new  IOException( ",invalid  input:   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	8	None	add
573	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalArgumentException( " "  +  input.available());	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	compilable	  [FE]  IllegalArgumentException  	39	1	replace
574	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.available());  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " "  +  input.available());	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	compilable	  [FE]  IllegalArgumentException  	39	1	replace
575	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getPath());  [CE]  <identifier>  expected  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getPath());	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
576	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString(),  expected);  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString(),  expected);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.toString(),  expected);	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
577	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes(offset));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getBytes(offset));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getBytes(offset));	  Throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	93	None	replace
578	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header   "  +  input.getName());  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header   "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header   "  +  input.getName());	  throw    new    IOException(   "invalid    header       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	105	None	replace
579	[BUG]  [BUGGY]  Throwables.warning( "invalid  input: "  +  input);  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "invalid  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "invalid  input: "  +  input);	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
580	[BUG]  [BUGGY]  Throwables.warning( "Invalid  input: "  +  input);  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  input: "  +  input);	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
581	[BUG]  [BUGGY]  Throwables.warning( "msg.bad.input.available ");  [CE]  cannot  find  symbol  Throwables  [FE]                  IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "msg.bad.input.available ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "msg.bad.input.available ");	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
582	[BUG]  [BUGGY]  Throwables.warning( "invalid  input: ");  [CE]  cannot  find  symbol  Throwables  [FE]                    IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "invalid  input: ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "invalid  input: ");	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
583	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getName());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
584	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getText());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getText());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
585	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.getPath();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.getPath();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.getPath();	  return(input!=    null)?    null    :    input.toString();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
586	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(i);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(i);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(i);	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
587	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(input.available()));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes(input.available()));	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
588	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getPath());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.getPath());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
589	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.length  +  1;  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.length  +  1;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.length  +  1;	  return(input    ==    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol  length	65	None	replace
590	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.read;  [CE]  cannot  find  symbol  read  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.read;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.read;	  return(input    ==    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol  read	65	None	replace
591	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.getPath();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.getPath();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.getPath();	  return(input    ==    null)?    null    :    input.toString();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
592	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.toString()  + "n ";  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.toString()  + "n ";  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.toString()  + "n ";	  return(input    ==    null)?    null    :    input.toString();    	non-compiled	[CE]  incompatible  types	82	None	replace
593	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Invalid  input:   "  +  input.getBytes());  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( "Invalid  input:   "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalStateException( "Invalid  input:   "  +  input.getBytes());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	32	None	replace
594	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Unexpected  input: "  +  input.available());  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Unexpected  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Unexpected  input: "  +  input.available());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
595	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Unexpected  input: "  +  input.getBytes());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
596	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throwables.throw  new  IOException( "invalid  header   "  +  input.available());  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throwables.throw  new  IOException( "invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    Throwables.throw  new  IOException( "invalid  header   "  +  input.available());	  	non-compiled	[CE]  <identifier>  expected	95	None	add
597	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throw  new  IOException( "invalid  header   "  +  input.available());  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  Throw  new  IOException( "invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    Throw  new  IOException( "invalid  header   "  +  input.available());	  	non-compiled	[CE]  not  a  statement	95	None	add
598	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  throw  new  IOException( ",invalid  header   "  +  input.available());  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  throw  new  IOException( ",invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    throw  new  IOException( ",invalid  header   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	95	None	add
599	[BUG]  [BUGGY]  Return(input  ==  null)?  null  :  input.available();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Return(input  ==  null)?  null  :  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Return(input  ==  null)?  null  :  input.available();	  return(input    ==    null)?    null    :    input.available();    	non-compiled	[CE]  not  a  statement	63	None	replace
600	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  new  IllegalStateException( "invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  new  IllegalStateException( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    new  IllegalStateException( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	100	None	add
601	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  if(invalid  input:   "  +  input.toString());  [CE]  [FE]      IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  if(invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    if(invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  	100	None	add
602	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  error( "invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  error( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    error( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
603	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getText());  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header: "  +  input.getText());	  throw    new    IOException(   "invalid    header:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
604	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getText());  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getText());	  throw    new    IOException(   "Invalid    input:   "    +    input.getText());    	non-compiled	[CE]  not  a  statement	89	None	replace
605	[BUG]  [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  input: "  +  input.getName());	  throw    new    IOException(       "       ");    throw    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
606	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input,  input.getValue()));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input,  input.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input,  input.getValue()));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getValue()));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
607	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.toString()));  [CE]  cannot  find  symbol  Throwables  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.toString()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.toString()));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getValue()));    	non-compiled	[CE]  cannot  find  symbol  Throwables	4	None	replace
608	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getText()));  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getText()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getText()));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getValue()));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
609	[BUG]  [BUGGY]  pInput  =  input.read();  offset  +=  input.length;  [CE]  cannot  find  symbol  pInput  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  pInput  =  input.read();  offset  +=  input.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	pInput  =  input.read();  offset  +=  input.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol  pInput	80	None	replace
610	[BUG]  [BUGGY]  File  filemode  =  input.read();  offset  +=  filemode.length;  [CE]  cannot  find  symbol  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  File  filemode  =  input.read();  offset  +=  filemode.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	File  filemode  =  input.read();  offset  +=  filemode.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
611	[BUG]  [BUGGY]  input  =  input.read();  offset  +=  input.length;  [CE]  cannot  assign  a  value  to  final  variable  input  [FE]                        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  input  =  input.read();  offset  +=  input.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	input  =  input.read();  offset  +=  input.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  input	80	None	replace
612	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.getRawValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.getRawValue();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.getRawValue();	  return(input!=    null)?    null    :    input.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
613	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input,  input.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input,  input.getValue();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input,  input.getValue();	  return(input!=    null)?    null    :    input.getValue();    	non-compiled	[CE]  ';'  expected	64	None	replace
614	[BUG]  [BUGGY]  Throwables.showError( "null ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.showError( "null ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.showError( "null ");	  throw    new    IllegalArgumentException(       "       ");    Throwables.showError(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	45	None	replace
615	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(input.available()));  [CE]  no  suitable  method  found  for  equals(int)  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  cause  =  new  IllegalArgumentException( " ".equals(input.available()));	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(int)	85	None	replace
616	[BUG]  [BUGGY]  new  IOException( " ".equals(input.getText()));  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( " ".equals(input.getText()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IOException( " ".equals(input.getText()));	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
617	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "' ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "' ");	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	compilable	  [FE]  IOException  	92	1	replace
618	[BUG]  [BUGGY]  throw  new  IOException( "' ");  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "' ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "' ");	  throw    new    IOException(       "       ");    throw    new    IOException('       ");    	compilable	  [FE]  IOException  	92	1	replace
619	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  Throw  new  IOException( "invalid  header:   "  +  input.toString());  [CE]  not  a  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  Throw  new  IOException( "invalid  header:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    Throw  new  IOException( "invalid  header:   "  +  input.toString());	  	non-compiled	[CE]  not  a  statement	22	None	add
620	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  Throwables.throw  new  IOException( "invalid  header:   "  +  input.toString());  [CE]  <identifier>  expected  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  Throwables.throw  new  IOException( "invalid  header:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    Throwables.throw  new  IOException( "invalid  header:   "  +  input.toString());	  	non-compiled	[CE]  <identifier>  expected	22	None	add
621	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  new  IOException( "invalid  header:   "  +  input.toString());  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  new  IOException( "invalid  header:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    new  IOException( "invalid  header:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	22	None	add
622	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  if(   "invalid  header:   "  +  input.toString());  [CE]  incompatible  types  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  if(   "invalid  header:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    if(   "invalid  header:   "  +  input.toString());	  	non-compiled	[CE]  incompatible  types	22	None	add
623	[BUG]  [BUGGY]  String  t  =  input.read();  [CE]  incompatible  types  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  String  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	String  t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  incompatible  types	109	None	replace
624	[BUG]  [BUGGY]  throw  new  IOException( " ");  InputStream  input  =  input.read();  [CE]  incompatible  types  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( " ");  InputStream  input  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( " ");  InputStream  input  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  incompatible  types	109	None	replace
625	[BUG]  [BUGGY]  t  =  input.read();  [CE]  cannot  find  symbol  t  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  t	109	None	replace
626	[BUG]  [BUGGY]  throw  new  IOException( " "  +  InputStream.toString(input));  [CE]  method  toString  in  class  Object  cannot  be  applied  to  given  types;  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( " "  +  InputStream.toString(input));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( " "  +  InputStream.toString(input));	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  method  toString  in  class  Object  cannot  be  applied  to  given  types;	109	None	replace
627	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( ", ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	if(input.available()  ==  0)  {  throw  new  IllegalStateException( ", ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	55	1	replace
628	[BUG]  [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( ", ");  }  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  if(input.available()  ==  0)  {  throw  new  IllegalStateException( ", ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	if(input.available()  ==  0)  {  throw  new  IllegalStateException( ", ");  }	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   ",       ");    	compilable	  [FE]  IllegalStateException  	55	1	replace
629	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.getKey()));  [CE]  <identifier>  expected  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.getKey()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(input.getKey()));	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  <identifier>  expected	53	None	replace
630	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.length  +  1;  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.length  +  1;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.length  +  1;	  return(input!=    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol  length	62	None	replace
631	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.read;  [CE]  cannot  find  symbol  read  [FE]                  AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.read;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.read;	  return(input!=    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol  read	62	None	replace
632	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.array;  [CE]  cannot  find  symbol  array  [FE]                    AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.array;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.array;	  return(input!=    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol  array	62	None	replace
633	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(i),  input.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(i),  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(i),  input.length);	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
634	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  offset);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  offset);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  offset);	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
635	[BUG]  [BUGGY]  Throwables.warning( "Invalid  input: ",  +  input.toString());  [CE]  bad  operand  type  String  for  unary  operator  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  input: ",  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  input: ",  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.warning(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  bad  operand  type  String  for  unary  operator  	70	None	replace
636	[BUG]  [BUGGY]  JSError.throwAsIOException( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  JSError  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  JSError.throwAsIOException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	JSError.throwAsIOException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.throwAsIOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  JSError	67	None	replace
637	[BUG]  [BUGGY]  Reader.throwAsIOException( "Invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Reader  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Reader.throwAsIOException( "Invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Reader.throwAsIOException( "Invalid  input: "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.throwAsIOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Reader	67	None	replace
638	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  if(invalid  input:   "  +  input.toString())  {  throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  if(invalid  input:   "  +  input.toString())  {  throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    if(invalid  input:   "  +  input.toString())  {  throw  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  }	  	non-compiled	[CE]  	116	None	add
639	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "] ");  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "] ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "] ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    input.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
640	[BUG]  [BUGGY]  ArEntry  input  =  input.getArEntry();  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  ArEntry  input  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	ArEntry  input  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
641	[BUG]  [BUGGY]  PERSIZE  =  input.getArEntry();  [CE]  cannot  find  symbol  PERSIZE  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  PERSIZE  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	PERSIZE  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  PERSIZE	75	None	replace
642	[BUG]  [BUGGY]  entry  =  input.getArEntry();  [CE]  cannot  find  symbol  entry  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  entry  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	entry  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol  entry	75	None	replace
643	[BUG]  [BUGGY]  IllegalArgumentException  t  =  input.read();  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException  t  =  input.read();	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  incompatible  types	98	None	replace
644	[BUG]  [BUGGY]  IllegalArgumentException( " ");  if(t  =  input.read())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ");  if(t  =  input.read())  {  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ");  if(t  =  input.read())  {	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
645	[BUG]  [BUGGY]  IllegalArgumentException( " ");  if(t  =  input.read();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ");  if(t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ");  if(t  =  input.read();	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  	98	None	replace
646	[BUG]  [BUGGY]  IllegalArgumentException( " ")  t  =  input.read();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ")  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ")  t  =  input.read();	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  	98	None	replace
647	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
648	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
649	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
650	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
651	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  [Delete]  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  [Delete]  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  [Delete]  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  	122	None	replace
652	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  1)  {  throw  new  IOException( "Invalid  header   "  +  input.getName());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
653	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getText());  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getText());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  input: "  +  input.getText());	  throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
654	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getName());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "invalid  input: "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( "invalid  input: "  +  input.getName());	  throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
655	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "invalid  input:   "  +  input.getBytes());  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( "invalid  input:   "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalStateException( "invalid  input:   "  +  input.getBytes());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	99	None	replace
656	[BUG]  [BUGGY]  this.filemode  =  input.read();  [CE]  cannot  find  symbol  filemode  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  this.filemode  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	this.filemode  =  input.read();	          filemode    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  filemode	74	None	replace
657	[BUG]  [BUGGY]  filemode  =  input.read(false);  [CE]  cannot  find  symbol  filemode  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(false);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(false);	          filemode    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  filemode	74	None	replace
658	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.getAbsolutePath());  }  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.getAbsolutePath());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header: "  +  input.getAbsolutePath());  }	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
659	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header "  +  new  String(input.available()));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header "  +  new  String(input.available()));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header "  +  new  String(input.available()));  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	24	None	add
660	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  new  String(input.available()));  }  [CE]  no  suitable  constructor  found  for  String(int)  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  new  String(input.available()));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  new  String(input.available()));  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(int)	24	None	add
661	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.available());  }	  	compilable	  [FE]  IOException  	24	1	add
662	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.available());  }  [FE]  IOException  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.available());  }	  	compilable	  [FE]  IOException  	24	1	add
663	[BUG]  [BUGGY]  PInput  input  =  input.read();  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  PInput  input  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	PInput  input  =  input.read();	          pInput    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
664	[BUG]  [BUGGY]  PomInput  input  =  input.read();  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  PomInput  input  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	PomInput  input  =  input.read();	          pInput    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
665	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  Throwables.throw  new  IOException( "invalid  header   "  +  input.toString());  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  Throwables.throw  new  IOException( "invalid  header   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    Throwables.throw  new  IOException( "invalid  header   "  +  input.toString());	  	non-compiled	[CE]  <identifier>  expected	103	None	add
666	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  Throw  new  IOException( "invalid  header   "  +  input.toString());  [CE]  not  a  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  Throw  new  IOException( "invalid  header   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    Throw  new  IOException( "invalid  header   "  +  input.toString());	  	non-compiled	[CE]  not  a  statement	103	None	add
667	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  Throwables.log( "invalid  header   "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  Throwables.log( "invalid  header   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    Throwables.log( "invalid  header   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	103	None	add
668	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  throw  new  IOException( ",invalid  header   "  +  input.toString());  [CE]  unreachable  statement  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  throw  new  IOException( ",invalid  header   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    throw  new  IOException( ",invalid  header   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	103	None	add
669	[BUG]  [BUGGY]  Throwables.log( "Invalid  input:  {  0  }   ");  [CE]  cannot  find  symbol  Throwables  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.log( "Invalid  input:  {  0  }   ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.log( "Invalid  input:  {  0  }   ");	  throw    new    IOException(       "       ");    Throwables.log(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	17	None	replace
670	[BUG]  [BUGGY]  String  input:   "  +  input.toString());  [CE]  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  String  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	String  input:   "  +  input.toString());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    if(       "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  	119	None	replace
671	[BUG]  [BUGGY]  filemode  =  input.read(new  String(filemode));  [CE]  cannot  find  symbol  filemode  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(new  String(filemode));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(new  String(filemode));	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
672	[BUG]  [BUGGY]  filemode  =  input.read(buffer);  [CE]  cannot  find  symbol  filemode  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(buffer);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(buffer);	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
673	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.getValue()));  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.getValue()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(input.getValue()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	72	None	replace
674	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "n ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
675	[BUG]  [BUGGY]  System.err.println( "n ");  [FE]  IOException  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "n ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "n ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
676	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unable  to  access  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unable  to  access  input: "  +  input);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
677	[BUG]  [BUGGY]  System.err.println( "Unable  to  access  input: "  +  input);  [FE]  IOException  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unable  to  access  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unable  to  access  input: "  +  input);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
678	[BUG]  [BUGGY]  Logger.log(Level.WARNING, "Unreachable: "  +  input.available());  [CE]  cannot  find  symbol  Level  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Logger.log(Level.WARNING, "Unreachable: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Logger.log(Level.WARNING, "Unreachable: "  +  input.available());	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Level	121	None	replace
679	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unable  to  read  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unable  to  read  input: "  +  input);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
680	[BUG]  [BUGGY]  System.err.println( "Unable  to  read  input: "  +  input);  [FE]  IOException  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unable  to  read  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unable  to  read  input: "  +  input);	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
681	[BUG]  [BUGGY]  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
682	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	40	None	replace
683	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  new  IllegalStateException( "Invalid  input:   "  +  input.available());  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  new  IllegalStateException( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    new  IllegalStateException( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	33	None	add
684	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input);  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "invalid  input: "  +  input);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
685	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.getKey()));  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(input.getKey()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(input.getKey()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	38	None	replace
686	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalStateException( "Input  error: "  +  input.getBytes());	  throw    new    IllegalStateException(   "Input    error:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	73	None	replace
687	[BUG]  [BUGGY]  new  IllegalStateException( "Input  error:   "  +  input.getBytes());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalStateException( "Input  error:   "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalStateException( "Input  error:   "  +  input.getBytes());	  throw    new    IllegalStateException(   "Input    error:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
688	[BUG]  [BUGGY]  init();  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  init();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	init();	  read();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
689	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  reset();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	reset();	  read();    	compilable	  [FE]  IOException  	25	1	replace
690	[BUG]  [BUGGY]  reset();  [FE]  IOException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  reset();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	reset();	  read();    	compilable	  [FE]  IOException  	25	1	replace
691	[BUG]  [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throw  new  IOException(   "Unexpected  input:   "  +  input.available());  [CE]  not  a  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throw  new  IOException(   "Unexpected  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Unexpected    input:   "    +    input.available());    Throw  new  IOException(   "Unexpected  input:   "  +  input.available());	  	non-compiled	[CE]  not  a  statement	11	None	add
692	[BUG]  [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throwables.throw  new  IOException( "Unexpected  input:   "  +  input.available());  [CE]  <identifier>  expected  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Unexpected  input:   "  +  input.available());  Throwables.throw  new  IOException( "Unexpected  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Unexpected    input:   "    +    input.available());    Throwables.throw  new  IOException( "Unexpected  input:   "  +  input.available());	  	non-compiled	[CE]  <identifier>  expected	11	None	add
693	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.available());  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.available());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throw    new    IOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  not  a  statement	69	None	replace
694	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "  bounds: "  +  input.getBytes());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "  bounds: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  input: "  +  input.getBytes()  + "  bounds: "  +  input.getBytes());	  Throwables.throw    new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	56	None	replace
695	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  new  IOException( "invalid  input:   "  +  input.available());  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  input:   "  +  input.available());  new  IOException( "invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    input:   "    +    input.available());    new  IOException( "invalid  input:   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	8	None	add
696	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Unexpected  input: "  +  input.getClass());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	compilable	  [FE]  IOException  	12	1	replace
697	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getClass());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Unexpected  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Unexpected  input: "  +  input.getClass());	  throw    new    IOException(   "Unexpected    input:   "    +    input.available());    	compilable	  [FE]  IOException  	12	1	replace
698	[BUG]  [BUGGY]  return(input  ==  null)?  null  :  input.available;  [CE]  cannot  find  symbol  available  [FE]                      AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input  ==  null)?  null  :  input.available;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input  ==  null)?  null  :  input.available;	  return(input    ==    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol  available	65	None	replace
699	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getValue());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getValue());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
700	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getKey());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  header: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  header: "  +  input.getKey());	  Throwables.throw    new    IOException(   "invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
701	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  error( "Invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.available());  error( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    error( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
702	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.getBytes()));  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.getBytes()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " ".equals(input.getBytes()));	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
703	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  expected);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  expected);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(),  expected);	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
704	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(input.available()));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(input.available()));	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
705	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(input.length));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(input.length));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getBytes(input.length));	  Throwables.throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
706	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(input.toString()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(input.toString()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  cause  =  new  IllegalArgumentException( " ".equals(input.toString()));	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	85	None	replace
707	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  else  {  read();  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  else  {  read();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    if(input.toString()!=  null)  {  throw  new  IOException( "invalid  header   "  +  input.toString());  }  else  {  read();  }	  	non-compiled	[CE]  unreachable  statement	103	None	add
708	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  new  IOException( "invalid  header   "  +  input.toString());  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.toString());  new  IOException( "invalid  header   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.toString());    new  IOException( "invalid  header   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	103	None	add
709	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "invalid  input:   "  +  input.getName());  [CE]  not  a  statement  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( "invalid  input:   "  +  input.getName());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalStateException( "invalid  input:   "  +  input.getName());	  throw    new    IllegalStateException(   "invalid    input:   "    +    input.getName());    	non-compiled	[CE]  not  a  statement	102	None	replace
710	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(input.getName()));  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalStateException( " ".equals(input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalStateException( " ".equals(input.getName()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
711	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(input.getBytes()));  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalStateException( " ".equals(input.getBytes()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalStateException( " ".equals(input.getBytes()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
712	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.toString()));  [CE]  <identifier>  expected  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(input.toString()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(input.toString()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	72	None	replace
713	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input);  [CE]  <identifier>  expected  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IllegalStateException( "invalid  input: "  +  input);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	72	None	replace
714	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  expected.length;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  expected.length;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  expected.length;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
715	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
716	[BUG]  [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
717	[BUG]  [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()  [CE]  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString()	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  	71	None	replace
718	[BUG]  [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
719	[BUG]  [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header  [CE]  unclosed  string  literal  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >  0)  {  throw  new  IOException( "Invalid  header	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  unclosed  string  literal	71	None	replace
720	[BUG]  [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()!=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
721	[BUG]  [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(!input.available())  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
722	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(input.getBytes()));  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(input.getBytes()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( " ".equals(input.getBytes()));	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
723	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(input.toString()));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(input.toString()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( " ".equals(input.toString()));	  throw    new    IllegalStateException(       "       ");    Throwables.throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	53	None	replace
724	[BUG]  [BUGGY]  Throwables.warning( "invalid  input: "+input.available());  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "invalid  input: "+input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "invalid  input: "+input.available());	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
725	[BUG]  [BUGGY]  Throwables.warning( "invalid  input: "  +  input.getClass());  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "invalid  input: "  +  input.getClass());	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
726	[BUG]  [BUGGY]  Throwables.warning( "invalid  input: "  +  input.toString());  [CE]  cannot  find  symbol  Throwables  [FE]                  IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "invalid  input: "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "invalid  input: "  +  input.toString());	  throw    new    IllegalStateException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	replace
727	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getValue());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "Invalid  header: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "Invalid  header: "  +  input.getValue());	  Throwables.throw    new    IOException(   "Invalid    header:   "    +    input.getName());    	non-compiled	[CE]  <identifier>  expected	21	None	replace
728	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getName()));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getName()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getName()));	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getValue()));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
729	[BUG]  [BUGGY]  Throwables.throwable( " ",  Integer.toString(input.available()));  [CE]  cannot  find  symbol  Throwables  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( " ",  Integer.toString(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( " ",  Integer.toString(input.available()));	  throw    new    IOException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	14	None	replace
730	[BUG]  [BUGGY]  Throwables.throwable( " ",  Integer.toHexString(input.available()));  [CE]  cannot  find  symbol  Throwables  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwable( " ",  Integer.toHexString(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwable( " ",  Integer.toHexString(input.available()));	  throw    new    IOException(       "       ");    Throwables.throwable(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	14	None	replace
731	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange();  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange();	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
732	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Thread.currentThread().getContextClassLoader().reset();	          if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.getName());    }    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
733	[BUG]  [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.getClass());  [CE]  cannot  find  symbol  Throwables  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "Invalid  input: "  +  input.getClass());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.warning(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	70	None	replace
734	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  ==  0)  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
735	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IllegalStateException( "Invalid  input: "  +  input.getClass());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    	compilable	  [FE]  IllegalStateException  	34	1	replace
736	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getClass());  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Invalid  input: "  +  input.getClass());	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.available());    	compilable	  [FE]  IllegalStateException  	34	1	replace
737	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalArgumentException( "Invalid  input: "  +  input.getValue());	  throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.getValue());    	non-compiled	[CE]  not  a  statement	41	None	replace
738	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.read());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  input: "  +  input.read());	  throw    new    IOException(   "Invalid    input:   "    +    input.available());    	compilable	  [FE]  IOException  	7	1	replace
739	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.read());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input: "  +  input.read());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input: "  +  input.read());	  throw    new    IOException(   "Invalid    input:   "    +    input.available());    	compilable	  [FE]  IOException  	7	1	replace
740	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.read());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "invalid  input: "  +  input.read());	  throw    new    IOException(   "invalid    input:   "    +    input.available());    	compilable	  [FE]  IOException  	9	1	replace
741	[BUG]  [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.read());  [FE]  IOException  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  input: "  +  input.read());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  input: "  +  input.read());	  throw    new    IOException(   "invalid    input:   "    +    input.available());    	compilable	  [FE]  IOException  	9	1	replace
742	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  if(input.toString()!=  null)  {  throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  }  [CE]  unreachable  statement  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "invalid  input:   "  +  input.toString());  if(input.toString()!=  null)  {  throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "invalid    input:   "    +    input.toString());    if(input.toString()!=  null)  {  throw  new  IllegalStateException( "invalid  input:   "  +  input.toString());  }	  	non-compiled	[CE]  unreachable  statement	100	None	add
743	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  InputStream.toString(input.available()));  [CE]  method  toString  in  class  Object  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  InputStream.toString(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " "  +  InputStream.toString(input.available()));	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	non-compiled	[CE]  method  toString  in  class  Object  cannot  be  applied  to  given  types;	39	None	replace
744	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  InputStream.toHexString(input.available()));  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  InputStream.toHexString(input.available()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " "  +  InputStream.toHexString(input.available()));	  throw    new    IllegalArgumentException(   "   ".equals(input.available()));    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
745	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getMessage());  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header   "  +  input.getMessage());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  input.getMessage());	  throw    new    IOException(   "invalid    header       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
746	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  if(input.available()  >  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  if(input.available()  >  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    if(input.available()  >  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }	  	non-compiled	[CE]  unreachable  statement	95	None	add
747	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  if(input.available()  >  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  else  {  read();  }  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  if(input.available()  >  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  else  {  read();  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    if(input.available()  >  0)  {  throw  new  IOException( "invalid  header   "  +  input.available());  }  else  {  read();  }	  	non-compiled	[CE]  unreachable  statement	95	None	add
748	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  new  IOException( "invalid  header   "  +  input.available());  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header     "  +  input.available());  new  IOException( "invalid  header   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header       "    +    input.available());    new  IOException( "invalid  header   "  +  input.available());	  	non-compiled	[CE]  unreachable  statement	95	None	add
749	[BUG]  [BUGGY]  Throwables.showError( "Invalid  input: "  +  input.getClass());  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.showError( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.showError( "Invalid  input: "  +  input.getClass());	  throw    new    IllegalArgumentException(       "       ");    Throwables.showError(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	45	None	replace
750	[BUG]  [BUGGY]  new  IOException( " ".equals(input.toString()));  [CE]  no  suitable  constructor  found  for  IOException(boolean)  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IOException( " ".equals(input.toString()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IOException( " ".equals(input.toString()));	  throw    new    IOException(       "       ");    new    IOException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IOException(boolean)	110	None	replace
751	[BUG]  [BUGGY]  return(input!=  null)?  null  :  input.available;  [CE]  cannot  find  symbol  available  [FE]                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  return(input!=  null)?  null  :  input.available;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	return(input!=  null)?  null  :  input.available;	  return(input!=    null)?    null    :    input.length;    	non-compiled	[CE]  cannot  find  symbol  available	62	None	replace
752	[BUG]  [BUGGY]  filemode  =  input.read();  offset  +=  expected.length;  [CE]  cannot  find  symbol  filemode  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read();  offset  +=  expected.length;  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read();  offset  +=  expected.length;	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol  filemode	80	None	replace
753	[BUG]  [BUGGY]  filemode  =  input.read();  offset  +=  in.read();  [CE]  cannot  find  symbol  filemode  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read();  offset  +=  in.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read();  offset  +=  in.read();	          filemode    =    input.read();    offset    +=    input.length;    	non-compiled	[CE]  cannot  find  symbol  filemode	80	None	replace
754	[BUG]  [BUGGY]  InputStream  input  =  input.openStream();  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  InputStream  input  =  input.openStream();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	InputStream  input  =  input.openStream();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
755	[BUG]  [BUGGY]  InputStream  input  =  input.getInputStream();  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  InputStream  input  =  input.getInputStream();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	InputStream  input  =  input.getInputStream();	          pInput.close();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
756	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  new  IllegalArgumentException( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    new  IllegalArgumentException( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	116	None	add
757	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  error( "invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "invalid  input:   "  +  input.toString());  error( "invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.toString());    error( "invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
758	[BUG]  [BUGGY]  this.filemode  =  input.available();  [CE]  cannot  find  symbol  filemode  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  this.filemode  =  input.available();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	this.filemode  =  input.available();	          filemode    =    input.available();    	non-compiled	[CE]  cannot  find  symbol  filemode	78	None	replace
759	[BUG]  [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.log( "Invalid  input:   "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "Invalid  input:   "  +  input.available());  Throwables.log( "Invalid  input:   "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "Invalid    input:   "    +    input.available());    Throwables.log( "Invalid  input:   "  +  input.available());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	6	None	add
760	[BUG]  [BUGGY]  Throwables.throwAsIOException( "Invalid  input: "  +  input.getClass());  [CE]  cannot  find  symbol  Throwables  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwAsIOException( "Invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwAsIOException( "Invalid  input: "  +  input.getClass());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.throwAsIOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	67	None	replace
761	[BUG]  [BUGGY]  Throwables.throwAsIOException( "Invalid  input: "  +  input.available());  [CE]  cannot  find  symbol  Throwables  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throwAsIOException( "Invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throwAsIOException( "Invalid  input: "  +  input.available());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    Throwables.throwAsIOException(   "Invalid    input:       "    +    input.toString());    	non-compiled	[CE]  cannot  find  symbol  Throwables	67	None	replace
762	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getAbsolutePath());  }  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getAbsolutePath());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getAbsolutePath());  }	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
763	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	  	compilable	  [FE]  IOException  	24	1	add
764	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	  	compilable	  [FE]  IOException  	24	1	add
765	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  realized  [FE]        IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  	non-compiled	[CE]  cannot  find  symbol  realized	24	None	add
766	[BUG]  [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getPath());  }  [CE]  cannot  find  symbol  [FE]          IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  read();  if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getPath());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	read();    if(input.available()  ==  0)  {  throw  new  IOException( "Invalid  header   "  +  input.getPath());  }	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
767	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >=  0)  {  throw  new  IOException( "Invalid  header   "  +  input.toString());  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    ==    0)    {    throw    new    IOException(   "Invalid    header       "    +    input.toString());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
768	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.toString()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(input.toString()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalArgumentException( " ".equals(input.toString()));	  throw    new    IllegalArgumentException(       "       ");    Throwables.throw    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	43	None	replace
769	[BUG]  [BUGGY]  Entry  input  =  input.getArEntry();  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Entry  input  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Entry  input  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
770	[BUG]  [BUGGY]  File  input  =  input.getArEntry();  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  File  input  =  input.getArEntry();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	File  input  =  input.getArEntry();	          pInput    =    input.getArEntry();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
771	[BUG]  [BUGGY]  Throwables.warning( "msg.unknown.length ");  [CE]  cannot  find  symbol  Throwables  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.warning( "msg.unknown.length ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.warning( "msg.unknown.length ");	  throw    new    IOException(       "       ");    Throwables.warning(   "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	15	None	replace
772	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " "));  }  [CE]  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " "));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(input.available()  >  0)  {  throw  new  IOException( " "));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
773	[BUG]  [BUGGY]  IllegalArgumentException( " ");  if(t  =  input.read())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  IllegalArgumentException( " ");  if(t  =  input.read())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	IllegalArgumentException( " ");  if(t  =  input.read())  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
774	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable  statement ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unreachable  statement ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
775	[BUG]  [BUGGY]  System.err.println( "Unreachable  statement ");  [FE]  IOException  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unreachable  statement ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unreachable  statement ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
776	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unable  to  read  input. ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unable  to  read  input. ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
777	[BUG]  [BUGGY]  System.err.println( "Unable  to  read  input. ");  [FE]  IOException  [FE]            IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unable  to  read  input. ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unable  to  read  input. ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
778	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unable  to  access  input: ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	System.err.println( "Unable  to  access  input: ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
779	[BUG]  [BUGGY]  System.err.println( "Unable  to  access  input: ");  [FE]  IOException  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  System.err.println( "Unable  to  access  input: ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	System.err.println( "Unable  to  access  input: ");	  throw    new    IllegalStateException(       "       ");    System.err.println(   "       ");    	compilable	  [FE]  IOException  	121	1	replace
780	[BUG]  [BUGGY]  Throwable  input  =  input.read();  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwable  input  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwable  input  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
781	[BUG]  [BUGGY]  Mutable  t  =  input.read();  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Mutable  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Mutable  t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
782	[BUG]  [BUGGY]  Decoder  t  =  input.read();  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Decoder  t  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Decoder  t  =  input.read();	  throw    new    IOException(       "       ");    Throwable    t    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
783	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  error( "Invalid  input:   "  +  input.toString());  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException(   "Invalid  input:   "  +  input.toString());  error( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalStateException(   "Invalid    input:   "    +    input.toString());    error( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
784	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  input: "  +  input.available());  [CE]  <identifier>  expected  [FE]        IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  input: "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  input: "  +  input.available());	  throw    new    IOException(       "       ");    Throwables.throw    new    IOException(       "       ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
785	[BUG]  [BUGGY]  Throwables.throw  new  IOException( "invalid  input: "  +  input.getClass());  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.throw  new  IOException( "invalid  input: "  +  input.getClass());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.throw  new  IOException( "invalid  input: "  +  input.getClass());	  throw    new    IOException(       "       ");    Throwables.throw    new    IOException(       "       ");    	non-compiled	[CE]  <identifier>  expected	91	None	replace
786	[BUG]  [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getPath());  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "Invalid  input: "  +  input.getPath());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "Invalid  input: "  +  input.getPath());	  throw    new    IOException(   "Invalid    input:   "    +    input.getPath());    	non-compiled	[CE]  not  a  statement	87	None	replace
787	[BUG]  [BUGGY]  new  IllegalArgumentException( " ".equals(input.toString()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ".equals(input.toString()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalArgumentException( " ".equals(input.toString()));	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	97	None	replace
788	[BUG]  [BUGGY]  new  IllegalArgumentException( " ".equals(input.getBytes()));  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  new  IllegalArgumentException( " ".equals(input.getBytes()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	new  IllegalArgumentException( " ".equals(input.getBytes()));	  throw    new    IllegalArgumentException(       "       ");    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
789	[BUG]  [BUGGY]  filemode  =  input.read(new  File(input.getPath()));  [CE]  cannot  find  symbol  filemode  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(new  File(input.getPath()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(new  File(input.getPath()));	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
790	[BUG]  [BUGGY]  filemode  =  input.read(new  File(InputStreamReader.DEFAULT_FILE_SIZE));  [CE]  cannot  find  symbol  filemode  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(new  File(InputStreamReader.DEFAULT_FILE_SIZE));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(new  File(InputStreamReader.DEFAULT_FILE_SIZE));	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
791	[BUG]  [BUGGY]  filemode  =  input.read(new  File(InputStreamReader.DEFAULT_PREFIX));  [CE]  cannot  find  symbol  filemode  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(new  File(InputStreamReader.DEFAULT_PREFIX));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(new  File(InputStreamReader.DEFAULT_PREFIX));	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
792	[BUG]  [BUGGY]  filemode  =  input.read(new  File(InputStreamReader.DEFAULT_FILENAME));  [CE]  cannot  find  symbol  filemode  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(new  File(InputStreamReader.DEFAULT_FILENAME));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(new  File(InputStreamReader.DEFAULT_FILENAME));	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
793	[BUG]  [BUGGY]  filemode  =  input.read(new  File(input.getAbsolutePath()));  [CE]  cannot  find  symbol  filemode  [FE]                      IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  filemode  =  input.read(new  File(input.getAbsolutePath()));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	filemode  =  input.read(new  File(input.getAbsolutePath()));	          filemode    =    input.read(filemode);    	non-compiled	[CE]  cannot  find  symbol  filemode	77	None	replace
794	[BUG]  [BUGGY]  throw  new  IOException( "invalid  header   "  +  new  String(realized));  [CE]  cannot  find  symbol  realized  [FE]        IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "invalid  header   "  +  new  String(realized));  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "invalid  header   "  +  new  String(realized));	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException('   ");    	non-compiled	[CE]  cannot  find  symbol  realized	94	None	replace
795	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ",  expected: "  +  expected.length);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ",  expected: "  +  expected.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + ",  expected: "  +  expected.length);	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	58	None	replace
796	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of "  +  expected.length);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of "  +  expected.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of "  +  expected.length);	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	58	None	replace
797	[BUG]  [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of ");  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of ");  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throwables.wrap(new  IOException( "Invalid  input: "  +  input.getBytes()  + "  of ");	  Throwables.wrap(new    IOException(   "Invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  	58	None	replace
798	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input:... "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	add	throw  new  IOException( "Invalid  input:... "  +  input.available());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(       "Invalid    input:...   "    +    input.toString());    	compilable	  [FE]  IOException  	84	1	replace
799	[BUG]  [BUGGY]  throw  new  IOException( "Invalid  input:... "  +  input.available());  [FE]  IOException  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException( "Invalid  input:... "  +  input.available());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IOException( "Invalid  input:... "  +  input.available());	  throw    new    IOException(       "Invalid    input:       "    +    input.toString());    throw    new    IOException(       "Invalid    input:...   "    +    input.toString());    	compilable	  [FE]  IOException  	84	1	replace
800	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Invalid  input: "  +  input.length);  [CE]  not  a  statement  [FE]              IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalStateException( "Invalid  input: "  +  input.length);  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalStateException( "Invalid  input: "  +  input.length);	  throw    new    IllegalStateException(   "Invalid    input:   "    +    input.length);    	non-compiled	[CE]  not  a  statement	37	None	replace
801	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  input.length;  i++)  {  if(!input.available()  ==  0)  {  throw  new  IOException( " ");  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    input.length;    i++)    {    if(!input.available()    >    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
802	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]    ==    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
803	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]    ==    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
804	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
805	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
806	[BUG]  [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " "));  }  [CE]  [FE]                    IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " "));  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	while(input.available()  >  0)  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " "));  }	  if(input.available()    >    0)    {    for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	115	None	replace
807	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getValue());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getValue());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header: "  +  input.getValue());	  Throw    new    IOException(   "invalid    header:       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	107	None	replace
808	[BUG]  [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getKey());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IOException( "invalid  header: "  +  input.getKey());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IOException( "invalid  header: "  +  input.getKey());	  Throw    new    IOException(   "invalid    header:       "    +    input.getName());    	non-compiled	[CE]  not  a  statement	107	None	replace
809	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException(   "Invalid  input:   "  +  input.toString());  new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IllegalArgumentException(   "Invalid    input:   "    +    input.toString());    new  IllegalArgumentException( "Invalid  input:   "  +  input.toString());	  	non-compiled	[CE]  unreachable  statement	48	None	add
810	[BUG]  [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  if(input.toString()  ==  null)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IOException(   "invalid  header:   "  +  input.toString());  if(input.toString()  ==  null)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw    new    IOException(   "invalid    header:   "    +    input.toString());    if(input.toString()  ==  null)  {  throw  new  IOException( "invalid  header:   "  +  input.toString());  }	  	non-compiled	[CE]  unreachable  statement	22	None	add
811	[BUG]  [BUGGY]  PsiInput  input  =  input.read();  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  PsiInput  input  =  input.read();  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	PsiInput  input  =  input.read();	          pInput    =    input.read();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
812	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  Throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	Throw  new  IllegalArgumentException( "invalid  input: "  +  input.getBytes());	  throw    new    IllegalArgumentException(   "invalid    input:   "    +    input.getBytes());    	non-compiled	[CE]  not  a  statement	90	None	replace
813	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Input  error: "  +  input,  input.getBytes());  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( "Input  error: "  +  input,  input.getBytes());  [BUGGY]      }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  final  byte[]  filemode  =  new  byte[8];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	1.0	80	80	1	replace	throw  new  IllegalStateException( "Input  error: "  +  input,  input.getBytes());	  throw    new    IllegalStateException(   "Input    error:   "    +    input.getBytes());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
