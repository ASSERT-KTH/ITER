projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||expected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||expected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=expected[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=assumed[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i);for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i);for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){realized[i]=read(realized[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]==realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]!=realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]>=realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]>>realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){If(expected[i]==realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=expected[i]||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==expected[i]||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input!=null){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!read.equals(expected[i])){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==expected[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=null||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=assumed[i]||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||saved[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('n');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append(",");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('.');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('/');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i].getName());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]==realized[i]||"invalidheader"+newString(realized));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]==realized[i]||(input.available()==0)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]==realized[i]||(invalidheader"+newString(realized)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]==realized[i]||(invalidheader"+newString(realized));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]==realized[i]||(refigured[i]!=null)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(refigured[i]!=null)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(refigured[i]!=null)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(refigured[i]==null)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(realized[i]!=null)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(input.available()==0)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(input.available()==0)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read.available()==0)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read.available()==0)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(realized[i]).append('.');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('.',expected[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('.',realized[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('.'+i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i],realized[i]).append('.');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(expected[i]).append('.');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i+1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i,expected.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(read,i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i),read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(realized[i].getName());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i].getName()+1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i],realized[i].getName());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i].getName(),offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i].getName(),offset+1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(realized[i]!=expected[i]||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]>=realized[i]||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<expected.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<realized.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||unexpected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71finalbyte[]realized=ArArchiveEntry.HEADER.getBytes(i);for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(read);for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71finalbyte[]realized=ArArchiveEntry.HEADER.getBytes(i);for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(offset);for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=arArchiveEntry.HEADER.getBytes(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71finalbyte[]realized=ArArchiveEntry.HEADER.getBytes();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(realized[i]!=expected[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||"invalidheader"+newString(read));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||"invalidheader"+newString(read));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]){if(expected[i]==realized[i]||"invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]){if(expected[i]!=realized[i]||"invalidheader"+newString(read));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i],realized[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(realized[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(needed[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(refigured[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i],realized);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(expected[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<expected.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<realized.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length-1;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<unexpected.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(realized[i]).append('/');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('/',realized[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('/',expected[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('/',expected.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i],realized[i]).append('/');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(expected[i]).append('/');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71If(expected[i]==realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71If(expected[i]!=realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71finalbyte[]realized=ArArchiveEntry.HEADER.getBytes(read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i,expected);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]>=realized[i]||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realization[i]||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=implemented[i]||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=shared[i]||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input!=null){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input==null){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<expected.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input!=null){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input==null){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<realized.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input!=null){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71inti=0;i<expected.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input!=null){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||unexpected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('n',expected[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(realized[i]).append('n');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('n',expected.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i],realized[i]).append('n');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||unexpected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71finalbyte[]realized=ArArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(offset);for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(read);for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71int[]realized=ArArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(invalidheader"+newString(read)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(invalidheader"+newString(read)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read==invalidheader)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read==invalidheader)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read==null?expected[i]:read)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read==null?expected[i]:invalidheader)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(invalidheader"+newString(read));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(invalidheader"+newString(read));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read==null?expected[i]:read)){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read!=null?expected[i]:read)){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read==null?"null":read[i])){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read==null?expected[i]:read)){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]>=realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71finalbyte[]realized=ArArchiveEntry.HEADER.getBytes(offset);for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){if(!closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<expected.length;i++){if(!closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<realized.length;i++){if(!closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<read.length;i++){if(!closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.get
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.get
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getVal
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=read||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=shared[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=implemented[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i,realized);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i,realized.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i,pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i+1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=null||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==null||expected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=null||expected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==null||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==null||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){if(!read.equals(expected[i])){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!read.equals(expected[i])){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length-1;i++){if(!read.equals(expected[i])){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||expected[i]!=realized[i]){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]>=realized[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append(",n");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(realized[i]).append(",");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append(',');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append(",'");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71finalbyte[]realized=ArArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){realized[i]=read(realized[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(read);for(inti=0;i<expected.length;i++){realized[i]=read(realized[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){realized[i]=read(realized[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71finalbyte[]realized=ArArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){realized[i]=read(expected[i]);}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getValu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.get
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getValu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.get
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append(",rn");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read!=null)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read==null)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read==null)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read!=null))){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read!=null&&expected[i]!=null))){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read!=null?expected[i]:invalidheader)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i,filemode);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i,shared);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==null||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=offset||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(i+1,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=arArchiveEntry.HEADER.getBytes(i,read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]>=realized[i]||expected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||adjusted[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||shared[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read!=null)){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read==null)){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read!=null));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(read==null));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(read==null));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(needed[i]).append('.');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<read.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input!=null){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryinput=(ArArchiveEntry)read.get(i);if(input!=null){returnnu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(needed[i]).append('/');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('/'+i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('/'+read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<read.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getValu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<read.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getVal
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71inti=0;i<expected.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length+1;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<read.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(expected,i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(length);for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=arArchiveEntry.HEADER.getBytes(read);for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!closed){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!closed){thrownewIOException("Invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!closed){thrownewIOException(""));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=this.arArchiveEntry.HEADER.getBytes();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ARArchiveEntry.HEADER.getBytes(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=AriArchiveEntry.HEADER.getBytes(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=saved[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<read.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<read.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getVal
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!read.equals(expected[i])){thrownewIOException("Invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(!read.equals(expected[i])){thrownewIOException(""));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i].getName(),expected[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(realized[i]!=null)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length+read;i++){if(!closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71inti=0;i<expected.length;i++){if(!closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=null||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(expected[i]).append('n');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('-');
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append('n',read);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i],expected[i]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||saved[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=arArchiveEntry.HEADER.getBytes(read);for(inti=0;i<expected.length;i++){}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||"invalidheader"+newString(realized));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||"invalidheader"+newString(realized));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArchiveEntry(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71InputStreaminput=getNextArEntry(i,implemented);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||imagined[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=arArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]expected=ArArchiveEntry.HEADER.getBytes();for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i]).append(",expected:");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i],realized[i]).append(",");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i].getName(),realized);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(expected[i].getName());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(invalidheader"+newString(realized));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(invalidheader"+newString(realized));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(input);for(inti=0;i<expected.length;i++){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(expected.length);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==shared[i]||realized[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){if(!read.equals(expected[i])){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<expected.length;i++){if(!read.equals(expected[i])){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=1;i<expected.length;i++){if(!read.equals(expected[i])){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71inti=0;i<expected.length;i++){if(!read.equals(expected[i])){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<unexpected.length;i++){if(!read.equals(expected[i])){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(invalidheader"+newString(realized)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]==realized[i]||(invalidheader"+newString(realized)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(expected[i]!=realized[i]||(invalidheader"+newString(related)));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(realized[i]==expected[i]||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<implemented.length;i++){if(!closed){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71byte[]realized=ArArchiveEntry.HEADER.getBytes(expected);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()!=null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71if(read!=expected[i]){for(inti=0;i<expected.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=1;i<expected.length;i++){if(!read.equals(expected[i])){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71((ArArchiveEntry)read).append(filemode[i+1]);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getValue();}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71inti=0;i<expected.length;i++){ArArchiveEntryentry=(ArArchiveEntry)read.get(i);if(entry.getValue()==null){returnentry.getValu
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<realized.length;i++){if(!closed){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71for(inti=0;i<expected.length;i++){if(closed){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java71For(inti=0;i<expected.length;i++){if(!closed){thrownewIOException("invalidheader"+newString(realized));}
