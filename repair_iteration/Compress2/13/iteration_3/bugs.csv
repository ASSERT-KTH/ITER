bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(refigured[i]!=  null))  {  [CE]  cannot  find  symbol  refigured  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(refigured[i]!=  null))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(refigured[i]!=  null))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(refigured[i]!=    null))    {    	non-compiled	[CE]  cannot  find  symbol  refigured	43	None	replace
2	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(refigured[i]!=  null))  {  [CE]  cannot  find  symbol  refigured  [FE]                  IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(refigured[i]!=  null))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(refigured[i]!=  null))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(refigured[i]!=    null))    {    	non-compiled	[CE]  cannot  find  symbol  refigured	43	None	replace
3	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(refigured[i]  ==  null))  {  [CE]  cannot  find  symbol  refigured  [FE]                    IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(refigured[i]  ==  null))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(refigured[i]  ==  null))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(refigured[i]!=    null))    {    	non-compiled	[CE]  cannot  find  symbol  refigured	43	None	replace
4	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(realized[i]!=  null))  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                      IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(realized[i]!=  null))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(realized[i]!=  null))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(refigured[i]!=    null))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	43	None	replace
5	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||(input.available()  ==  0))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	add	if  (expected[i]  ==  realized[i]  ||(input.available()  ==  0))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(input.available()    ==    0))    {    	compilable	  [FE]  IOException  	40	2	replace
6	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||(input.available()  ==  0))  {  [FE]  IOException  [FE]          IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||(input.available()  ==  0))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||(input.available()  ==  0))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(input.available()    ==    0))    {    	compilable	  [FE]  IOException  	40	2	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(input.available()  ==  0))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	add	if(expected[i]!=  realized[i]  ||(input.available()  ==  0))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(input.available()    ==    0))    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
8	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(input.available()  ==  0))  {  [FE]  AssertionFailedError  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(input.available()  ==  0))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(input.available()  ==  0))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(input.available()    ==    0))    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
9	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(read.available()  ==  0))  {  [CE]  int  cannot  be  dereferenced  [FE]              IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(read.available()  ==  0))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(read.available()  ==  0))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(input.available()    ==    0))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
10	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(read.available()  ==  0))  {  [CE]  int  cannot  be  dereferenced  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(read.available()  ==  0))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(read.available()  ==  0))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(input.available()    ==    0))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
11	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]).append('.');  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]).append('.');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(realized[i]).append('.');	  ((    ArArchiveEntry)read).append(filemode[i]).append('.');    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
12	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('.',  expected[i]);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('.',  expected[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('.',  expected[i]);	  ((    ArArchiveEntry)read).append(filemode[i]).append('.');    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
13	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('.',  realized[i]);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('.',  realized[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('.',  realized[i]);	  ((    ArArchiveEntry)read).append(filemode[i]).append('.');    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
14	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('.'  +  i);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('.'  +  i);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('.'  +  i);	  ((    ArArchiveEntry)read).append(filemode[i]).append('.');    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
15	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('.');  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('.');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('.');	  ((    ArArchiveEntry)read).append(filemode[i]).append('.');    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
16	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(expected[i]).append('.');  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(expected[i]).append('.');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(expected[i]).append('.');	  ((    ArArchiveEntry)read).append(filemode[i]).append('.');    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
17	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  read);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  read);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  read);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i  +  1);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i  +  1);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  expected.length);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  expected.length);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  expected.length);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read,  i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read,  i);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read,  i);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i),  read);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i),  read);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i),  read);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    	non-compiled	[CE]  ';'  expected	5	None	replace
22	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(realized[i].getName());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(realized[i].getName());  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(realized[i].getName());	  ((    ArArchiveEntry)read).append(filemode[i].getName());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
23	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName()  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName()  +  1);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i].getName()  +  1);	  ((    ArArchiveEntry)read).append(filemode[i].getName());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
24	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i].getName());  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i].getName());  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i],  realized[i].getName());	  ((    ArArchiveEntry)read).append(filemode[i].getName());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
25	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName(),  offset);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName(),  offset);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i].getName(),  offset);	  ((    ArArchiveEntry)read).append(filemode[i].getName());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
26	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName(),  offset  +  1);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i].getName(),  offset  +  1);	  ((    ArArchiveEntry)read).append(filemode[i].getName());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
27	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]    ==    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	29	None	replace
28	[BUG]  [BUGGY]  if  (realized[i]!=  expected[i]  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (realized[i]!=  expected[i]  ||  realized[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (realized[i]!=  expected[i]  ||  realized[i]!=  null)  {	  if    (expected[i]!=    realized[i]    ||    realized[i]!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	3	None	replace
29	[BUG]  [BUGGY]  if  (expected[i]  >=  realized[i]  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  >=  realized[i]  ||  realized[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  >=  realized[i]  ||  realized[i]!=  null)  {	  if    (expected[i]!=    realized[i]    ||    realized[i]!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	3	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	21	None	replace
31	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
32	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	21	None	replace
34	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  unexpected[i]!=  null)  {  [CE]  cannot  find  symbol  unexpected  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||  unexpected[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  unexpected[i]!=  null)  {	  if    (expected[i]!=    expected[i]    ||    realized[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	17	None	replace
35	[BUG]  [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    }    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	9	None	replace
39	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes(i);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes(i);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  arArchiveEntry.HEADER.getBytes(i);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  if  (realized[i]!=  expected[i]  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (realized[i]!=  expected[i]  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (realized[i]!=  expected[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    realized[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	1	None	replace
43	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(read));  [CE]  illegal  start  of  type  [FE]        IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(read));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(read));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||       "invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
44	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||   "invalid  header "  +  new  String(read));  [CE]  illegal  start  of  type  [FE]          IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||   "invalid  header "  +  new  String(read));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||   "invalid  header "  +  new  String(read));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||       "invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
45	[BUG]  [BUGGY]  if(expected[i]!=  realized[i])  {  if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(read));  }  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i])  {  if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i])  {  if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(read));  }	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||       "invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
46	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i])  {  if(expected[i]!=  realized[i]  ||   "invalid  header "  +  new  String(read));  }  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i])  {  if(expected[i]!=  realized[i]  ||   "invalid  header "  +  new  String(read));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i])  {  if(expected[i]!=  realized[i]  ||   "invalid  header "  +  new  String(read));  }	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||       "invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
47	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i],  realized[i]);	  ((    ArArchiveEntry)read).append(filemode[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
48	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(realized[i]);	  ((    ArArchiveEntry)read).append(filemode[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
49	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(needed[i]);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(needed[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(needed[i]);	  ((    ArArchiveEntry)read).append(filemode[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
50	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(refigured[i]);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(refigured[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(refigured[i]);	  ((    ArArchiveEntry)read).append(filemode[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
51	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i],  realized);	  ((    ArArchiveEntry)read).append(filemode[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
52	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(expected[i]);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(expected[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(expected[i]);	  ((    ArArchiveEntry)read).append(filemode[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	24	None	replace
54	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  '.class'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  '.class'  expected	24	None	replace
55	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  '.class'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  '.class'  expected	24	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	24	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	24	None	replace
58	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]).append('/');  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]).append('/');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(realized[i]).append('/');	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
59	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/',  realized[i]);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/',  realized[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('/',  realized[i]);	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
60	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/',  expected[i]);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/',  expected[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('/',  expected[i]);	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
61	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/',  expected.length);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/',  expected.length);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('/',  expected.length);	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
62	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('/');  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('/');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('/');	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
63	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(expected[i]).append('/');  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(expected[i]).append('/');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(expected[i]).append('/');	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
64	[BUG]  [BUGGY]  If  (expected[i]  ==  realized[i])  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  If  (expected[i]  ==  realized[i])  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	If  (expected[i]  ==  realized[i])  {	  if    (expected[i]    ==    realized[i])    {    If    (expected[i]    ==    realized[i])    {    	non-compiled	[CE]  ';'  expected	16	None	replace
65	[BUG]  [BUGGY]  If  (expected[i]!=  realized[i])  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  If  (expected[i]!=  realized[i])  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	If  (expected[i]!=  realized[i])  {	  if    (expected[i]    ==    realized[i])    {    If    (expected[i]    ==    realized[i])    {    	non-compiled	[CE]  ';'  expected	16	None	replace
66	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(read);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(read);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  expected);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  expected);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i,  expected);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(read);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  if  (expected[i]  >=  realized[i]  ||  expected[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  >=  realized[i]  ||  expected[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  >=  realized[i]  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	30	None	replace
70	[BUG]  [BUGGY]  if  (expected[i]!=  realization[i]  ||  expected[i]  ==  null)  {  [CE]  cannot  find  symbol  realization  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realization[i]  ||  expected[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realization[i]  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  realization	30	None	replace
71	[BUG]  [BUGGY]  if  (expected[i]!=  implemented[i]  ||  expected[i]  ==  null)  {  [CE]  cannot  find  symbol  implemented  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  implemented[i]  ||  expected[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  implemented[i]  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  implemented	30	None	replace
72	[BUG]  [BUGGY]  if  (expected[i]!=  shared[i]  ||  expected[i]  ==  null)  {  [CE]  cannot  find  symbol  shared  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  shared[i]  ||  expected[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  shared[i]  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  shared	30	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    input    =(ArArchiveEntry)read.get(i);    if(input!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	22	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input  ==  null)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input  ==  null)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input  ==  null)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    input    =(ArArchiveEntry)read.get(i);    if(input!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	22	None	replace
75	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [CE]  '.class'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    input    =(ArArchiveEntry)read.get(i);    if(input!=    null)    {    return    null;    }    	non-compiled	[CE]  '.class'  expected	22	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input  ==  null)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input  ==  null)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input  ==  null)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    input    =(ArArchiveEntry)read.get(i);    if(input!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	22	None	replace
77	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [CE]  '.class'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    input    =(ArArchiveEntry)read.get(i);    if(input!=    null)    {    return    null;    }    	non-compiled	[CE]  '.class'  expected	22	None	replace
78	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    input    =(ArArchiveEntry)read.get(i);    if(input!=    null)    {    return    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	22	None	replace
79	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||  unexpected[i]!=  null)  {  [CE]  cannot  find  symbol  unexpected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||  unexpected[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||  unexpected[i]!=  null)  {	  if    (expected[i]    ==    expected[i]    ||    realized[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	19	None	replace
80	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('n',  expected[i]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('n',  expected[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('n',  expected[i]);	  ((    ArArchiveEntry)read).append(filemode[i]).append('n');    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
81	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]).append('n');  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]).append('n');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(realized[i]).append('n');	  ((    ArArchiveEntry)read).append(filemode[i]).append('n');    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
82	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('n',  expected.length);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('n',  expected.length);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('n',  expected.length);	  ((    ArArchiveEntry)read).append(filemode[i]).append('n');    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
83	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('n');  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('n');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append('n');	  ((    ArArchiveEntry)read).append(filemode[i]).append('n');    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
84	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  unexpected[i]  ==  null)  {  [CE]  cannot  find  symbol  unexpected  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||  unexpected[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  unexpected[i]  ==  null)  {	  if    (expected[i]!=    expected[i]    ||    realized[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	2	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	8	None	replace
86	[BUG]  [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	8	None	replace
87	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	8	None	replace
88	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	8	None	replace
89	[BUG]  [BUGGY]  int[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  int[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	int[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	8	None	replace
90	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(read)));  [CE]  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(read)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(read)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  	41	None	replace
91	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(read)));  [CE]  [FE]              IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(read)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(read)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  	41	None	replace
92	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  invalid  header)));  [CE]  ')'  expected  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  invalid  header)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(read  ==  invalid  header)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  ')'  expected	41	None	replace
93	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(read  ==  invalid  header)));  [CE]  ')'  expected  [FE]                  IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(read  ==  invalid  header)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(read  ==  invalid  header)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  ')'  expected	41	None	replace
94	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  read)));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  read)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  read)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
95	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  invalid  header)));  [CE]  ')'  expected  [FE]                      IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  invalid  header)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  invalid  header)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  ')'  expected	41	None	replace
96	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(read));  [CE]  [FE]              IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(read));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(read));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  	42	None	replace
97	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(read));  [CE]  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(read));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(read));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  	42	None	replace
98	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(read  ==  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
99	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(read!=  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(read!=  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(read!=  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
100	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null? "null "  :  read[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null? "null "  :  read[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(read  ==  null? "null "  :  read[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
101	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(read  ==  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(read  ==  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(read  ==  null?  expected[i]  :  read))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
102	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  >=  realized[i])  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	add	if(expected[i]  >=  realized[i])  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    >=    realized[i])    {    	compilable	  [FE]  IOException  	14	2	replace
103	[BUG]  [BUGGY]  if(expected[i]  >=  realized[i])  {  [FE]  IOException  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  >=  realized[i])  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  >=  realized[i])  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    >=    realized[i])    {    	compilable	  [FE]  IOException  	14	2	replace
104	[BUG]  [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(offset);  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	6	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	20	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	20	None	replace
107	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    return    null;    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
108	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  return  null;  }  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    return    null;    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(!closed)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(!closed)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  if(!closed)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	20	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	23	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.get  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.get  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.get	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.get  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.get  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.get	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getVal  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getVal  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getVal	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
116	[BUG]  [BUGGY]  if  (expected[i]!=  read  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  read  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  read  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    realized[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	4	None	replace
117	[BUG]  [BUGGY]  if  (expected[i]!=  shared[i]  ||  realized[i]  ==  null)  {  [CE]  cannot  find  symbol  shared  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  shared[i]  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  shared[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    realized[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  shared	4	None	replace
118	[BUG]  [BUGGY]  if  (expected[i]!=  implemented[i]  ||  realized[i]  ==  null)  {  [CE]  cannot  find  symbol  implemented  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  implemented[i]  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  implemented[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    realized[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  implemented	4	None	replace
119	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i,  realized);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArEntry(i,  realized);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i,  realized);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
120	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i,  read);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArEntry(i,  read);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i,  read);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
121	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i,  realized.length);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArEntry(i,  realized.length);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i,  realized.length);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
122	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i,  pInput);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArEntry(i,  pInput);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i,  pInput);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
123	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArEntry(i  +  1);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i  +  1);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
124	[BUG]  [BUGGY]  if  (expected[i]!=  null  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  null  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  null  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    null    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	28	None	replace
125	[BUG]  [BUGGY]  if  (expected[i]  ==  null  ||  expected[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  null  ||  expected[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  null  ||  expected[i]!=  null)  {	  if    (expected[i]!=    null    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	28	None	replace
126	[BUG]  [BUGGY]  if  (expected[i]!=  null  ||  expected[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  null  ||  expected[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  null  ||  expected[i]!=  null)  {	  if    (expected[i]!=    null    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	28	None	replace
127	[BUG]  [BUGGY]  if  (expected[i]  ==  null  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  null  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  null  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    null    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	28	None	replace
128	[BUG]  [BUGGY]  if  (expected[i]  ==  null  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  null  ||  realized[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  null  ||  realized[i]!=  null)  {	  if    (expected[i]!=    null    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	28	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	25	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	25	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length  -  1;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	25	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||  expected[i]!=  realized[i])  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	add	if  (expected[i]!=  realized[i]  ||  expected[i]!=  realized[i])  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]!=    realized[i])    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
133	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  expected[i]!=  realized[i])  {  [FE]  AssertionFailedError  [FE]          IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||  expected[i]!=  realized[i])  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  expected[i]!=  realized[i])  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]!=    realized[i])    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
134	[BUG]  [BUGGY]  if  (expected[i]  >=  realized[i]  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  >=  realized[i]  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  >=  realized[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    saved[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	31	None	replace
135	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ",n ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ",n ");  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append( ",n ");	  ((    ArArchiveEntry)read).append(filemode[i]).append(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
136	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]).append( ",   ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(realized[i]).append( ",   ");  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(realized[i]).append( ",   ");	  ((    ArArchiveEntry)read).append(filemode[i]).append(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
137	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append(',');  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append(',');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append(',');	  ((    ArArchiveEntry)read).append(filemode[i]).append(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
138	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ",' ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ",' ");  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append( ",' ");	  ((    ArArchiveEntry)read).append(filemode[i]).append(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
139	[BUG]  [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    realized[i]    =    read(realized[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
140	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    realized[i]    =    read(realized[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    realized[i]    =    read(realized[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
142	[BUG]  [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(expected[i]);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(expected[i]);  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	final  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(expected[i]);  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    realized[i]    =    read(realized[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	26	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	26	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.get  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.get  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.get	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	26	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	26	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.get  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.get  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.get	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	26	None	replace
148	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ",rn ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ",rn ");  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append( ",rn ");	  ((    ArArchiveEntry)read).append(filemode[i]).append(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
149	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read!=  null)));  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read!=  null)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||(read!=  null)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
150	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||(read  ==  null)));  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||(read  ==  null)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||(read  ==  null)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
151	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read  ==  null)));  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read  ==  null)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||(read  ==  null)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
152	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(read!=  null)))  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(read!=  null)))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(read!=  null)))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
153	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(read!=  null  &&  expected[i]!=  null)))  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(read!=  null  &&  expected[i]!=  null)))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(read!=  null  &&  expected[i]!=  null)))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
154	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read!=  null?  expected[i]  :  invalid  header)));  [CE]  ')'  expected  [FE]                      IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read!=  null?  expected[i]  :  invalid  header)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||(read!=  null?  expected[i]  :  invalid  header)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  ')'  expected	41	None	replace
155	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i,  filemode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArEntry(i,  filemode);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i,  filemode);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
156	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i,  shared);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArEntry(i,  shared);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i,  shared);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
157	[BUG]  [BUGGY]  if  (expected[i]  ==  null  ||  expected[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  null  ||  expected[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  null  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    null    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	28	None	replace
158	[BUG]  [BUGGY]  if  (expected[i]!=  offset  ||  expected[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  offset  ||  expected[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  offset  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	30	None	replace
159	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i  +  1,  read);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i  +  1,  read);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i  +  1,  read);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
160	[BUG]  [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes(i,  read);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes(i,  read);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  arArchiveEntry.HEADER.getBytes(i,  read);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
161	[BUG]  [BUGGY]  if  (expected[i]  >=  realized[i]  ||  expected[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  >=  realized[i]  ||  expected[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  >=  realized[i]  ||  expected[i]!=  null)  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    >=    realized[i])    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	14	None	replace
162	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  adjusted[i]  ==  null)  {  [CE]  cannot  find  symbol  adjusted  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||  adjusted[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  adjusted[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    saved[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  adjusted	31	None	replace
163	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  shared[i]  ==  null)  {  [CE]  cannot  find  symbol  shared  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||  shared[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  shared[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    saved[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  shared	31	None	replace
164	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(read!=  null))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(read!=  null))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(read!=  null))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
165	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(read  ==  null))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(read  ==  null))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
166	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read!=  null));  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read!=  null));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||(read!=  null));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
167	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||(read  ==  null));  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||(read  ==  null));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||(read  ==  null));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
168	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read  ==  null));  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  realized[i]  ||(read  ==  null));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||(read  ==  null));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
169	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(needed[i]).append('.');  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(needed[i]).append('.');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(needed[i]).append('.');	  ((    ArArchiveEntry)read).append(filemode[i]).append('.');    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    input    =(ArArchiveEntry)read.get(i);    if(input!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	22	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  nu  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  nu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  nu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    input    =(ArArchiveEntry)read.get(i);    if(input!=    null)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
172	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(needed[i]).append('/');  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(needed[i]).append('/');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(needed[i]).append('/');	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
173	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/'  +  i);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/'  +  i);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('/'  +  i);	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
174	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/'  +  read);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/'  +  read);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('/'  +  read);	  ((    ArArchiveEntry)read).append(filemode[i]).append('/');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	26	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	26	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getVal  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getVal  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getVal	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	26	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	26	None	replace
179	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	24	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length  +  1;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	24	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	24	None	replace
182	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected,  i);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected,  i);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected,  i);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(read);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
183	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(length);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(length);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(length);  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	6	None	replace
184	[BUG]  [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  arArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	6	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "  invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	21	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	21	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
188	[BUG]  [BUGGY]  byte[]  realized  =  this.arArchiveEntry.HEADER.getBytes();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  this.arArchiveEntry.HEADER.getBytes();  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  this.arArchiveEntry.HEADER.getBytes();	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
189	[BUG]  [BUGGY]  byte[]  realized  =  ARArchiveEntry.HEADER.getBytes(i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ARArchiveEntry.HEADER.getBytes(i);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ARArchiveEntry.HEADER.getBytes(i);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
190	[BUG]  [BUGGY]  byte[]  realized  =  AriArchiveEntry.HEADER.getBytes(i);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  AriArchiveEntry.HEADER.getBytes(i);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  AriArchiveEntry.HEADER.getBytes(i);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
191	[BUG]  [BUGGY]  if  (expected[i]!=  saved[i]  ||  realized[i]  ==  null)  {  [CE]  cannot  find  symbol  saved  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  saved[i]  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  saved[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    assumed[i]    ||    realized[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  saved	4	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	23	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getVal  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getVal  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getVal	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  ';'  expected	23	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "Invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	25	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " "));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " "));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " "));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
197	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName(),  expected[i]);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName(),  expected[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i].getName(),  expected[i]);	  ((    ArArchiveEntry)read).append(filemode[i].getName());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
198	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||(realized[i]!=  null))  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||(realized[i]!=  null))  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||(realized[i]!=  null))  {	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(refigured[i]!=    null))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	43	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(!closed)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(!closed)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length  +  read;  i++)  {  if(!closed)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	20	None	replace
200	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    return    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	20	None	replace
201	[BUG]  [BUGGY]  if  (expected[i]!=  null  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  null  ||  realized[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  null  ||  realized[i]!=  null)  {	  if    (expected[i]!=    expected[i]    ||    realized[i]!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	17	None	replace
202	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(expected[i]).append('n');  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(expected[i]).append('n');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(expected[i]).append('n');	  ((    ArArchiveEntry)read).append(filemode[i]).append('n');    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
203	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('-');  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('-');  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('-');	  ((    ArArchiveEntry)read).append(filemode[i]).append('n');    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
204	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('n',  read);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('n',  read);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('n',  read);	  ((    ArArchiveEntry)read).append(filemode[i]).append('n');    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
205	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  expected[i]);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  expected[i]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i],  expected[i]);	  ((    ArArchiveEntry)read).append(filemode[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
206	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  saved[i]!=  null)  {  [CE]  cannot  find  symbol  saved  [FE]              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||  saved[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  saved[i]!=  null)  {	  if    (expected[i]!=    expected[i]    ||    realized[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  saved	17	None	replace
207	[BUG]  [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  arArchiveEntry.HEADER.getBytes(read);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
208	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(realized));  [CE]  illegal  start  of  type  [FE]        IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(realized));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||   "invalid  header "  +  new  String(realized));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||       "invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
209	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||   "invalid  header   "  +  new  String(realized));  [CE]  illegal  start  of  type  [FE]          IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||   "invalid  header   "  +  new  String(realized));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||   "invalid  header   "  +  new  String(realized));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||       "invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
210	[BUG]  [BUGGY]  InputStream  input  =  getNextArchiveEntry(i);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArchiveEntry(i);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArchiveEntry(i);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
211	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i,  implemented);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  InputStream  input  =  getNextArEntry(i,  implemented);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i,  implemented);	  InputStream    input    =    getNextArEntry(i);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
212	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  imagined[i]  ==  null)  {  [CE]  cannot  find  symbol  imagined  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]!=  realized[i]  ||  imagined[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  imagined[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    saved[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  imagined	31	None	replace
213	[BUG]  [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  arArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  arArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	8	None	replace
214	[BUG]  [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  expected  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes();    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  expected  is  already  defined  in  method  getNextArEntry()	8	None	replace
215	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ",  expected: ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ",  expected: ");  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append( ",  expected: ");	  ((    ArArchiveEntry)read).append(filemode[i]).append(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
216	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append( ",   ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append( ",   ");  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i],  realized[i]).append( ",   ");	  ((    ArArchiveEntry)read).append(filemode[i]).append(   ",   ");    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
217	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName(),  realized);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName(),  realized);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i].getName(),  realized);	  ((    ArArchiveEntry)read).append(filemode[i].getName());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
218	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(expected[i].getName());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(expected[i].getName());  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(expected[i].getName());	  ((    ArArchiveEntry)read).append(filemode[i].getName());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
219	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(realized));  [CE]  [FE]              IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(realized));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(realized));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  	42	None	replace
220	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized));  [CE]  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized));    	non-compiled	[CE]  	42	None	replace
221	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(input);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(input);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(input);  for(int  i  =  0;  i  <  expected.length;  i++)  {	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    for(int    i    =    0;    i    <    expected.length;    i++)    {    	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	6	None	replace
222	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected.length);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected.length);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected.length);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(i);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
223	[BUG]  [BUGGY]  if  (expected[i]  ==  shared[i]  ||  realized[i]  ==  null)  {  [CE]  cannot  find  symbol  shared  [FE]                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (expected[i]  ==  shared[i]  ||  realized[i]  ==  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  shared[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]    ==    expected[i]    ||    realized[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  shared	27	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	25	None	replace
225	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	25	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  1;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	25	None	replace
227	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	25	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	25	None	replace
229	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(realized)));  [CE]  [FE]            IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(realized)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(realized)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  	41	None	replace
230	[BUG]  [BUGGY]  if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized)));  [CE]  [FE]              IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  	41	None	replace
231	[BUG]  [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(related)));  [CE]  [FE]                IOException      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(related)));  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(expected[i]!=  realized[i]  ||(invalid  header   "  +  new  String(related)));	  if    (expected[i]    ==    realized[i])    {    if    (expected[i]    ==    realized[i]    ||(invalid    header       "    +    new    String(realized)));    	non-compiled	[CE]  	41	None	replace
232	[BUG]  [BUGGY]  if  (realized[i]  ==  expected[i]  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if  (realized[i]  ==  expected[i]  ||  realized[i]!=  null)  {  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (realized[i]  ==  expected[i]  ||  realized[i]!=  null)  {	  if    (expected[i]    ==    realized[i]    ||    realized[i]!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	18	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(!closed)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                    AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(!closed)  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(!closed)  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	20	None	replace
234	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(expected);	  byte[]    realized    =    ArArchiveEntry.HEADER.getBytes(read);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
235	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [CE]  '.class'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  '.class'  expected	23	None	replace
236	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	23	None	replace
237	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()!=    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	23	None	replace
238	[BUG]  [BUGGY]  if(read!=  expected[i])  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  if(read!=  expected[i])  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if(read!=  expected[i])  {  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                              AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  1;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  1;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!read.equals(expected[i]))    {    return    null;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	24	None	replace
240	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i  +  1]);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i  +  1]);  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i  +  1]);	  ((    ArArchiveEntry)read).append(filemode[i]);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
241	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }  [CE]  '.class'  expected  [FE]                                AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  '.class'  expected	26	None	replace
242	[BUG]  [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValu	  for(int    i    =    0;    i    <    expected.length;    i++)    {    ArArchiveEntry    entry    =(ArArchiveEntry)read.get(i);    if(entry.getValue()    ==    null)    {    return    entry.getValue();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	26	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	21	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	21	None	replace
245	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(     "failed  to  read  header     ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {      [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
