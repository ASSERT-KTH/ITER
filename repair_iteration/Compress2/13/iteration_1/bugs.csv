bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IOException  [FE]    AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]  if  (expected[i]  ==  realized[i])  {  [BUGGY]  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	add	if  (expected[i]  ==  realized[i])  {	if  (expected[i]  !=  realized[i])  {  	compilable	  [FE]  IOException  	25	2	replace
2	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  [FE]  IOException  [FE]    AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]  if  (expected[i]  ==  realized[i])  {  [BUGGY]  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i])  {	if  (expected[i]  !=  realized[i])  {  	compilable	  [FE]  IOException  	25	2	replace
3	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  expected[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]  if  (expected[i]!=  realized[i]  ||  expected[i]!=  null)  {  [BUGGY]  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  expected[i]!=  null)  {	if  (expected[i]  !=  realized[i])  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	25	None	replace
4	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  expected[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]  if  (expected[i]!=  realized[i]  ||  expected[i]  ==  null)  {  [BUGGY]  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  expected[i]  ==  null)  {	if  (expected[i]  !=  realized[i])  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	25	None	replace
5	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||  expected[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]  if  (expected[i]  ==  realized[i]  ||  expected[i]!=  null)  {  [BUGGY]  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||  expected[i]!=  null)  {	if  (expected[i]  !=  realized[i])  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	25	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]    if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException( "failed  to  read  header ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]    [BUGGY]  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	  	if  (expected[i]  !=  realized[i])  {  	non-compiled	[CE]  illegal  start  of  type	25	None	replace
