bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]!=  realized[i]  ||  realized[i]  ==  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	4	None	replace
2	[BUG]  [BUGGY]  if  (expected[i]!=  expected[i]  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]!=  expected[i]  ||  realized[i]  ==  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  expected[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	4	None	replace
3	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]!=  realized[i]  ||  realized[i]!=  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  realized[i]!=  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	4	None	replace
4	[BUG]  [BUGGY]  if  (expected[i]!=  assumed[i]  ||  realized[i]  ==  null)  {  [CE]  cannot  find  symbol  assumed  [FE]                  AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]!=  assumed[i]  ||  realized[i]  ==  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  assumed[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  assumed	4	None	replace
5	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                  AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {	      	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	6	None	replace
7	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [CE]  variable  realized  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {	      	non-compiled	[CE]  variable  realized  is  already  defined  in  method  getNextArEntry()	6	None	replace
9	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(i);  for(int  i  =  0;  i  <  expected.length;  i++)  {  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes(read);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	byte[]  realized  =  ArArchiveEntry.HEADER.getBytes();  for(int  i  =  0;  i  <  expected.length;  i++)  {  realized[i]  =  read(realized[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i])  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i])  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]  ==  realized[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
13	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]!=  realized[i])  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]!=  realized[i])  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]!=  realized[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
14	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  >=  realized[i])  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  >=  realized[i])  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]  >=  realized[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
15	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  >>  realized[i])  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  >>  realized[i])  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]  >>  realized[i])  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
16	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  If  (expected[i]  ==  realized[i])  {  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  If  (expected[i]  ==  realized[i])  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    If  (expected[i]  ==  realized[i])  {	  	non-compiled	[CE]  ';'  expected	1	None	add
17	[BUG]  [BUGGY]  if  (expected[i]!=  expected[i]  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]!=  expected[i]  ||  realized[i]!=  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  expected[i]  ||  realized[i]!=  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	3	None	replace
18	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i]  ||  realized[i]!=  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||  realized[i]!=  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	3	None	replace
19	[BUG]  [BUGGY]  if  (expected[i]  ==  expected[i]  ||  realized[i]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  expected[i]  ||  realized[i]!=  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  expected[i]  ||  realized[i]!=  null)  {	  if    (expected[i]    ==    realized[i]    ||    expected[i]!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	5	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  return  null;  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	6	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                  AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	6	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  input  =(ArArchiveEntry)read.get(i);  if(input!=  null)  {  return  null;  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	6	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()!=  null)  {  return  entry.getValue();  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	6	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  return  null;  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	6	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!read.equals(expected[i]))  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	6	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }  [CE]  variable  i  is  already  defined  in  method  getNextArEntry()  [FE]                            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  ArArchiveEntry  entry  =(ArArchiveEntry)read.get(i);  if(entry.getValue()  ==  null)  {  return  entry.getValue();  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  method  getNextArEntry()	6	None	replace
27	[BUG]  [BUGGY]  if  (expected[i]  ==  expected[i]  ||  realized[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  expected[i]  ||  realized[i]  ==  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  expected[i]  ||  realized[i]  ==  null)  {	  if    (expected[i]    ==    realized[i]    ||    expected[i]!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	5	None	replace
28	[BUG]  [BUGGY]  if  (expected[i]!=  null  ||  expected[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]!=  null  ||  expected[i]  ==  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  null  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	4	None	replace
29	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i]  ||  expected[i]  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i]  ||  expected[i]  ==  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]  ==  realized[i]  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	4	None	replace
30	[BUG]  [BUGGY]  if  (expected[i]!=  assumed[i]  ||  expected[i]  ==  null)  {  [CE]  cannot  find  symbol  assumed  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]!=  assumed[i]  ||  expected[i]  ==  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  assumed[i]  ||  expected[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  assumed	4	None	replace
31	[BUG]  [BUGGY]  if  (expected[i]!=  realized[i]  ||  saved[i]  ==  null)  {  [CE]  cannot  find  symbol  saved  [FE]            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]!=  realized[i]  ||  saved[i]  ==  null)  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if  (expected[i]!=  realized[i]  ||  saved[i]  ==  null)  {	  if    (expected[i]!=    realized[i]    ||    expected[i]    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  saved	4	None	replace
32	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('n');  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('n');  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('n');	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ", ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append( ", ");  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append( ", ");	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('.');  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('.');  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('.');	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/');  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]).append('/');  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]).append('/');	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i]);  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i]);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  InputStream  input  =  getNextArEntry(i);  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	InputStream  input  =  getNextArEntry(i);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  ((  ArArchiveEntry)read).append(filemode[i].getName());  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	((  ArArchiveEntry)read).append(filemode[i].getName());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||   "invalid  header   "  +  new  String(realized));  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||   "invalid  header   "  +  new  String(realized));  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]  ==  realized[i]  ||   "invalid  header   "  +  new  String(realized));	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
40	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||(input.available()  ==  0))  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||(input.available()  ==  0))  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]  ==  realized[i]  ||(input.available()  ==  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
41	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized)));  [CE]  [FE]        IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized)));  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized)));	  	non-compiled	[CE]  	1	None	add
42	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized));  [CE]  [FE]          IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized));  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]  ==  realized[i]  ||(invalid  header   "  +  new  String(realized));	  	non-compiled	[CE]  	1	None	add
43	[BUG]  [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||(refigured[i]!=  null))  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      if  (offset  ==  0)  {  final  byte[]  expected  =  ArArchiveEntry.HEADER.getBytes();  final  byte[]  realized  =  new  byte[expected.length];  final  int  read  =  read(realized);  if  (read  !=  expected.length)  {  throw  new  IOException(   "failed  to  read  header   ");  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {    [BUGGY]  if  (expected[i]  ==  realized[i])  {  if  (expected[i]  ==  realized[i]  ||(refigured[i]!=  null))  {  [BUGGY]    throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }    if  (input.available()  ==  0)  {  return  null;  }  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	71	71	1	replace	if    (expected[i]    ==    realized[i])    {    if  (expected[i]  ==  realized[i]  ||(refigured[i]!=  null))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
