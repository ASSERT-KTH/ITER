projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){if(input==null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){If(input==null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){if(input!=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){if(input==null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){if(input==null||input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){if(input>=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){if(input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){if(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){if(input.available()>>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){If(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()==0){if(input!=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()==0){if(input==null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()==0){If(input!=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()==0){if(input>=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()==0){if(input!=null||input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()==0){if(input>>null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEnabled()||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isVersion()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()<=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){If(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){AssertionFailedErrorpInput=newAssertionFailedError(input);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){AssertionFailedErrorpInput=newAssertionFailedError(input.available()+1);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){AssertionFailedErrorpInput=newAssertionFailedError(input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextArEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getArEntryStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getArEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){if(input==null||input.available(){0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEnabled()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){AssertionFailedErrorpInput=newAssertionFailedError(input);if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){AssertionFailedErrorpIn=newAssertionFailedError(input);if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){AssertionFailedError<Integer>input=input.available();if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){InputStreaminput=input.available();if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||expected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset<0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset<0){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset<0){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=input.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||input.length>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized[i]));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.isEnabled()||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||input.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||expected.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()==0){if(input!=null||input.available(){0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()==0){if(input{null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0){if(Input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(Input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(input.available()>0)<returnnull;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){InputStreaminput=input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(pInput!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(pInput==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(pInput.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalAssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(realized[i]!=expected[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<saved.length;i++){if(expected[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(known[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]==realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<estimated.length;i++){if(expected[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(!input.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()==0||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+1);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()<0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()>1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||expected.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input>=null||input.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.length()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input==null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input==null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input==null||input.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input!=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(Input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(InputStream.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79While(offset<0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(offset<0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeGet(offset)>0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeGet(offset)<0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeGet(offset){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(offset<0){thrownewIllegalStateException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79thrownewIllegalStateException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){if(input!=null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){if(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){If(input!=null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){if(input>=null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){if(input>>null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){If(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(input.available()<=0){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(input.available()<0){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()<=0){if(input.available()>0){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(input.available()>=0){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(input.available()<0)returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()<=0){if(input.available()<0){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(input.available()>0){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(pInput.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalAssertionFailedErrorpInput=newAssertionFailedError(input.available());if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0){if(input!=null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0){if(input==null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0){if(input!=null||input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0){If(input!=null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0){if(input!=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0){if(input>=null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0){if(input!=null||input.available()>>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79While(offset<0){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(offset<0){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(offset<0){thrownewIllegalArgumentException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeGet(offset)>0){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeGet(offset){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79thrownewIllegalArgumentException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aughtExceptionHandler.throwAsIOException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.isEnabled()||input.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.isEnabled()||this.input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEnabled()||input.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.isEnabled()||input.lastModified()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEnabled()||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(pIn.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(!pIn.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(in.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(pIn!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||output.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length()==1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(pIn!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(pIn==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalAssertionFailedErrorpIn=newAssertionFailedError(input.available());if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(pIn>=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||expected.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||expected.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.length>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0){if(input==null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0){If(input==null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0){if(input==null||input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0){if(input!=null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0){if(input==null||input.available()>>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0){if(input>=null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset<0){read();}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset<0){read();}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset>0){read();}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset>=0){read();}else{thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset>0){read();}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset<0){read();}else{thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finallongoffset=input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.length()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.length()+1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=expected.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.length()-2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=this.input.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input.available()<=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input.available()>1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finallongoffset=input.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=this.input.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.readInt();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=pInput.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.read()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.read(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized[i]));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized[i]));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79For(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized[i]));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<saved.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized[i]));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(realized[i]!=expected[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<saved.length;i++){if(expected[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(known[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]==realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<estimated.length;i++){if(expected[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()<=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()<0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<realized.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<saved.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79For(inti=0;i<expected.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.equals("")){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length()<0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()<=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||expected.length>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||input.length<=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0||input.length>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||input.length>1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||offset>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||input.length>16){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(offset<0){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aughtExceptionHandler{thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeGet(offset){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(offset<0){thrownewIOException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aughtExceptionHandler.throwIOException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();if(input!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();if(input==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();if(input!=null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();if(input>=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();if(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();if(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalAssertionFailedErrorpIn=newAssertionFailedError(input.available());if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(!pIn.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextArEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getArEntryInput(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=this.getArEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<realized.length;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<saved.length;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()==0||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+1);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(this.input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.read());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.getMessage());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||offset.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()==0||offset.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()==0||expected.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||offset+expected.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0||offset.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(Input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(Input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEnabled()||this.input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEnabled()||input.lastModified()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEnabled()||input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input.available()!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length<=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.isVersion()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.getVersion()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.hasVersion()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length()<=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<realized.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<saved.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79For(inti=0;i<expected.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){if(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){If(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){if(input!=null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){if(input>=null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){if(input==null||in.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available(){0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available(){0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextArEntry(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=this.getNextArEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getReadArEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getArEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(pInput.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(!pInput.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(!pInput.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.equals("")){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.length()<0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79longoffset=input.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=pInput.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=this.input.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=input.read(pInput);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=input.readInt();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=input.read()-1;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.isEnabled()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.getType()==Token.NAME&&input.isEnabled()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length.isEnabled()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.getType()==Token.GETPROP&&input.isEnabled()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.getType()==Token.BLOCK){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.length()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()==0||input.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0||input.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()==0||input.length!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||offset==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||expected[i]==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||realized[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0||expected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0||expected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||unexpected[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getArEntryStream(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getArEntryStreamInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextArEntryStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=this.getArEntryStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){if(input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){if(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){if(input.available()>>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){if(input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){If(input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){If(input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(pInput.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(!pInput.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(input.available()<0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(!pInput.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(pInput!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=input.available();if(input!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=input.available();if(input==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79Inputinput=input.available();if(input!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=input.available();if(input!=null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=input.available();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=input.available()-0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=input.available();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalInputStreaminput=input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=input.available()/0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=input.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=this.getInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getReadInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getOutputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInputStream(i);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset,input.length);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()*offset);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);if(input!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);if(!pInput.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);if(input.available()>1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInputStream(offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInputStream(filemode);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=this.getInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getReadInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInputStream(),offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<realized.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<saved.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<implemented.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79For(inti=0;i<expected.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<offset.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<unexpected.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeToInt(offset){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeToken(offset){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeGet(offset)<0){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeGet(offset)>0){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeToInt(i){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read==0){read();}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read==0){read();}else{thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset<0){read();}else{returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(null!=input.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<offset.length;i++){if(expected[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(refigured[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){AssertionFailedError<Input>input=input.read();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(!read()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0||input.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()!=0||input.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||input.length>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(pInput==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(pInput.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||saved[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||raw[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(null!=input.length){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(pIn==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(!pIn.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(pIn.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read==0||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||output.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(null!=input.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(mpInput!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInputStream(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(!closed){thrownewIOException(""));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<read.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextArEntry().getInputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextArchiveEntry();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null){InputStreaminput=input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.available()>0){InputStreaminput=input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){InputStreaminput=input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<offset.length;i++){if(expected[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNewArEntryInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNewArEntryStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(pIninstanceofAssertionFailedError){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.available());if(!pIn.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.length.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.read(filemode);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.read(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.read(false);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.read(data);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);if(pInput!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);if(pInput==null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset,input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()+offset);if(!input.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=input.read(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=input.read(filemode);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79intoffset=input.read(false);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.length()/2;
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=pInput.length();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){AssertionFailedError<AssertionFailedError>input=input.read();if(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){AssertionFailedError<AssertionFailedError>input=input.getAr();if(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){AssertionFailedError<Input>input=input.read();if(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){AssertionFailedError<AssertionFailedError>pInput=newAssertionFailedError();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getOutput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized[i]));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(!pInput.available()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(pInput>=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.equals(InputStream.UTF8)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(null!=input.length){if(input!=null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedError<Integer>input=input.available();if(input[Delete]null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AtsertionFailedErrorpInput=newAssertionFailedError(input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(output.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AnsertionFailedErrorpInput=newAssertionFailedError(input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AnsertionFailedErrorpInput=newAnsertionFailedError(input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(InputStream.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<offset.length;i++){if(expected[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(known[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()<=0){if(input.available()>0)<returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){if(input.available()>0){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0){if(input.available()>0){returnthis;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<filemode.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(filemode[i]!=real[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(filemode[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||saved.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||selected.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||unexpected.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.enabled()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.getType()!=Token.BLOCK){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.getType()!=Token.GETPROP){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0||input.length>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||input.length<0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(expected[i]==real[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeThan<=0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeToInt(offset){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeThan<=0||offset<0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeToInt(offset)<0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>=0){if(input.available()<0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeToInt(offset){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeThan<=0){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeThan<=0||offset<0){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeToInt(input){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79safeToInt(i){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.isEnabled()||inputStream.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79[Delete]
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(i<0){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aughtException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aughtInvalidIOException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(offset<0){thrownewIOException("'");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(offset%2!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read.length()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.isEmpty()||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length==1){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(expected==null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()<0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.length()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.length>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.isEmpty()||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while(i<0){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aught(newIllegalStateException("");
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aught(newIllegalStateException(""));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aught(newIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()<0){if(input.available()>0){returnnull;}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()!=0){if(input{null||input.available()!=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(inputStream.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||imagined[i]!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=readInput();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInput().getOutputStream();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.isVersion()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||filemode.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||available.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorreturnnewAssertionFailedError(input.available());
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read<expected.length){read();}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read!=0){read();}else{thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read<expected.length){read();}else{thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(realized[i]!=realized[i]){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getInputStream(regexp);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||input.length>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()>0||input.length==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||expected.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<written.length;i++){if(!closed){thrownewIOException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.equals(InputStream.DEFAULT_INPUT)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<implemented.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<offset.length;i++){if(filemode[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79finalintoffset=input.readLine();
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input!=null||input.isEnabled()||input.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input>=null||input.isEnabled()||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read==null||input.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input);if(!pIn.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(realized[i]==expected[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<offset.length;i++){if(expected[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(refigured[i]==realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextArEntry(null);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getNextArEntry(input);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79InputStreaminput=getArEntryInput(filemode);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(!pInput.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input);if(pInput.available()>=0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available());if(!pInput.isEmpty()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(realized[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized[i]));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(refigured[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized[i]));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(refigured[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(realized[i]!=realized[i]){thrownewIOException("invalidheader"+newString(realized));}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||data.length()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||input.offset==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||expected.length.isEnabled()){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.equals(InputStream.DEFAULT_INIT_ERROR)){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(read.available()==0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79If(input==null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(realized[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(refigured[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79for(inti=0;i<expected.length;i++){if(filemode[i]!=realized[i]){thrownewIllegalStateException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.read());if(pInput!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while((offset<0)||(offset>0)){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while((offset<0)&&(offset<expected.length)){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while((offset<0)||(offset>expected.length)){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while((offset<0)&&(offset<=0)){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79while((offset<0)||(offset>filemode.length)){thrownewIllegalArgumentException("");}
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79aught(newIllegalArgumentException(""));
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input==null||input.available()>0){if(input{null||input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(input.available()!=0||input.length>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.read());if(pIn!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpIn=newAssertionFailedError(input.getMessage());if(pIn!=null){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorpInput=newAssertionFailedError(input.available()/offset);if(input.available()>0){
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79AssertionFailedErrorreturnnewAssertionFailedError(input.available()+offset);
projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java79if(InputStream.available()==0){
