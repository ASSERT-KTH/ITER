bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput!=  null)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput!=  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
2	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput  ==  null)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput  ==  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
3	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
4	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
5	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
6	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input!=  null)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input!=  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
7	[BUG]  [BUGGY]  final  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  realized  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  realized	69	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  expected[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  expected[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  expected[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	69	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  saved  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  saved	69	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	69	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	69	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  estimated  [FE]                                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  estimated	69	None	replace
14	[BUG]  [BUGGY]  if(!input.available())  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(!input.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(!input.available())  {	  if(input.available()!=    0)    {    if(input.available()    >>    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	10	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()!=  0  ||  input.available()  ==  0)  {	  if(input.available()!=    0)    {    if(input.available()    >>    0)    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
16	[BUG]  [BUGGY]  if(input.available()!=  0  ||  input.available()  ==  0)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  input.available()  ==  0)  {	  if(input.available()!=    0)    {    if(input.available()    >>    0)    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  ==  0  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  ==  0  ||  input.available()!=  0)  {	  if(input.available()!=    0)    {    if(input.available()    >>    0)    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
18	[BUG]  [BUGGY]  if(input.available()  ==  0  ||  input.available()!=  0)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  ==  0  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  ==  0  ||  input.available()!=  0)  {	  if(input.available()!=    0)    {    if(input.available()    >>    0)    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
19	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    1);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
20	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input  ==  null)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input  ==  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    1);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
21	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  <  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  <  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    1);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
22	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  1)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  1)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    1);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
23	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length()!=  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
24	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
25	[BUG]  [BUGGY]  if(input  ==  null  ||  expected.length()  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  expected.length()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  expected.length()  ==  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	21	None	replace
26	[BUG]  [BUGGY]  if(input  >=  null  ||  input.length()  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  >=  null  ||  input.length()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  >=  null  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	21	None	replace
27	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  >=  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.length()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.length()  >=  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
28	[BUG]  [BUGGY]  If(input  ==  null  ||  input.available()  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input  ==  null  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input  ==  null  ||  input.available()  ==  0)  {	  if(input    ==    null    ||    input.available()    ==    0)    {    If(input    ==    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  If(input  ==  null  ||  input.available()!=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input  ==  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input  ==  null  ||  input.available()!=  0)  {	  if(input    ==    null    ||    input.available()    ==    0)    {    If(input    ==    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
30	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input  ==  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    input.available()    ==    0)    {    If(input    ==    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
31	[BUG]  [BUGGY]  If(input!=  null  ||  input.available()  ==  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input!=  null  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input!=  null  ||  input.available()  ==  0)  {	  if(input    ==    null    ||    input.available()    ==    0)    {    If(input    ==    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
32	[BUG]  [BUGGY]  if(Input.available()  >  0)  {  [CE]  cannot  find  symbol  Input  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(Input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(Input.available()  >  0)  {	  if(input.available()    >    0)    {    if(Input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  Input	81	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >  0  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    if(Input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	81	2	replace
34	[BUG]  [BUGGY]  if(input.available()  >  0  ||  input.available()  >  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    if(Input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	81	2	replace
35	[BUG]  [BUGGY]  if(InputStream.available()  >  0)  {  [CE]  non-static  method  available()  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(InputStream.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(InputStream.available()  >  0)  {	  if(input.available()    >    0)    {    if(Input.available()    >    0)    {    	non-compiled	[CE]  non-static  method  available()  cannot  be  referenced  from  a  static  context	81	None	replace
36	[BUG]  [BUGGY]  While(offset  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  While(offset  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	While(offset  <  0)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
37	[BUG]  [BUGGY]  while(offset  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(offset  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(offset  <  0)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
38	[BUG]  [BUGGY]  safeGet(offset)>  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeGet(offset)>  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeGet(offset)>  0)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	59	None	replace
39	[BUG]  [BUGGY]  safeGet(offset)  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeGet(offset)  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeGet(offset)  <  0)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	59	None	replace
40	[BUG]  [BUGGY]  safeGet(offset)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeGet(offset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeGet(offset)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
41	[BUG]  [BUGGY]  while(offset  <  0)  {  throw  new  IllegalStateException( " ");  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(offset  <  0)  {  throw  new  IllegalStateException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(offset  <  0)  {  throw  new  IllegalStateException( " ");	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	59	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	throw  new  IllegalStateException( " ");	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
43	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  if(input!=  null  ||  input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  if(input!=  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    >    0)    {    if(input!=  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
44	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  if(input  ==  null  ||  input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  if(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    >    0)    {    if(input  ==  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
45	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  If(input!=  null  ||  input.available()  >  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  If(input!=  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    >    0)    {    If(input!=  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
46	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  if(input  >=  null  ||  input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  if(input  >=  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    >    0)    {    if(input  >=  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
47	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  if(input  >>  null  ||  input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  if(input  >>  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    >    0)    {    if(input  >>  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
48	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  If(input  ==  null  ||  input.available()  >  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  If(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    >    0)    {    If(input  ==  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
49	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(input.available()  <  =  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  <  =  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0)  {  if(input.available()  <  =  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  <  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >  0)  {  if(input.available()  <  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  AssertionFailedError  	82	2	replace
51	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(input.available()  <  0)  {  return  null;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  <  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0)  {  if(input.available()  <  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  AssertionFailedError  	82	2	replace
52	[BUG]  [BUGGY]  if(input.available()  <  =  0)  {  if(input.available()  >  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  <  =  0)  {  if(input.available()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  <  =  0)  {  if(input.available()  >  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >=  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >  0)  {  if(input.available()  >=  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  AssertionFailedError  	82	2	replace
54	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >=  0)  {  return  null;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >=  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0)  {  if(input.available()  >=  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  AssertionFailedError  	82	2	replace
55	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(input.available()  <  0)return  null;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  <  0)return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0)  {  if(input.available()  <  0)return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
56	[BUG]  [BUGGY]  if(input.available()  <  =  0)  {  if(input.available()  <  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  <  =  0)  {  if(input.available()  <  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  <  =  0)  {  if(input.available()  <  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >  0)  {  if(input.available()  >  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  AssertionFailedError  	82	2	replace
58	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  {  return  null;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0)  {  if(input.available()  >  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  AssertionFailedError  	82	2	replace
59	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
60	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
61	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  ==  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
62	[BUG]  [BUGGY]  final  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
63	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()!=    0)    {    if(input!=  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
64	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input  ==  null  ||  input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input  ==  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()!=    0)    {    if(input  ==  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
65	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()!=    0)    {    if(input!=  null  ||  input.available()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
66	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  If(input!=  null  ||  input.available()!=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  If(input!=  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()!=    0)    {    If(input!=  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
67	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()!=    0)    {    if(input!=  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
68	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input  >=  null  ||  input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input  >=  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()!=    0)    {    if(input  >=  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
69	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()  >>  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()!=    0)    {    if(input!=  null  ||  input.available()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(read()  >  0)  {	  if(input.available()    >    0)    {    if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	32	2	replace
71	[BUG]  [BUGGY]  if(read()  >  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read()  >  0)  {	  if(input.available()    >    0)    {    if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	32	2	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >  1)  {	  if(input.available()    >    0)    {    if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	32	2	replace
73	[BUG]  [BUGGY]  if(input.available()  >  1)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  1)  {	  if(input.available()    >    0)    {    if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	32	2	replace
74	[BUG]  [BUGGY]  While(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  While(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	While(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
75	[BUG]  [BUGGY]  while(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
76	[BUG]  [BUGGY]  while(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(offset  <  0)  {  throw  new  IllegalArgumentException( " ");	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	60	None	replace
77	[BUG]  [BUGGY]  safeGet(offset)>  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeGet(offset)>  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeGet(offset)>  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	60	None	replace
78	[BUG]  [BUGGY]  safeGet(offset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeGet(offset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeGet(offset)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
79	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	throw  new  IllegalArgumentException( " ");	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
80	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
81	[BUG]  [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  input.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  input.length()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.isEnabled()  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
82	[BUG]  [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  this.input.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  this.input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.isEnabled()  ||  this.input.available()  ==  0)  {	  if(input!=    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
83	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.length()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEnabled()  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
84	[BUG]  [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  input.lastModified()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  input.lastModified()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.isEnabled()  ||  input.lastModified()  ==  0)  {	  if(input!=    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
85	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEnabled()  ||  input.available()!=  0)  {	  if(input!=    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
86	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
87	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()  ==  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
88	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
89	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()  >=  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()  >=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
90	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
91	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(in.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(in.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(in.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
92	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn!=  null)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn!=  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
93	[BUG]  [BUGGY]  if(input  ==  null  ||  output.length()  ==  0)  {  [CE]  cannot  find  symbol  output  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  output.length()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  output.length()  ==  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  output	18	None	replace
94	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  1)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length()  ==  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  1)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
95	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn!=  null)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn!=  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
96	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  ==  null)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  ==  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
97	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
98	[BUG]  [BUGGY]  final  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
99	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  ==  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
100	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  >=  null)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  >=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  >=  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
101	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
102	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length!=  0)  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length!=  0)  {	  if(input!=    null    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	74	None	replace
103	[BUG]  [BUGGY]  if(input  ==  null  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  expected.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  expected.length  ==  0)  {	  if(input!=    null    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	74	None	replace
104	[BUG]  [BUGGY]  if(input!=  null  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  expected.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  expected.length  ==  0)  {	  if(input!=    null    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	74	None	replace
105	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length  >=  0)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length  >=  0)  {	  if(input!=    null    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	74	None	replace
106	[BUG]  [BUGGY]  if(input!=  null  ||  input.length  >=  0)  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.length  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.length  >=  0)  {	  if(input!=    null    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	74	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input!=  null  ||  input.available()  >=  0)  {	  if(input.available()    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	30	2	replace
108	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()  >=  0)  {	  if(input.available()    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	30	2	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input  ==  null  ||  input.available()  >=  0)  {	  if(input.available()    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	30	2	replace
110	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  >=  0)  {	  if(input.available()    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	30	2	replace
111	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  ==  null  ||  input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  ==  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()!=    0)    {    if(input  ==  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
112	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  If(input  ==  null  ||  input.available()!=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  If(input  ==  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()!=    0)    {    If(input  ==  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
113	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  ==  null  ||  input.available()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  ==  null  ||  input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()!=    0)    {    if(input  ==  null  ||  input.available()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
114	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input!=  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()!=    0)    {    if(input!=  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
115	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  ==  null  ||  input.available()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  ==  null  ||  input.available()  >>  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()!=    0)    {    if(input  ==  null  ||  input.available()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
116	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  >=  null  ||  input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  >=  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()!=    0)    {    if(input  >=  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(read()!=  0)  {	  if(input.available()!=    0)    {    if(input.available()    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
118	[BUG]  [BUGGY]  if(read()!=  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read()!=  0)  {	  if(input.available()!=    0)    {    if(input.available()    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
119	[BUG]  [BUGGY]  if(offset  <  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  <  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  <  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
120	[BUG]  [BUGGY]  if(offset  <  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  <  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  <  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
121	[BUG]  [BUGGY]  if(offset  >  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  >  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  >  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
122	[BUG]  [BUGGY]  if(offset  >=  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  >=  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  >=  0)  {  read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
123	[BUG]  [BUGGY]  if(offset  >  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  >  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  >  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
124	[BUG]  [BUGGY]  if(offset  <  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  <  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  <  0)  {  read();  }  else  {  throw  new  IOException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()!=  0  ||  input.available()!=  0)  {	  if(input.available()!=    0)    {    if(input.available()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	7	2	replace
126	[BUG]  [BUGGY]  if(input.available()!=  0  ||  input.available()!=  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  input.available()!=  0)  {	  if(input.available()!=    0)    {    if(input.available()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	7	2	replace
127	[BUG]  [BUGGY]  final  long  offset  =  input.length();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  long  offset  =  input.length();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  long  offset  =  input.length();	  final    int    offset    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
128	[BUG]  [BUGGY]  final  int  offset  =  input.length()  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.length()  -  1;  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.length()  -  1;	  final    int    offset    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
129	[BUG]  [BUGGY]  final  int  offset  =  input.length()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.length()  +  1;  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.length()  +  1;	  final    int    offset    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
130	[BUG]  [BUGGY]  final  int  offset  =  expected.length();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  expected.length();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  expected.length();	  final    int    offset    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
131	[BUG]  [BUGGY]  final  int  offset  =  input.length()  -  2;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.length()  -  2;  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.length()  -  2;	  final    int    offset    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
132	[BUG]  [BUGGY]  final  int  offset  =  this.input.length();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  this.input.length();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  this.input.length();	  final    int    offset    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
133	[BUG]  [BUGGY]  If(input.available()  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input.available()  >  0)  {	  if(input.available()    >    0)    {    If(input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
134	[BUG]  [BUGGY]  If(input.available()  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input.available()  ==  0)  {	  if(input.available()    >    0)    {    If(input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
135	[BUG]  [BUGGY]  If(input.available()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input.available()  <  =  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input.available()  <  =  0)  {	  if(input.available()    >    0)    {    If(input.available()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
136	[BUG]  [BUGGY]  If(input.available()  >  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input.available()  >  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input.available()  >  1)  {	  if(input.available()    >    0)    {    If(input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
137	[BUG]  [BUGGY]  If(input.available()!=  0)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input.available()!=  0)  {	  if(input.available()    >    0)    {    If(input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
138	[BUG]  [BUGGY]  If(input.available()  >=  0)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input.available()  >=  0)  {	  if(input.available()    >    0)    {    If(input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
139	[BUG]  [BUGGY]  final  long  offset  =  input.read();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  long  offset  =  input.read();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  long  offset  =  input.read();	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
140	[BUG]  [BUGGY]  final  int  offset  =  this.input.read();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  this.input.read();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  this.input.read();	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
141	[BUG]  [BUGGY]  final  int  offset  =  input.readInt();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.readInt();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.readInt();	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
142	[BUG]  [BUGGY]  final  int  offset  =  pInput.read();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  pInput.read();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  pInput.read();	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
143	[BUG]  [BUGGY]  final  int  offset  =  input.read()  -  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.read()  -  1;  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.read()  -  1;	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
144	[BUG]  [BUGGY]  final  int  offset  =  input.read(pInput);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.read(pInput);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.read(pInput);	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [CE]  cannot  find  symbol  realized  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized[i]));    }    	non-compiled	[CE]  cannot  find  symbol  realized	67	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized[i]));    }    	non-compiled	[CE]  cannot  find  symbol  expected	67	None	replace
147	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized[i]));    }    	non-compiled	[CE]  	67	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [CE]  cannot  find  symbol  saved  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized[i]));    }    	non-compiled	[CE]  cannot  find  symbol  saved	67	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  realized  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  realized	70	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  expected[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  expected[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  expected[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	70	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  saved  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  saved	70	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	70	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	70	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  estimated  [FE]                                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  estimated.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  estimated	70	None	replace
155	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  <  =  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()  <  =  0)  {	  if(input.available()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
156	[BUG]  [BUGGY]  [FE]  IOException  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  <  0)  {	  if(input.available()    <    =    0)    {    	compilable	  [FE]  IOException  	31	1	replace
157	[BUG]  [BUGGY]  if(input.available()  <  0)  {  [FE]  IOException  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  <  0)  {	  if(input.available()    <    =    0)    {    	compilable	  [FE]  IOException  	31	1	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  realized  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  realized	66	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  saved  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  saved.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  saved	66	None	replace
160	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	66	None	replace
161	[BUG]  [BUGGY]  [FE]  IOException  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.equals( " "))  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input  ==  null  ||  input.equals( " "))  {	  if(input    ==    null    ||    input.isEmpty())    {    	compilable	  [FE]  IOException  	23	1	replace
162	[BUG]  [BUGGY]  if(input  ==  null  ||  input.equals( " "))  {  [FE]  IOException  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.equals( " "))  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.equals( " "))  {	  if(input    ==    null    ||    input.isEmpty())    {    	compilable	  [FE]  IOException  	23	1	replace
163	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length()  <  0)  {	  if(input    ==    null    ||    input.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
164	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length()  >  0)  {	  if(input    ==    null    ||    input.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
165	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  <  =  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  <  =  0)  {	  if(input    ==    null    ||    input.available()    ==    0)    {    if(input    ==    null    ||    input.available()    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
166	[BUG]  [BUGGY]  if(input.available()  >  0  ||  expected.length  >  0)  {  [CE]  cannot  find  symbol  expected  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  expected.length  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  expected.length  >  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	64	None	replace
167	[BUG]  [BUGGY]  if(input.available()  >  0  ||  input.length  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  input.length  <  =  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  input.length  <  =  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
168	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0  ||  input.length  >  0)  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0  ||  input.length  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()  >  0  ||  input.length  >  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
169	[BUG]  [BUGGY]  if(input.available()  >  0  ||  input.length  >  1)  {  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  input.length  >  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  input.length  >  1)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  offset  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >  0  ||  offset  >  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	compilable	  [FE]  AssertionFailedError  	64	2	replace
171	[BUG]  [BUGGY]  if(input.available()  >  0  ||  offset  >  0)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  offset  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  offset  >  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	compilable	  [FE]  AssertionFailedError  	64	2	replace
172	[BUG]  [BUGGY]  if(input.available()  >  0  ||  input.length  >  16)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  input.length  >  16)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  input.length  >  16)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
173	[BUG]  [BUGGY]  while(offset  <  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(offset  <  0)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(offset  <  0)  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
174	[BUG]  [BUGGY]  aughtExceptionHandler  {  throw  new  IOException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aughtExceptionHandler  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aughtExceptionHandler  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  not  a  statement	61	None	replace
175	[BUG]  [BUGGY]  safeGet(offset)  {  throw  new  IOException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeGet(offset)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeGet(offset)  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
176	[BUG]  [BUGGY]  while(offset  <  0)  {  throw  new  IOException( " ");  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(offset  <  0)  {  throw  new  IOException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(offset  <  0)  {  throw  new  IOException( " ");	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	61	None	replace
177	[BUG]  [BUGGY]  aughtExceptionHandler.throwIOException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aughtExceptionHandler.throwIOException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aughtExceptionHandler.throwIOException( " ");	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
178	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();  if(input!=  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
179	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input  ==  null)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();  if(input  ==  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
180	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
181	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input!=  null  ||  input.available()  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input!=  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();  if(input!=  null  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
182	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input  >=  null)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input  >=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();  if(input  >=  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
183	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  ==  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
184	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input  ==  null  ||  input.available()  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();  if(input  ==  null  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
185	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
186	[BUG]  [BUGGY]  final  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
187	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(!pIn.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(!pIn.isEmpty())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(!pIn.isEmpty())  {	  if(input.available()    >    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
188	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryInput();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextArEntryInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextArEntryInput();	  InputStream    input    =    getArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
189	[BUG]  [BUGGY]  InputStream  input  =  getArEntryInput(i);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getArEntryInput(i);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getArEntryInput(i);	  InputStream    input    =    getArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
190	[BUG]  [BUGGY]  InputStream  input  =  getNextEntryInput();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextEntryInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextEntryInput();	  InputStream    input    =    getArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
191	[BUG]  [BUGGY]  InputStream  input  =  this.getArEntryInput();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  this.getArEntryInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  this.getArEntryInput();	  InputStream    input    =    getArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  realized  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  realized	68	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  saved  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  saved	68	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  ==  0  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  ==  0  ||  input.available()  ==  0)  {	  if(input.available()!=    0)    {    if(input.available()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
195	[BUG]  [BUGGY]  if(input.available()  ==  0  ||  input.available()  ==  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  ==  0  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  ==  0  ||  input.available()  ==  0)  {	  if(input.available()!=    0)    {    if(input.available()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
196	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
197	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(this.input.available());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(this.input.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(this.input.available());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
198	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.read());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.read());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.read());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
199	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
200	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.getMessage());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.getMessage());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.getMessage());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
201	[BUG]  [BUGGY]  if(input.available()!=  0  ||  offset.length  ==  0)  {  [CE]  long  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  offset.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  offset.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	76	None	replace
202	[BUG]  [BUGGY]  if(input.available()  ==  0  ||  offset.length  ==  0)  {  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  ==  0  ||  offset.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  ==  0  ||  offset.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	76	None	replace
203	[BUG]  [BUGGY]  if(input.available()  ==  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  ==  0  ||  expected.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  ==  0  ||  expected.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	76	None	replace
204	[BUG]  [BUGGY]  if(input.available()!=  0  ||  offset  +  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  offset  +  expected.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  offset  +  expected.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	76	None	replace
205	[BUG]  [BUGGY]  if(input.available()  >=  0  ||  offset.length  ==  0)  {  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0  ||  offset.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >=  0  ||  offset.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	76	None	replace
206	[BUG]  [BUGGY]  if(Input.available()!=  0)  {  [CE]  cannot  find  symbol  Input  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(Input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(Input.available()!=  0)  {	  if(input.available()!=    0)    {    if(Input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  Input	80	None	replace
207	[BUG]  [BUGGY]  if(Input.available()  ==  0)  {  [CE]  cannot  find  symbol  Input  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(Input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(Input.available()  ==  0)  {	  if(input.available()!=    0)    {    if(Input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  Input	80	None	replace
208	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  this.input.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  this.input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEnabled()  ||  this.input.available()  ==  0)  {	  if(input    ==    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
209	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.lastModified()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.lastModified()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEnabled()  ||  input.lastModified()  ==  0)  {	  if(input    ==    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
210	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.available()  >=  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEnabled()  ||  input.available()  >=  0)  {	  if(input    ==    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
211	[BUG]  [BUGGY]  If(input.available()!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input.available()!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input.available()!=  null)  {	  if(input.available()!=    0)    {    If(input.available()!=    0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
212	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length  <  =  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length  <  =  0)  {	  if(input    ==    null    ||    input.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
213	[BUG]  [BUGGY]  if(input!=  null  ||  input.isVersion())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.isVersion())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.isVersion())  {	  if(input    ==    null    ||    input.isVersion())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
214	[BUG]  [BUGGY]  if(input  ==  null  ||  input.getVersion())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.getVersion())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.getVersion())  {	  if(input    ==    null    ||    input.isVersion())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
215	[BUG]  [BUGGY]  if(input  ==  null  ||  input.hasVersion())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.hasVersion())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.hasVersion())  {	  if(input    ==    null    ||    input.isVersion())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
216	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length()  <  =  0)  {	  if(input    ==    null    ||    input.isVersion())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  realized  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  realized	65	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  saved  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  saved.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  saved	65	None	replace
219	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header "  +  new  String(realized));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  	65	None	replace
220	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input  ==  null  ||  input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    if(input  ==  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
221	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  If(input  ==  null  ||  input.available()  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  If(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    If(input  ==  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
222	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input!=  null  ||  input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input!=  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    if(input!=  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
223	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input  >=  null  ||  input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input  >=  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    if(input  >=  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
224	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input  ==  null  ||  in.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input  ==  null  ||  in.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    if(input  ==  null  ||  in.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
225	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  input  ==  null  ||  input.available()  >  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    input  ==  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  not  a  statement	27	None	add
226	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  {  0)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  {  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  {  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input!=    null    ||    input.available()    {    0)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
227	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  {  0)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  {  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()  {  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input!=    null    ||    input.available()    {    0)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
228	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(i);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextArEntry(i);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextArEntry(i);	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
229	[BUG]  [BUGGY]  InputStream  input  =  this.getNextArEntry();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  this.getNextArEntry();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  this.getNextArEntry();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
230	[BUG]  [BUGGY]  InputStream  input  =  getReadArEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getReadArEntry();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getReadArEntry();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
231	[BUG]  [BUGGY]  InputStream  input  =  getArEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getArEntry();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getArEntry();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
232	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
233	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  ==  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
234	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
235	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >=  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
236	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()!=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
237	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
238	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()  ==  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.equals( " "))  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input!=  null  ||  input.equals( " "))  {	  if(input!=    null    ||    input.isEmpty())    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
240	[BUG]  [BUGGY]  if(input!=  null  ||  input.equals( " "))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.equals( " "))  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.equals( " "))  {	  if(input!=    null    ||    input.isEmpty())    {    	compilable	  [FE]  AssertionFailedError  	73	2	replace
241	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  <  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.length()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.length()  <  0)  {	  if(input!=    null    ||    input.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
242	[BUG]  [BUGGY]  long  offset  =  input.read();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  long  offset  =  input.read();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	long  offset  =  input.read();	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
243	[BUG]  [BUGGY]  int  offset  =  pInput.read();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  int  offset  =  pInput.read();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  pInput.read();	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
244	[BUG]  [BUGGY]  int  offset  =  this.input.read();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  int  offset  =  this.input.read();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  this.input.read();	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
245	[BUG]  [BUGGY]  int  offset  =  input.read(pInput);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  int  offset  =  input.read(pInput);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  input.read(pInput);	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
246	[BUG]  [BUGGY]  int  offset  =  input.readInt();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  int  offset  =  input.readInt();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  input.readInt();	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
247	[BUG]  [BUGGY]  int  offset  =  input.read()  -  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  int  offset  =  input.read()  -  1;  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  input.read()  -  1;	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
248	[BUG]  [BUGGY]  if(input!=  null  ||  input.isEnabled())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.isEnabled())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.isEnabled())  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
249	[BUG]  [BUGGY]  if(input  ==  null  ||  input.getType()  ==  Token.NAME  &&  input.isEnabled())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.getType()  ==  Token.NAME  &&  input.isEnabled())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.getType()  ==  Token.NAME  &&  input.isEnabled())  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
250	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length.isEnabled())  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length.isEnabled())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length.isEnabled())  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol  length	51	None	replace
251	[BUG]  [BUGGY]  if(input  ==  null  ||  input.getType()  ==  Token.GETPROP  &&  input.isEnabled())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.getType()  ==  Token.GETPROP  &&  input.isEnabled())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.getType()  ==  Token.GETPROP  &&  input.isEnabled())  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
252	[BUG]  [BUGGY]  if(input  ==  null  ||  input.getType()  ==  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.getType()  ==  Token.BLOCK)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.getType()  ==  Token.BLOCK)  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
253	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.length()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.length()  >  0)  {	  if(input!=    null    ||    input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input  ==  null  ||  input.available()  >  1)  {	  if(input    ==    null    ||    input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	28	2	replace
255	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  >  1)  {	  if(input    ==    null    ||    input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	28	2	replace
256	[BUG]  [BUGGY]  if(input.available()  ==  0  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  ==  0  ||  input.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  ==  0  ||  input.length  ==  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
257	[BUG]  [BUGGY]  if(input.available()  >=  0  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0  ||  input.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >=  0  ||  input.length  ==  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
258	[BUG]  [BUGGY]  if(input.available()  ==  0  ||  input.length!=  0)  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  ==  0  ||  input.length!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  ==  0  ||  input.length!=  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  offset  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()!=  0  ||  offset  ==  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	75	2	replace
260	[BUG]  [BUGGY]  if(input.available()!=  0  ||  offset  ==  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  offset  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  offset  ==  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	75	2	replace
261	[BUG]  [BUGGY]  if(input.available()  >  0  ||  expected[i]  ==  null)  {  [CE]  cannot  find  symbol  expected  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  expected[i]  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  expected[i]  ==  null)  {	  if(input.available()    >    0    ||    expected[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  expected	58	None	replace
262	[BUG]  [BUGGY]  if(input.available()  >  0  ||  realized[i]!=  null)  {  [CE]  cannot  find  symbol  realized  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  realized[i]!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  realized[i]!=  null)  {	  if(input.available()    >    0    ||    expected[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  realized	58	None	replace
263	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0  ||  expected[i]!=  null)  {  [CE]  cannot  find  symbol  expected  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0  ||  expected[i]!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()  >  0  ||  expected[i]!=  null)  {	  if(input.available()    >    0    ||    expected[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  expected	58	None	replace
264	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0  ||  expected[i]!=  null)  {  [CE]  cannot  find  symbol  expected  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0  ||  expected[i]!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  >  0  ||  expected[i]!=  null)  {	  if(input.available()    >    0    ||    expected[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  expected	58	None	replace
265	[BUG]  [BUGGY]  if(input.available()  >  0  ||  unexpected[i]!=  null)  {  [CE]  cannot  find  symbol  unexpected  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  unexpected[i]!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  unexpected[i]!=  null)  {	  if(input.available()    >    0    ||    expected[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	58	None	replace
266	[BUG]  [BUGGY]  InputStream  input  =  getArEntryStream(i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getArEntryStream(i);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getArEntryStream(i);	  InputStream    input    =    getArEntryStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
267	[BUG]  [BUGGY]  InputStream  input  =  getArEntryStreamInput();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getArEntryStreamInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getArEntryStreamInput();	  InputStream    input    =    getArEntryStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
268	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntryStream();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextArEntryStream();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextArEntryStream();	  InputStream    input    =    getArEntryStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
269	[BUG]  [BUGGY]  InputStream  input  =  this.getArEntryStream();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  this.getArEntryStream();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  this.getArEntryStream();	  InputStream    input    =    getArEntryStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
270	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >=    0)    {    if(input.available()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
271	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  if(input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  if(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >=    0)    {    if(input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
272	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  >>  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >=    0)    {    if(input.available()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
273	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >=    0)    {    if(input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
274	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  If(input.available()  >=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  If(input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >=    0)    {    If(input.available()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
275	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  If(input.available()!=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  If(input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >=    0)    {    If(input.available()!=  0)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
276	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
277	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
278	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
279	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  <  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  <  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
280	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.available())  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
281	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput!=  null)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput!=  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
282	[BUG]  [BUGGY]  InputStream  input  =  input.available();  if(input!=  null)  {  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  input.available();  if(input!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  input.available();  if(input!=  null)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
283	[BUG]  [BUGGY]  InputStream  input  =  input.available();  if(input  ==  null)  {  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  input.available();  if(input  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  input.available();  if(input  ==  null)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
284	[BUG]  [BUGGY]  Input  input  =  input.available();  if(input!=  null)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  Input  input  =  input.available();  if(input!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	Input  input  =  input.available();  if(input!=  null)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
285	[BUG]  [BUGGY]  InputStream  input  =  input.available();  if(input!=  null  ||  input.available()  >  0)  {  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  input.available();  if(input!=  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  input.available();  if(input!=  null  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
286	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  input.available();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  input.available();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  input.available();	  if(input.available()    >    0)    {    InputStream    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
287	[BUG]  [BUGGY]  InputStream  input  =  input.available()  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  input.available()  >  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
288	[BUG]  [BUGGY]  InputStream  input  =  input.available()  -  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  input.available()  -  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  input.available()  -  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
289	[BUG]  [BUGGY]  InputStream  input  =  input.available();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  input.available();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  input.available();	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
290	[BUG]  [BUGGY]  final  InputStream  input  =  input.available()  >  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  InputStream  input  =  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  InputStream  input  =  input.available()  >  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
291	[BUG]  [BUGGY]  InputStream  input  =  input.available()  /  0)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  input.available()  /  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  input.available()  /  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
292	[BUG]  [BUGGY]  InputStream  input  =  input.available())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  input.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  input.available())  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
293	[BUG]  [BUGGY]  InputStream  input  =  this.getInput();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  this.getInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  this.getInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
294	[BUG]  [BUGGY]  InputStream  input  =  getReadInput();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getReadInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getReadInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
295	[BUG]  [BUGGY]  InputStream  input  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getOutputStream();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getOutputStream();	  InputStream    input    =    getInput();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
296	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getInputStream(i);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInputStream(i);	  InputStream    input    =    getInput();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
297	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
298	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset,  input.length);  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset,  input.length);  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset,  input.length);  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
299	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  *  offset);  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  *  offset);  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  *  offset);  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
300	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input!=  null)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input!=  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
301	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(!pInput.available())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(!pInput.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(!pInput.available())  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
302	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  1)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  1)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
303	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getInputStream(offset);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInputStream(offset);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
304	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(filemode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getInputStream(filemode);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInputStream(filemode);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
305	[BUG]  [BUGGY]  InputStream  input  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  this.getInputStream();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  this.getInputStream();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
306	[BUG]  [BUGGY]  InputStream  input  =  getReadInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getReadInputStream();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getReadInputStream();	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
307	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(),  offset);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getInputStream(),  offset);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInputStream(),  offset);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  ';'  expected	43	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  realized  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  realized.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  realized	71	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  saved  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  saved.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  saved.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  saved	71	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  implemented  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  implemented	71	None	replace
311	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	For(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  long  cannot  be  dereferenced  [FE]                                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  offset.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  long  cannot  be  dereferenced	71	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  unexpected  [FE]                                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  unexpected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  unexpected	71	None	replace
314	[BUG]  [BUGGY]  safeToInt(offset)  {  throw  new  IOException( " ");  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeToInt(offset)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeToInt(offset)  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
315	[BUG]  [BUGGY]  safeToken(offset)  {  throw  new  IOException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeToken(offset)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeToken(offset)  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
316	[BUG]  [BUGGY]  safeGet(offset)  <  0)  {  throw  new  IOException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeGet(offset)  <  0)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeGet(offset)  <  0)  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  not  a  statement	61	None	replace
317	[BUG]  [BUGGY]  safeGet(offset)>  0)  {  throw  new  IOException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeGet(offset)>  0)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeGet(offset)>  0)  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  not  a  statement	61	None	replace
318	[BUG]  [BUGGY]  safeToInt(i)  {  throw  new  IOException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeToInt(i)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeToInt(i)  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input!=  null)  {	  if(input.available()    >    0)    {    if(Input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	81	2	replace
320	[BUG]  [BUGGY]  if(input!=  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null)  {	  if(input.available()    >    0)    {    if(Input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	81	2	replace
321	[BUG]  [BUGGY]  if(read  ==  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read  ==  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read  ==  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
322	[BUG]  [BUGGY]  if(read  ==  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read  ==  0)  {  read();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read  ==  0)  {  read();  }  else  {  throw  new  IOException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
323	[BUG]  [BUGGY]  if(offset  <  0)  {  read();  }  else  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  <  0)  {  read();  }  else  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  <  0)  {  read();  }  else  {  return  null;  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
324	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(null!=  input.available())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(null!=  input.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(null!=  input.available())  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	70	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  long  cannot  be  dereferenced	70	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	70	None	replace
328	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  AssertionFailedError  <  Input>  input  =  input.read();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  AssertionFailedError  <  Input>  input  =  input.read();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    >    0)    {    AssertionFailedError  <  Input>  input  =  input.read();	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	25	None	add
329	[BUG]  [BUGGY]  if(!read())  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(!read())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(!read())  {	  if(input.available()    >    0)    {    if(input.available()    >    0)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	32	None	replace
330	[BUG]  [BUGGY]  [FE]  IOException  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input  ==  null)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input!=    null    ||    input.available()    ==    0)    {    	compilable	  [FE]  IOException  	12	1	replace
331	[BUG]  [BUGGY]  if(input  ==  null)  {  [FE]  IOException  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input!=    null    ||    input.available()    ==    0)    {    	compilable	  [FE]  IOException  	12	1	replace
332	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()!=  0  ||  input.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()!=  0  ||  input.length  ==  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
333	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()!=  0  ||  input.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()!=  0  ||  input.length  ==  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
334	[BUG]  [BUGGY]  if(input.available()!=  0  ||  input.length  >=  0)  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  input.length  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  input.length  >=  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
335	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput  ==  null)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput  ==  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
336	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  ==  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
337	[BUG]  [BUGGY]  if(input.available()  >  0  ||  saved[i]!=  null)  {  [CE]  cannot  find  symbol  saved  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  saved[i]!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  saved[i]!=  null)  {	  if(input.available()    >    0    ||    expected[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  saved	58	None	replace
338	[BUG]  [BUGGY]  if(input.available()  >  0  ||  raw[i]!=  null)  {  [CE]  cannot  find  symbol  raw  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  raw[i]!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  raw[i]!=  null)  {	  if(input.available()    >    0    ||    expected[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  raw	58	None	replace
339	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(null!=  input.length)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(null!=  input.length)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(null!=  input.length)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
340	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn  ==  null)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn  ==  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
341	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.available())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.available())  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
342	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(pIn.available()  ==  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
343	[BUG]  [BUGGY]  if(read  ==  0  ||  input.available()  ==  0)  {  [CE]  cannot  find  symbol  read  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read  ==  0  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read  ==  0  ||  input.available()  ==  0)  {	  if(input    ==    null    ||    input.available()    ==    0)    {    if(input    ==    null    ||    input.available()    {    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	50	None	replace
344	[BUG]  [BUGGY]  if(input  ==  null  ||  output.length  ==  0)  {  [CE]  cannot  find  symbol  output  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  output.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  output.length  ==  0)  {	  if(input!=    null    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  output	74	None	replace
345	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(null!=  input.available())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(null!=  input.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(null!=  input.available())  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
346	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(mpInput!=  null)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(mpInput!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(mpInput!=  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
347	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(input);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getInputStream(input);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInputStream(input);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
348	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " "));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
349	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  read  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  read.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  read.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  read	71	None	replace
350	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	71	None	replace
351	[BUG]  [BUGGY]  InputStream  input  =  getNextInput();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextInput();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
352	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry().getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextArEntry().getInputStream();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextArEntry().getInputStream();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
353	[BUG]  [BUGGY]  InputStream  input  =  getNextArchiveEntry();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextArchiveEntry();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextArchiveEntry();	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
354	[BUG]  [BUGGY]  if(input!=  null)  {  InputStream  input  =  input.available()  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null)  {  InputStream  input  =  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null)  {  InputStream  input  =  input.available()  >  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
355	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  InputStream  input  =  input.available()  >  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  InputStream  input  =  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()  >  0)  {  InputStream  input  =  input.available()  >  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
356	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  InputStream  input  =  input.available()  >  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  InputStream  input  =  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  >  0)  {  InputStream  input  =  input.available()  >  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
357	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  long  cannot  be  dereferenced	69	None	replace
358	[BUG]  [BUGGY]  InputStream  input  =  getNewArEntryInput();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNewArEntryInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNewArEntryInput();	  InputStream    input    =    getArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
359	[BUG]  [BUGGY]  if(input.isEmpty())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.isEmpty())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.isEmpty())  {	  if(input.available()!=    0)    {    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
360	[BUG]  [BUGGY]  if(read.available()!=  0)  {  [CE]  cannot  find  symbol  read  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read.available()!=  0)  {	  if(input.available()!=    0)    {    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	7	None	replace
361	[BUG]  [BUGGY]  InputStream  input  =  getNewArEntryStream();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNewArEntryStream();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNewArEntryStream();	  InputStream    input    =    getArEntryStream();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
362	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  instanceof  AssertionFailedError)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  instanceof  AssertionFailedError)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(pIn  instanceof  AssertionFailedError)  {	  if(input.available()    >    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
363	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(!pIn.available())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(!pIn.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(!pIn.available())  {	  if(input.available()    >    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
364	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length.isEmpty())  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length.isEmpty())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length.isEmpty())  {	  if(input!=    null    ||    input.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  length	73	None	replace
365	[BUG]  [BUGGY]  if(input!=  null  ||  input.length.isEmpty())  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.length.isEmpty())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.length.isEmpty())  {	  if(input!=    null    ||    input.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  length	73	None	replace
366	[BUG]  [BUGGY]  final  int  offset  =  input.read(filemode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.read(filemode);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.read(filemode);	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
367	[BUG]  [BUGGY]  final  int  offset  =  input.read(input);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.read(input);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.read(input);	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
368	[BUG]  [BUGGY]  final  int  offset  =  input.read(false);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.read(false);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.read(false);	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
369	[BUG]  [BUGGY]  final  int  offset  =  input.read(data);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.read(data);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.read(data);	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
370	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(pInput!=  null)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(pInput!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(pInput!=  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
371	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(pInput  ==  null)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(pInput  ==  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(pInput  ==  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
372	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset,  input.available());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset,  input.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset,  input.available());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
373	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(!input.available())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(!input.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(!input.available())  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
374	[BUG]  [BUGGY]  int  offset  =  input.read(input);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  int  offset  =  input.read(input);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  input.read(input);	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
375	[BUG]  [BUGGY]  int  offset  =  input.read(filemode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  int  offset  =  input.read(filemode);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  input.read(filemode);	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
376	[BUG]  [BUGGY]  int  offset  =  input.read(false);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  int  offset  =  input.read(false);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  input.read(false);	  int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
377	[BUG]  [BUGGY]  final  int  offset  =  input.length()  /  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.length()  /  2;  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.length()  /  2;	  final    int    offset    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
378	[BUG]  [BUGGY]  final  int  offset  =  pInput.length();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  pInput.length();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  pInput.length();	  final    int    offset    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
379	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  AssertionFailedError  <  AssertionFailedError>  input  =  input.read();  if(input  ==  null  ||  input.available()  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  AssertionFailedError  <  AssertionFailedError>  input  =  input.read();  if(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    AssertionFailedError  <  AssertionFailedError>  input  =  input.read();  if(input  ==  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	27	None	add
380	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  AssertionFailedError  <  AssertionFailedError>  input  =  input.getAr();  if(input  ==  null  ||  input.available()  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]      AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  AssertionFailedError  <  AssertionFailedError>  input  =  input.getAr();  if(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    AssertionFailedError  <  AssertionFailedError>  input  =  input.getAr();  if(input  ==  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	27	None	add
381	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  AssertionFailedError  <  Input>  input  =  input.read();  if(input  ==  null  ||  input.available()  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  AssertionFailedError  <  Input>  input  =  input.read();  if(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    AssertionFailedError  <  Input>  input  =  input.read();  if(input  ==  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	27	None	add
382	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  AssertionFailedError  <  AssertionFailedError>  pInput  =  new  AssertionFailedError();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  AssertionFailedError  <  AssertionFailedError>  pInput  =  new  AssertionFailedError();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    AssertionFailedError  <  AssertionFailedError>  pInput  =  new  AssertionFailedError();	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	27	None	add
383	[BUG]  [BUGGY]  InputStream  input  =  getOutput();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getOutput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getOutput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
384	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized[i]));    }    	non-compiled	[CE]  cannot  find  symbol  expected	67	None	replace
385	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(!pInput.available())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(!pInput.available())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(!pInput.available())  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
386	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput  >=  null)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput  >=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(pInput  >=  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
387	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length())  {	  if(input    ==    null    ||    input.isVersion())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
388	[BUG]  [BUGGY]  if(input  ==  null  ||  input.equals(InputStream.UTF8))  {  [CE]  cannot  find  symbol  UTF8  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.equals(InputStream.UTF8))  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.equals(InputStream.UTF8))  {	  if(input    ==    null    ||    input.isVersion())    {    	non-compiled	[CE]  cannot  find  symbol  UTF8	24	None	replace
389	[BUG]  [BUGGY]  if(null!=  input.length)  {  if(input!=  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(null!=  input.length)  {  if(input!=  null  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(null!=  input.length)  {  if(input!=  null  ||  input.available()  ==  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input!=    null    ||    input.available()    {    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
390	[BUG]  [BUGGY]  if(read  ==  0)  {  [CE]  cannot  find  symbol  read  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read  ==  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input!=    null    ||    input.available()    {    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	77	None	replace
391	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
392	[BUG]  [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input  [Delete]  null)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  <  Integer>  input  =  input.available();  if(input  [Delete]  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  <  Integer>  input  =  input.available();  if(input  [Delete]  null)  {	  if(input.available()    >    0)    {    AssertionFailedError    <    Integer>    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	56	None	replace
393	[BUG]  [BUGGY]  AtsertionFailedError  pInput  =  new  AssertionFailedError(input.available());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AtsertionFailedError  pInput  =  new  AssertionFailedError(input.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AtsertionFailedError  pInput  =  new  AssertionFailedError(input.available());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
394	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(output.available());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(output.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(output.available());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
395	[BUG]  [BUGGY]  AnsertionFailedError  pInput  =  new  AssertionFailedError(input.available());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AnsertionFailedError  pInput  =  new  AssertionFailedError(input.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AnsertionFailedError  pInput  =  new  AssertionFailedError(input.available());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
396	[BUG]  [BUGGY]  AnsertionFailedError  pInput  =  new  AnsertionFailedError(input.available());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AnsertionFailedError  pInput  =  new  AnsertionFailedError(input.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AnsertionFailedError  pInput  =  new  AnsertionFailedError(input.available());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
397	[BUG]  [BUGGY]  if(InputStream.available()!=  0)  {  [CE]  non-static  method  available()  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(InputStream.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(InputStream.available()!=  0)  {	  if(input.available()!=    0)    {    if(Input.available()!=    0)    {    	non-compiled	[CE]  non-static  method  available()  cannot  be  referenced  from  a  static  context	80	None	replace
398	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  long  cannot  be  dereferenced	65	None	replace
399	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(known[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  expected	65	None	replace
400	[BUG]  [BUGGY]  if(input.available()  <  =  0)  {  if(input.available()  >  0)  <  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  <  =  0)  {  if(input.available()  >  0)  <  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  <  =  0)  {  if(input.available()  >  0)  <  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >=  0)  {  if(input.available()  >  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  AssertionFailedError  	82	2	replace
402	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  >  0)  {  return  null;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >=  0)  {  if(input.available()  >  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  AssertionFailedError  	82	2	replace
403	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  {  return  this;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  {  return  this;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0)  {  if(input.available()  >  0)  {  return  this;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	non-compiled	[CE]  incompatible  types	82	None	replace
404	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  filemode.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  filemode  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  filemode.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  filemode.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  filemode	66	None	replace
405	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  real[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  real[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  real[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  expected	66	None	replace
406	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  expected	66	None	replace
407	[BUG]  [BUGGY]  if(input.available()!=  0  ||  saved.length  ==  0)  {  [CE]  cannot  find  symbol  saved  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  saved.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  saved.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  saved	76	None	replace
408	[BUG]  [BUGGY]  if(input.available()!=  0  ||  selected.length  ==  0)  {  [CE]  cannot  find  symbol  selected  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  selected.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  selected.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  selected	76	None	replace
409	[BUG]  [BUGGY]  if(input.available()!=  0  ||  unexpected.length  ==  0)  {  [CE]  cannot  find  symbol  unexpected  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  unexpected.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  unexpected.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  unexpected	76	None	replace
410	[BUG]  [BUGGY]  if(input  ==  null  ||  input.enabled())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.enabled())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.enabled())  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
411	[BUG]  [BUGGY]  if(input  ==  null  ||  input.getType()!=  Token.BLOCK)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.getType()!=  Token.BLOCK)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.getType()!=  Token.BLOCK)  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
412	[BUG]  [BUGGY]  if(input  ==  null  ||  input.getType()!=  Token.GETPROP)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.getType()!=  Token.GETPROP)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.getType()!=  Token.GETPROP)  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
413	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0  ||  input.length  >  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0  ||  input.length  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  >  0  ||  input.length  >  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
414	[BUG]  [BUGGY]  if(input.available()  >  0  ||  input.length  <  0)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  input.length  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  input.length  <  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
415	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  real[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  real[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  real[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  expected	68	None	replace
416	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	59	None	replace
417	[BUG]  [BUGGY]  safeToInt(offset)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeToInt(offset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeToInt(offset)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
418	[BUG]  [BUGGY]  safeThan  <  =  0  ||  offset  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeThan  <  =  0  ||  offset  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeThan  <  =  0  ||  offset  <  0)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	59	None	replace
419	[BUG]  [BUGGY]  safeToInt(offset)  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeToInt(offset)  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeToInt(offset)  <  0)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	59	None	replace
420	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >=  0)  {  if(input.available()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >=    0)    {    if(input.available()  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
421	[BUG]  [BUGGY]  safeToInt(offset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeToInt(offset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeToInt(offset)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
422	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	60	None	replace
423	[BUG]  [BUGGY]  safeThan  <  =  0  ||  offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeThan  <  =  0  ||  offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeThan  <  =  0  ||  offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	60	None	replace
424	[BUG]  [BUGGY]  safeToInt(input)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeToInt(input)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeToInt(input)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
425	[BUG]  [BUGGY]  safeToInt(i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  safeToInt(i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	safeToInt(i)  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
426	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  inputStream.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  inputStream.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEnabled()  ||  inputStream.available()  ==  0)  {	  if(input    ==    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
427	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  [Delete]  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	[Delete]	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
428	[BUG]  [BUGGY]  while(i  <  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(i  <  0)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(i  <  0)  {  throw  new  IOException( " ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
429	[BUG]  [BUGGY]  aughtException( " ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aughtException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aughtException( " ");	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
430	[BUG]  [BUGGY]  aughtInvalidIOException( " ");  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aughtInvalidIOException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aughtInvalidIOException( " ");	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
431	[BUG]  [BUGGY]  while(offset  <  0)  {  throw  new  IOException( "' ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(offset  <  0)  {  throw  new  IOException( "' ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(offset  <  0)  {  throw  new  IOException( "' ");  }	  if(offset    <    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
432	[BUG]  [BUGGY]  [FE]  IOException  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  %  2!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(offset  %  2!=  0)  {	  if(input.available()!=    0)    {    if(input.available()!=    0)    {    	compilable	  [FE]  IOException  	7	1	replace
433	[BUG]  [BUGGY]  if(offset  %  2!=  0)  {  [FE]  IOException  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(offset  %  2!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  %  2!=  0)  {	  if(input.available()!=    0)    {    if(input.available()!=    0)    {    	compilable	  [FE]  IOException  	7	1	replace
434	[BUG]  [BUGGY]  if(read.length()  >  0)  {  [CE]  cannot  find  symbol  read  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read.length()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read.length()  >  0)  {	  if(input.available()    >    0)    {    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	32	None	replace
435	[BUG]  [BUGGY]  if(input.isEmpty()  ||  input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.isEmpty()  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.isEmpty()  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
436	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length  ==  1)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length  ==  1)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length  ==  1)  {	  if(input    ==    null    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	78	None	replace
437	[BUG]  [BUGGY]  if(expected  ==  null  ||  input.available()  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(expected  ==  null  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(expected  ==  null  ||  input.available()  ==  0)  {	  if(input    ==    null    ||    input.available()    ==    0)    {    if(input    {    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	79	None	replace
438	[BUG]  [BUGGY]  [FE]  IOException  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input  ==  null  ||  input.available()  <  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input!=    null    ||    input.available()    >=    0)    {    	compilable	  [FE]  IOException  	16	1	replace
439	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  <  0)  {  [FE]  IOException  [FE]                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  <  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  <  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input!=    null    ||    input.available()    >=    0)    {    	compilable	  [FE]  IOException  	16	1	replace
440	[BUG]  [BUGGY]  if(input.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.length()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.length()  >  0)  {	  if(input.available()    >    0)    {    InputStream    input    =    input.available();    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
441	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length  >  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.length  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length  >  0)  {	  if(input    ==    null    ||    input.isVersion())    {    	non-compiled	[CE]  cannot  find  symbol  length	24	None	replace
442	[BUG]  [BUGGY]  if(input.isEmpty()  ||  input.available()!=  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.isEmpty()  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.isEmpty()  ||  input.available()!=  0)  {	  if(input.available()!=    0)    {    if(input.available()    >>    0)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
443	[BUG]  [BUGGY]  while(i  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while(i  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while(i  <  0)  {  throw  new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
444	[BUG]  [BUGGY]  aught(new  IllegalStateException( " ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aught(new  IllegalStateException( " ");  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aught(new  IllegalStateException( " ");	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
445	[BUG]  [BUGGY]  aught(new  IllegalStateException( " "));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aught(new  IllegalStateException( " "));  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aught(new  IllegalStateException( " "));	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
446	[BUG]  [BUGGY]  aught(new  IllegalStateException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aught(new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aught(new  IllegalStateException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
447	[BUG]  [BUGGY]  [FE]  IOException  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  <  0)  {  if(input.available()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  <  0)  {  if(input.available()  >  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  IOException  	82	1	replace
448	[BUG]  [BUGGY]  if(input.available()  <  0)  {  if(input.available()  >  0)  {  return  null;  }  [FE]  IOException  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  <  0)  {  if(input.available()  >  0)  {  return  null;  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  <  0)  {  if(input.available()  >  0)  {  return  null;  }	  if(input.available()    >    0)    {    if(input.available()    >    0)    <    return    null;    	compilable	  [FE]  IOException  	82	1	replace
449	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  {  null  ||  input.available()!=  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  if(input  {  null  ||  input.available()!=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()!=    0)    {    if(input  {  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  ')'  expected	19	None	add
450	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(inputStream.available());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(inputStream.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(inputStream.available());	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
451	[BUG]  [BUGGY]  if(input.available()  >  0  ||  imagined[i]!=  null)  {  [CE]  cannot  find  symbol  imagined  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  imagined[i]!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  imagined[i]!=  null)  {	  if(input.available()    >    0    ||    expected[i]!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  imagined	58	None	replace
452	[BUG]  [BUGGY]  InputStream  input  =  readInput();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  readInput();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  readInput();	  InputStream    input    =    getInput();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
453	[BUG]  [BUGGY]  InputStream  input  =  getInput().getOutputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getInput().getOutputStream();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInput().getOutputStream();	  InputStream    input    =    getInput();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
454	[BUG]  [BUGGY]  if(input.isVersion())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.isVersion())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.isVersion())  {	  if(input.available()!=    0)    {    if(input.available()    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
455	[BUG]  [BUGGY]  if(input.available()!=  0  ||  filemode.length  ==  0)  {  [CE]  cannot  find  symbol  filemode  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  filemode.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  filemode.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  filemode	76	None	replace
456	[BUG]  [BUGGY]  if(input.available()!=  0  ||  available.length  ==  0)  {  [CE]  cannot  find  symbol  available  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  available.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  available.length  ==  0)  {	  if(input.available()!=    0    ||    expected.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  available	76	None	replace
457	[BUG]  [BUGGY]  AssertionFailedError  return  new  AssertionFailedError(input.available());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  return  new  AssertionFailedError(input.available());  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  return  new  AssertionFailedError(input.available());	  if(input.available()    >    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  not  a  statement	37	None	replace
458	[BUG]  [BUGGY]  if(read  <  expected.length)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read  <  expected.length)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read  <  expected.length)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
459	[BUG]  [BUGGY]  if(read!=  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read!=  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read!=  0)  {  read();  }  else  {  throw  new  IllegalStateException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
460	[BUG]  [BUGGY]  if(read  <  expected.length)  {  read();  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read  <  expected.length)  {  read();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read  <  expected.length)  {  read();  }  else  {  throw  new  IOException( " ");  }	  read();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
461	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	70	None	replace
462	[BUG]  [BUGGY]  InputStream  input  =  getInputStream(regexp);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getInputStream(regexp);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInputStream(regexp);	  InputStream    input    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
463	[BUG]  [BUGGY]  if(input.available()  >  0  ||  input.length  >=  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  input.length  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  input.length  >=  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
464	[BUG]  [BUGGY]  if(input.available()  >  0  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()  >  0  ||  input.length  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  input.length  ==  0)  {	  if(input.available()    >    0    ||    input.length    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	64	None	replace
465	[BUG]  [BUGGY]  if(input!=  null  ||  expected.length()  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  expected.length()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  expected.length()  ==  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	21	None	replace
466	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  written.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  written  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  written.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  written.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(!closed)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  written	71	None	replace
467	[BUG]  [BUGGY]  if(input  ==  null  ||  input.equals(InputStream.DEFAULT_INPUT))  {  [CE]  cannot  find  symbol  DEFAULT_INPUT  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.equals(InputStream.DEFAULT_INPUT))  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.equals(InputStream.DEFAULT_INPUT))  {	  if(input!=    null    ||    input.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INPUT	73	None	replace
468	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  implemented  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  implemented.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  implemented	66	None	replace
469	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  offset.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(filemode[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  long  cannot  be  dereferenced	66	None	replace
470	[BUG]  [BUGGY]  final  int  offset  =  input.readLine();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  final  int  offset  =  input.readLine();  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.readLine();	  final    int    offset    =    input.read();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
471	[BUG]  [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  input.available()  >=  0)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  input.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.isEnabled()  ||  input.available()  >=  0)  {	  if(input!=    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
472	[BUG]  [BUGGY]  if(input  >=  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  >=  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  >=  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {	  if(input!=    null    ||    input.isEnabled()    ||    input.available()    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None	replace
473	[BUG]  [BUGGY]  if(read  ==  null  ||  input.available()  ==  0)  {  [CE]  cannot  find  symbol  read  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read  ==  null  ||  input.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read  ==  null  ||  input.available()  ==  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    if(input    ==    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	13	None	replace
474	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.isEmpty())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.isEmpty())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(!pIn.isEmpty())  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
475	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]  ==  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]  ==  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]  ==  expected[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  expected	68	None	replace
476	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  offset.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  long  cannot  be  dereferenced	68	None	replace
477	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]    ==    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  expected	68	None	replace
478	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextArEntry(null);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextArEntry(null);	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
479	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry(input);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getNextArEntry(input);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextArEntry(input);	  InputStream    input    =    getNextArEntry();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
480	[BUG]  [BUGGY]  InputStream  input  =  getArEntryInput(filemode);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  InputStream  input  =  getArEntryInput(filemode);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getArEntryInput(filemode);	  InputStream    input    =    getArEntryInput();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
481	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.isEmpty())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.isEmpty())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(!pInput.isEmpty())  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
482	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  >=  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  >=  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(pInput.available()  >=  0)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input);    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
483	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(!pInput.isEmpty())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(!pInput.isEmpty())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(!pInput.isEmpty())  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
484	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized[i]));    }    	non-compiled	[CE]  cannot  find  symbol  expected	67	None	replace
485	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized[i]));    }    	non-compiled	[CE]  cannot  find  symbol  expected	67	None	replace
486	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  expected	65	None	replace
487	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IOException(   "invalid    header       "    +    new    String(realized));    }    	non-compiled	[CE]  cannot  find  symbol  expected	65	None	replace
488	[BUG]  [BUGGY]  if(input  ==  null  ||  data.length()  ==  0)  {  [CE]  cannot  find  symbol  data  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  data.length()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  data.length()  ==  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  data	18	None	replace
489	[BUG]  [BUGGY]  if(input.available()!=  0  ||  input.offset  ==  0)  {  [CE]  cannot  find  symbol  offset  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  input.offset  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  input.offset  ==  0)  {	  if(input.available()!=    0    ||    input.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  offset	75	None	replace
490	[BUG]  [BUGGY]  if(input  ==  null  ||  expected.length.isEnabled())  {  [CE]  package  expected  does  not  exist  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  expected.length.isEnabled())  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  expected.length.isEnabled())  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  package  expected  does  not  exist	51	None	replace
491	[BUG]  [BUGGY]  if(input  ==  null  ||  input.equals(InputStream.DEFAULT_INIT_ERROR))  {  [CE]  cannot  find  symbol  DEFAULT_INIT_ERROR  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.equals(InputStream.DEFAULT_INIT_ERROR))  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.equals(InputStream.DEFAULT_INIT_ERROR))  {	  if(input    ==    null    ||    input.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INIT_ERROR	51	None	replace
492	[BUG]  [BUGGY]  if(read.available()  ==  0)  {  [CE]  cannot  find  symbol  read  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(read.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(read.available()  ==  0)  {	  if(input.available()!=    0)    {    if(input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  read	9	None	replace
493	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >>  0)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >>  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  >>  0)  {	  if(input!=    null    ||    input.available()!=    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	41	None	replace
494	[BUG]  [BUGGY]  If(input  ==  null  ||  input.available()  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  If(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	If(input  ==  null  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    If(input.available()    >    0)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
495	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(realized[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	69	None	replace
496	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(refigured[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	69	None	replace
497	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    expected.length;    i++)    {    if(expected[i]!=    realized[i])    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  expected	69	None	replace
498	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.read());  if(pInput!=  null)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.read());  if(pInput!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.read());  if(pInput!=  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
499	[BUG]  [BUGGY]  while((  offset  <  0)||(offset  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while((  offset  <  0)||(offset  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while((  offset  <  0)||(offset  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
500	[BUG]  [BUGGY]  while((  offset  <  0)&&(offset  <  expected.length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while((  offset  <  0)&&(offset  <  expected.length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while((  offset  <  0)&&(offset  <  expected.length))  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
501	[BUG]  [BUGGY]  while((  offset  <  0)||(offset  >  expected.length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while((  offset  <  0)||(offset  >  expected.length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while((  offset  <  0)||(offset  >  expected.length))  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
502	[BUG]  [BUGGY]  while((  offset  <  0)&&(offset  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while((  offset  <  0)&&(offset  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while((  offset  <  0)&&(offset  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
503	[BUG]  [BUGGY]  while((  offset  <  0)||(offset  >  filemode.length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  while((  offset  <  0)||(offset  >  filemode.length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	while((  offset  <  0)||(offset  >  filemode.length))  {  throw  new  IllegalArgumentException( " ");  }	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
504	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " "));  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  aught(new  IllegalArgumentException( " "));  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	aught(new  IllegalArgumentException( " "));	  if(offset    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
505	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input  {  null  ||  input.available()  >  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  if(input  {  null  ||  input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    >    0)    {    if(input  {  null  ||  input.available()  >  0)  {	  	non-compiled	[CE]  ')'  expected	27	None	add
506	[BUG]  [BUGGY]  if(input.available()!=  0  ||  input.length  >  0)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(input.available()!=  0  ||  input.length  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  input.length  >  0)  {	  if(input.available()    >>    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	42	None	replace
507	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.read());  if(pIn!=  null)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.read());  if(pIn!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.read());  if(pIn!=  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
508	[BUG]  [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.getMessage());  if(pIn!=  null)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pIn  =  new  AssertionFailedError(input.getMessage());  if(pIn!=  null)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pIn  =  new  AssertionFailedError(input.getMessage());  if(pIn!=  null)  {	  if(input.available()!=    0)    {    AssertionFailedError    pIn    =    new    AssertionFailedError(input.available());    if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
509	[BUG]  [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  /  offset);  if(input.available()  >  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  /  offset);  if(input.available()  >  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  /  offset);  if(input.available()  >  0)  {	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
510	[BUG]  [BUGGY]  AssertionFailedError  return  new  AssertionFailedError(input.available()  +  offset);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  AssertionFailedError  return  new  AssertionFailedError(input.available()  +  offset);  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	AssertionFailedError  return  new  AssertionFailedError(input.available()  +  offset);	  if(input.available()    >    0)    {    AssertionFailedError    pInput    =    new    AssertionFailedError(input.available()    +    offset);    if(input.available()    >    0)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
511	[BUG]  [BUGGY]  if(InputStream.available()  ==  0)  {  [CE]  non-static  method  available()  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError      [CONTEXT]      }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(     "invalid  header       "  +  new  String(realized));  }  }  }        [BUGGY]  if(InputStream.available()  ==  0)  {  [BUGGY]      return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(InputStream.available()  ==  0)  {	  if(input.available()!=    0)    {    if(Input.available()!=    0)    {    	non-compiled	[CE]  non-static  method  available()  cannot  be  referenced  from  a  static  context	80	None	replace
