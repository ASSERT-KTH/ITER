bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input!=  null  ||  input.available()  ==  0)  {	if  (input.available()  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	27	2	replace
2	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()  ==  0)  {	if  (input.available()  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	27	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]  if(input.available()  >  0)  {  [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >  0)  {	if  (input.available()  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	27	2	replace
4	[BUG]  [BUGGY]  if(input.available()  >  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]  if(input.available()  >  0)  {  [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0)  {	if  (input.available()  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	27	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input  ==  null  ||  input.available()  ==  0)  {	if  (input.available()  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	27	1	replace
6	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  ==  0)  {	if  (input.available()  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	27	1	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]    [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	  	if  (input.available()  ==  0)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]  if(input.available()!=  0)  {  [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()!=  0)  {	if  (input.available()  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	27	2	replace
9	[BUG]  [BUGGY]  if(input.available()!=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  }  }    [BUGGY]  if(input.available()!=  0)  {  [BUGGY]  return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0)  {	if  (input.available()  ==  0)  {  	compilable	  [FE]  AssertionFailedError  	27	2	replace
