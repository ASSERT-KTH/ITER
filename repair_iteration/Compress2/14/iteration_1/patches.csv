bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    ==    0)    {    if(input  ==  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
2	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  If(input  ==  null  ||  input.available()  ==  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  If(input  ==  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    ==    0)    {    If(input  ==  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
3	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input!=  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input!=  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    ==    0)    {    if(input!=  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
4	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    ==    0)    {    if(input  ==  null  ||  input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
5	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()  >=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    ==    0)    {    if(input  ==  null  ||  input.available()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
6	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  >=  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  >=  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    ==    0)    {    if(input  >=  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
7	[BUG]  [BUGGY]  if(input.available()!=  0)  {  if(input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  if(input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    if(input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
8	[BUG]  [BUGGY]  if(input.available()!=  0)  {  if(input.available()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  if(input.available()  >=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    if(input.available()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
9	[BUG]  [BUGGY]  if(input.available()!=  0)  {  if(input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  if(input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    if(input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
10	[BUG]  [BUGGY]  if(input.available()!=  0)  {  if(input.available()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  if(input.available()  >>  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    if(input.available()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
11	[BUG]  [BUGGY]  if(input.available()!=  0)  {  If(input.available()!=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  If(input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    If(input.available()!=  0)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
12	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input!=  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input!=  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    ==    0)    {    if(input!=  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
13	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    ==    0)    {    if(input  ==  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
14	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  If(input!=  null  ||  input.available()  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  If(input!=  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    ==    0)    {    If(input!=  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
15	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input  >=  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input  >=  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    ==    0)    {    if(input  >=  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
16	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input!=  null  ||  input.available()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input!=  null  ||  input.available()  >=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    ==    0)    {    if(input!=  null  ||  input.available()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
17	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input  >>  null  ||  input.available()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input  >>  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    ==    0)    {    if(input  >>  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input  ==  null  ||  input.available()!=  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
20	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()!=  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
21	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
22	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
23	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEmpty())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.isEmpty())  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEmpty())  {	  if(input!=    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
24	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isVersion())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.isVersion())  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isVersion())  {	  if(input    ==    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input!=  null  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
26	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input  ==  null  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
28	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.available()  >  0)  {	  if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input.available()  >=  0)  {	  if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
30	[BUG]  [BUGGY]  if(input.available()  >=  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >=  0)  {	  if(input.available()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	4	2	replace
31	[BUG]  [BUGGY]  if(input.available()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  <  =  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  <  =  0)  {	  if(input.available()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    if(input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
33	[BUG]  [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
34	[BUG]  [BUGGY]  if(input.available()  >  0)  {  If(input.available()  >  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  If(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    If(input.available()  >  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
35	[BUG]  [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
36	[BUG]  [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);  if(input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);  if(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  1);  if(input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
37	[BUG]  [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
38	[BUG]  [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(input.available()  +  offset);  if(input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
39	[BUG]  [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	add	if(input!=  null  ||  input.available()!=  0)  {	  if(input.available()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
41	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.available()!=  0)  {	  if(input.available()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
42	[BUG]  [BUGGY]  if(input.available()  >>  0)  {  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >>  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >>  0)  {	  if(input.available()!=    0)    {    	non-compiled	[CE]  incompatible  types	9	None	replace
43	[BUG]  [BUGGY]  InputStream  input  =  getInputStream();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  InputStream  input  =  getInputStream();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  InputStream  input  =  getInput();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  InputStream  input  =  getInput();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getInput();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  final  int  offset  =  input.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  final  int  offset  =  input.length();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.length();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  InputStream  input  =  getNextArEntry();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  InputStream  input  =  getNextArEntry();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getNextArEntry();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  InputStream  input  =  getArEntryStream();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  InputStream  input  =  getArEntryStream();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getArEntryStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  InputStream  input  =  getArEntryInput();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  InputStream  input  =  getArEntryInput();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	InputStream  input  =  getArEntryInput();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  read();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  read();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()  {  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  ==  null  ||  input.available()  {  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    ==    0)    {    if(input  ==  null  ||  input.available()  {  0)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
51	[BUG]  [BUGGY]  if(input  ==  null  ||  input.isEnabled())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.isEnabled())  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.isEnabled())  {	  if(input    ==    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
52	[BUG]  [BUGGY]  if(input.available()!=  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
53	[BUG]  [BUGGY]  if(input.available()!=  0)  {  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    AssertionFailedError  pIn  =  new  AssertionFailedError(input.available());  if(input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
54	[BUG]  [BUGGY]  if(input.available()!=  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    AssertionFailedError  pInput  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
55	[BUG]  [BUGGY]  if(input.available()!=  0)  {  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    AssertionFailedError  pIn  =  new  AssertionFailedError(input);  if(input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
56	[BUG]  [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  >  0)  {  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    AssertionFailedError  <  Integer>  input  =  input.available();  if(input.available()  >  0)  {	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	add
57	[BUG]  [BUGGY]  if(input.available()  >  0)  {  InputStream  input  =  input.available();  if(input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  InputStream  input  =  input.available();  if(input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    InputStream  input  =  input.available();  if(input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
58	[BUG]  [BUGGY]  if(input.available()  >  0  ||  expected[i]!=  null)  {  [CE]  cannot  find  symbol  expected  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0  ||  expected[i]!=  null)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  expected[i]!=  null)  {	  if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	4	None	replace
59	[BUG]  [BUGGY]  if(offset  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(offset  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  <  0)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  if(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  <  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
61	[BUG]  [BUGGY]  if(offset  <  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(offset  <  0)  {  throw  new  IOException( " ");  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(offset  <  0)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  int  offset  =  input.read();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  int  offset  =  input.read();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	int  offset  =  input.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  final  int  offset  =  input.read();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  final  int  offset  =  input.read();  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	final  int  offset  =  input.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  if(input.available()  >  0  ||  input.length  >  0)  {  [CE]  cannot  find  symbol  length  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0  ||  input.length  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()  >  0  ||  input.length  >  0)  {	  if(input.available()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	4	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]              AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	      	non-compiled	[CE]  cannot  find  symbol  expected	7	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(filemode[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	      	non-compiled	[CE]  cannot  find  symbol  expected	7	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [CE]  cannot  find  symbol  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized[i]));  }	      	non-compiled	[CE]  cannot  find  symbol  expected	7	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [CE]  cannot  find  symbol  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]  ==  realized[i])  {  throw  new  IOException( "invalid  header   "  +  new  String(realized));  }	      	non-compiled	[CE]  cannot  find  symbol  expected	7	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  expected	7	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(expected[i]!=  realized[i])  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  expected	7	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  expected  [FE]                          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	for(int  i  =  0;  i  <  expected.length;  i++)  {  if(!closed)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  expected	7	None	replace
72	[BUG]  [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.isEnabled()  ||  input.available()  ==  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
73	[BUG]  [BUGGY]  if(input!=  null  ||  input.isEmpty())  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.isEmpty())  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.isEmpty())  {	  if(input!=    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
74	[BUG]  [BUGGY]  if(input!=  null  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.length  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=  null  ||  input.length  ==  0)  {	  if(input!=    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
75	[BUG]  [BUGGY]  if(input.available()!=  0  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0  ||  input.length  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  input.length  ==  0)  {	  if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	9	None	replace
76	[BUG]  [BUGGY]  if(input.available()!=  0  ||  expected.length  ==  0)  {  [CE]  cannot  find  symbol  expected  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0  ||  expected.length  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=  0  ||  expected.length  ==  0)  {	  if(input.available()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  expected	9	None	replace
77	[BUG]  [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input!=  null  ||  input.available()  {  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input!=  null  ||  input.available()  ==  0)  {  if(input!=  null  ||  input.available()  {  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input!=    null    ||    input.available()    ==    0)    {    if(input!=  null  ||  input.available()  {  0)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
78	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length  ==  0)  {  [CE]  cannot  find  symbol  length  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.length  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input  ==  null  ||  input.length  ==  0)  {	  if(input    ==    null    ||    input.available()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	6	None	replace
79	[BUG]  [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  {  null  ||  input.available()  ==  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input  ==  null  ||  input.available()  ==  0)  {  if(input  {  null  ||  input.available()  ==  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input    ==    null    ||    input.available()    ==    0)    {    if(input  {  null  ||  input.available()  ==  0)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
80	[BUG]  [BUGGY]  if(input.available()!=  0)  {  if(Input.available()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()!=  0)  {  if(Input.available()!=  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()!=    0)    {    if(Input.available()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
81	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(Input.available()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  if(Input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    if(Input.available()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
82	[BUG]  [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  <  return  null;  [CE]  generics  are  not  supported  in  -source  1.4  [FE]      AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  if(input.available()  >  0)  <  return  null;  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    if(input.available()  >  0)  <  return  null;	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	add
83	[BUG]  [BUGGY]  if(input.available()  >  0)  {  InputStream  input  =  input.available()  >  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  expected.length;  i++)  {  if  (expected[i]  !=  realized[i])  {  throw  new  IOException(   "invalid  header     "  +  new  String(realized));  }  }  }      [BUGGY]  if(input.available()  >  0)  {  InputStream  input  =  input.available()  >  0)  {  [BUGGY]    return  null;  }  if  (offset  %  2  !=  0)  {  read();  }  final  byte[]  name  =  new  byte[16];  final  byte[]  lastmodified  =  new  byte[12];  final  byte[]  userid  =  new  byte[6];  final  byte[]  groupid  =  new  byte[6];  [CLASS]  ArArchiveInputStream  [METHOD]  getNextArEntry  [RETURN_TYPE]  ArArchiveEntry  [VARIABLES]  byte[]  expected  filemode  groupid  lastmodified  length  name  realized  userid  boolean  closed  InputStream  input  pInput  long  offset  int  i  read  	projects/Compress2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java	0.7071067811865475	79	79	1	replace	if(input.available()    >    0)    {    InputStream  input  =  input.available()  >  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
