bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes  - ";  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes  - ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes  - ";	  return    writer.toString()    +   "    -   ";    	non-compiled	[CE]  <identifier>  expected	57	None	replace
2	[BUG]  [BUGGY]  return  writer.toString()  + ".  - ";  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ".  - ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ".  - ";	  return    writer.toString()    +   "    -   ";    	non-compiled	[CE]  <identifier>  expected	57	None	replace
3	[BUG]  [BUGGY]  return  writer.toString()  + ",  - ";  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  - ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  - ";	  return    writer.toString()    +   "    -   ";    	non-compiled	[CE]  <identifier>  expected	57	None	replace
4	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  <identifier>  expected	23	None	replace
5	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
6	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
7	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQu  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQu  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQu	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
8	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  4);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  4);	  StringWriter    writer    =    new    StringWriter(str.length());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
9	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  3);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  3);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  3);	  StringWriter    writer    =    new    StringWriter(str.length());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
10	[BUG]  [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
11	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  }	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
12	[BUG]  [BUGGY]  String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
13	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
14	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
15	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  writer.append(  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  writer.append(	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
16	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  writer.append(cSV_DELIMITER,  str.toCharArray());  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  writer.append(cSV_DELIMITER,  str.toCharArray());  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  writer.append(cSV_DELIMITER,  str.toCharArray());  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
17	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
18	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
19	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
20	[BUG]  [BUGGY]  Character(cSV_DELIMITER)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(cSV_DELIMITER)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(cSV_DELIMITER)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
21	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
22	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  cr.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  cr.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  cr.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
23	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QU    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QU    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QU  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QU  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QU	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
29	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
30	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
31	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
32	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
33	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
34	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
35	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
36	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
37	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
38	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
39	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  ==  0)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  0)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
40	[BUG]  [BUGGY]  String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(cSV_DELIMITER.equals(str))    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
41	[BUG]  [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(cSV_DELIMITER.equals(str))    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
42	[BUG]  [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_DELIMITER  =  str.toCharArray();	  if(cSV_DELIMITER.equals(str))    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
43	[BUG]  [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length()    -    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
44	[BUG]  [BUGGY]  Writer  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Writer  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Writer  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    -    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
45	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str.length()    ==    2    ||    escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
46	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str.length()    ==    2    ||    escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
47	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQu  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQu  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQu	  if(str.length()    ==    2    ||    escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
48	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
49	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
50	[BUG]  [BUGGY]  return  writer.toString()  + ":   "+str.substring(0,  str.length());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ":   "+str.substring(0,  str.length());  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ":   "+str.substring(0,  str.length());	  return    writer.toString()    +   ":   "+str.substring(0,    str.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
51	[BUG]  [BUGGY]  return  writer.toString()  + ",:   "+str.substring(0,  str.length());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",:   "+str.substring(0,  str.length());  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",:   "+str.substring(0,  str.length());	  return    writer.toString()    +   ":   "+str.substring(0,    str.length()    -    2);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
52	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString(str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString(str,  escapeSingleQuotes);  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  return  writer.toString(str,  escapeSingleQuotes);  }	  return    writer.toString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
53	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString(str,  escapeSingleQuotes);  }  else  {  return  writer.toString();  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString(str,  escapeSingleQuotes);  }  else  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  return  writer.toString(str,  escapeSingleQuotes);  }  else  {  return  writer.toString();  }	  return    writer.toString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
54	[BUG]  [BUGGY]  return  writer.toString(str,  escapeSingleQuotes,  0);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString(str,  escapeSingleQuotes,  0);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString(str,  escapeSingleQuotes,  0);	  return    writer.toString(str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
55	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  writer.append(cSV_QUOTE_STR[  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  writer.append(cSV_QUOTE_STR[  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  writer.append(cSV_QUOTE_STR[	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
56	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSSV  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSSV  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSSV	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  Annotation  <  String>  escapeSingleQuotes)  {  if(str  ==  null)  {  return  writer.toString();  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Annotation  <  String>  escapeSingleQuotes)  {  if(str  ==  null)  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Annotation  <  String>  escapeSingleQuotes)  {  if(str  ==  null)  {  return  writer.toString();  }	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
59	[BUG]  [BUGGY]  Annotation  <  String>  escapeSingleQuotes)  {  if(str  ==  null  ||  str.length()  ==  0)  {  return  writer.toString();  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Annotation  <  String>  escapeSingleQuotes)  {  if(str  ==  null  ||  str.length()  ==  0)  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Annotation  <  String>  escapeSingleQuotes)  {  if(str  ==  null  ||  str.length()  ==  0)  {  return  writer.toString();  }	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
60	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscapeSingleQuotes(writer,  escapeSingleQuotes);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  aughtExceptionHandler.handleEscapeSingleQuotes(writer,  escapeSingleQuotes);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	aughtExceptionHandler.handleEscapeSingleQuotes(writer,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
61	[BUG]  [BUGGY]  Annotation  <  String>  escapeSingleQuotes)  {  if(str!=  null)  {  return  writer.toString();  }  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Annotation  <  String>  escapeSingleQuotes)  {  if(str!=  null)  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Annotation  <  String>  escapeSingleQuotes)  {  if(str!=  null)  {  return  writer.toString();  }	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
62	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER).append('n',  escapeSingleQuotes);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_DELIMITER).append('n',  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER).append('n',  escapeSingleQuotes);	  reader.append(cSV_DELIMITER).append('n');    	non-compiled	[CE]  <identifier>  expected	91	None	replace
63	[BUG]  [BUGGY]  writer.append(cSV_DELIMITER).append('n');  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  writer.append(cSV_DELIMITER).append('n');  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	writer.append(cSV_DELIMITER).append('n');	  reader.append(cSV_DELIMITER).append('n');    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
64	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
65	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
66	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
67	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR  =  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR  =  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR  =	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0,    len    =    str.length();    i    <    len;    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
68	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0,    len    =    str.length();    i    <    len;    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
69	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0,    len    =    str.length();    i    <    len;    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
70	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.getQuotedCharArray();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.getQuotedCharArray();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.getQuotedCharArray();	  char[]    CSV_QUOTE_STR    =    str.getQuotedCharArray();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
71	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.getQuotedCharArray();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.getQuotedCharArray();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  writer.getQuotedCharArray();	  char[]    CSV_QUOTE_STR    =    str.getQuotedCharArray();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
72	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
73	[BUG]  [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length());    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
74	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str!=  null)  {  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str!=  null)  {  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str!=  null)  {  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str!=    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
75	[BUG]  [BUGGY]  if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str!=    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
76	[BUG]  [BUGGY]  if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str!=    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
77	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str!=  null)  {  writer  =  new  StringWriter(str.length());  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str!=  null)  {  writer  =  new  StringWriter(str.length());  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str!=  null)  {  writer  =  new  StringWriter(str.length());  }	  if(str!=    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
78	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
79	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
82	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
83	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
84	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER,  str);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_DELIMITER,  str);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER,  str);	  reader.append(cSV_DELIMITER);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
85	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER  +  escapeSingleQuotes);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_DELIMITER  +  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER  +  escapeSingleQuotes);	  reader.append(cSV_DELIMITER);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
86	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER  +  str);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_DELIMITER  +  str);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER  +  str);	  reader.append(cSV_DELIMITER);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
87	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
88	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
89	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
90	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
91	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( ", ");  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( ", ");  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( ", ");  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
92	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('   ");  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('   ");  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('   ");  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
93	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n'    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
94	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n'    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
95	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  writer.toCharArray();	  char[]    CSV_QUOTE_STR    =    writer.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
96	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toString();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toString();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  writer.toString();	  char[]    CSV_QUOTE_STR    =    writer.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
98	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
99	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
100	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
101	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
102	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  }	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
103	[BUG]  [BUGGY]  return  writer.toString()  + ", ";  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ", ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ", ";	  return    writer.toString()    +   "       ";    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
104	[BUG]  [BUGGY]  return  writer.toString()  +  escapeJavaStyleString(str);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  escapeJavaStyleString(str);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  escapeJavaStyleString(str);	  return    writer.toString()    +    escapeJavaStyleString;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
105	[BUG]  [BUGGY]  return  writer.toString()  /  escapeJavaStyleString;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  /  escapeJavaStyleString;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  /  escapeJavaStyleString;	  return    writer.toString()    +    escapeJavaStyleString;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(str!=    null)    {    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
107	[BUG]  [BUGGY]  nisipToString(writer.toString());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  nisipToString(writer.toString());  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	nisipToString(writer.toString());	  if(str!=    null)    {    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
108	[BUG]  [BUGGY]  aughtException.printStackTrace();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  aughtException.printStackTrace();  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	aughtException.printStackTrace();	  if(str!=    null)    {    return    writer.toString();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
109	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
110	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
111	[BUG]  [BUGGY]  tries  {  return  writer.toString(str);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  tries  {  return  writer.toString(str);  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	tries  {  return  writer.toString(str);  }	  if(escapeSingleQuotes)    {    return    writer.toString(str);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
112	[BUG]  [BUGGY]  allowEscapeSingleQuotes(writer,  escapeSingleQuotes);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  allowEscapeSingleQuotes(writer,  escapeSingleQuotes);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	allowEscapeSingleQuotes(writer,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    return    writer.toString(str);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
113	[BUG]  [BUGGY]  nisipToString(str)  {  return  writer.toString(str);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  nisipToString(str)  {  return  writer.toString(str);  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	nisipToString(str)  {  return  writer.toString(str);  }	  if(escapeSingleQuotes)    {    return    writer.toString(str);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
114	[BUG]  [BUGGY]  allowEscapeSingleQuotes(writer.toString(str),  escapeSingleQuotes);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  allowEscapeSingleQuotes(writer.toString(str),  escapeSingleQuotes);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	allowEscapeSingleQuotes(writer.toString(str),  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    return    writer.toString(str);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
115	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
116	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE    	non-compiled	[CE]  <identifier>  expected	3	None	replace
117	[BUG]  [BUGGY]  safeEscapeSingleQuotes())  {  if(str  ==  null)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  safeEscapeSingleQuotes())  {  if(str  ==  null)  {  return  null;  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	safeEscapeSingleQuotes())  {  if(str  ==  null)  {  return  null;  }	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
118	[BUG]  [BUGGY]  safeEscapeSingleQuotes())  {  if(str  ==  null)return  null;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  safeEscapeSingleQuotes())  {  if(str  ==  null)return  null;  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	safeEscapeSingleQuotes())  {  if(str  ==  null)return  null;  }	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
119	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscapeSingleQuotes(str,  escapeSingleQuotes);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  aughtExceptionHandler.handleEscapeSingleQuotes(str,  escapeSingleQuotes);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	aughtExceptionHandler.handleEscapeSingleQuotes(str,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    null;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
120	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
121	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  /  2  +  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
122	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str.length());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str.length());  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str.length());	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
123	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR    	non-compiled	[CE]  <identifier>  expected	79	None	replace
124	[BUG]  [BUGGY]  return  writer.toString()  + ",  - "  +  CSV_QUOTE_STR;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  - "  +  CSV_QUOTE_STR;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  - "  +  CSV_QUOTE_STR;	  return    writer.toString()    +   "    -   "    +    CSV_QUOTE_STR;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
125	[BUG]  [BUGGY]  return  writer.toString()  + ".  - "  +  CSV_QUOTE_STR;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ".  - "  +  CSV_QUOTE_STR;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ".  - "  +  CSV_QUOTE_STR;	  return    writer.toString()    +   "    -   "    +    CSV_QUOTE_STR;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	87	None	replace
126	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
127	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	  if(escapeSingleQuotes)    {    String[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
128	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  if(escapeSingleQuotes)    {    String[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
129	[BUG]  [BUGGY]  Character(cSV_DELIMITER)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(cSV_DELIMITER)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(cSV_DELIMITER)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
130	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
131	[BUG]  [BUGGY]  if(!escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(!escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(!escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
132	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
133	[BUG]  [BUGGY]  return  writer.toString()  + ",n "  +  str.length()  *  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",n "  +  str.length()  *  2;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",n "  +  str.length()  *  2;	  return    writer.toString()    +   ",       "    +    str.length()    *    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
134	[BUG]  [BUGGY]  return  writer.toString()  + ",   "  +  str.length()  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",   "  +  str.length()  /  2;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",   "  +  str.length()  /  2;	  return    writer.toString()    +   ",       "    +    str.length()    *    2;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
135	[BUG]  [BUGGY]  return  writer.toString()  + ",null "  +  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",null "  +  str.length();  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",null "  +  str.length();	  return    writer.toString()    +   ",n   "    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
136	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes: "  +  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes: "  +  str.length();  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes: "  +  str.length();	  return    writer.toString()    +   ",n   "    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
137	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  }	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
138	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
139	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
140	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
141	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
142	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
143	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  writer.append('n');  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
144	[BUG]  [BUGGY]  writer.append('n');  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  writer.append('n');  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	writer.append('n');	  if(escapeSingleQuotes)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
145	[BUG]  [BUGGY]  reader.append('n');  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append('n');  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append('n');	  if(escapeSingleQuotes)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
146	[BUG]  [BUGGY]  Annotations.isEmpty(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Annotations.isEmpty(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Annotations.isEmpty(escapeSingleQuotes))  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
147	[BUG]  [BUGGY]  return  writer.toString()  + ".,  escapeSingleQuotes= ";  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ".,  escapeSingleQuotes= ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ".,  escapeSingleQuotes= ";	  return    writer.toString()    +   ",    escapeSingleQuotes=   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
148	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes, ",  +  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes, ",  +  str.length();  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes, ",  +  str.length();	  return    writer.toString()    +   ",    escapeSingleQuotes,       "    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
149	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str    ==    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
150	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length());  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length());  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length());  }	  if(str    ==    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
151	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length()  *  2);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length()  *  2);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str  ==  null)  {  writer  =  new  StringWriter(str.length()  *  2);  }	  if(str    ==    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
152	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(','    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
153	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(','  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(','  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(','	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(','    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
154	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER).append( "null ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_DELIMITER).append( "null ");  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER).append( "null ");	  reader.append(cSV_DELIMITER).append(   "n   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
155	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER).append( ",   ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_DELIMITER).append( ",   ");  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER).append( ",   ");	  reader.append(cSV_DELIMITER).append(   "n   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
156	[BUG]  [BUGGY]  if(writer  ==  null)  {  return  writer.toString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(writer  ==  null)  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(writer  ==  null)  {  return  writer.toString();  }	  if(writer!=    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
157	[BUG]  [BUGGY]  ||  writer!=  null)  {  return  writer.toString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  writer!=  null)  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  writer!=  null)  {  return  writer.toString();  }	  if(writer!=    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
158	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  writer.append(cSV_QUOTE_STR[i]  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  writer.append(cSV_QUOTE_STR[i]  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  writer.append(cSV_QUOTE_STR[i]	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
159	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
160	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  ==  0)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  0)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
161	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(escapeSingleQuotes.equals(cSV_QUOTE))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
162	[BUG]  [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(escapeSingleQuotes.equals(cSV_QUOTE))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
163	[BUG]  [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(escapeSingleQuotes.equals(cSV_QUOTE))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
164	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
165	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
166	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }	  Character[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	83	None	replace
167	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  writer.append(CSV_QUOTE_STR[  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  writer.append(CSV_QUOTE_STR[  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  writer.append(CSV_QUOTE_STR[	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
168	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
169	[BUG]  [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
170	[BUG]  [BUGGY]  Character[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
171	[BUG]  [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  return  null;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  return  null;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
172	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
173	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes ",  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes ",  str);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes ",  str);	  return    writer.toString()    +   ",    escapeSingleQuotes   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
174	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes: ";  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes: ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes: ";	  return    writer.toString()    +   ",    escapeSingleQuotes   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
175	[BUG]  [BUGGY]  if(escapeSingleQuotes  ||  escapeSingleQuotes)  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes  ||  escapeSingleQuotes)  {  return  writer;  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes  ||  escapeSingleQuotes)  {  return  writer;  }	  if(escapeSingleQuotes)    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
176	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  return  writer;  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  return  writer;  }	  if(escapeSingleQuotes)    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
177	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  writer.substring(0,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  return  writer.substring(0,  escapeSingleQuotes);  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  return  writer.substring(0,  escapeSingleQuotes);  }	  if(escapeSingleQuotes)    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
178	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
179	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
180	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
181	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toString();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toString();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toString();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
182	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/'  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/'  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/'	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
183	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
184	[BUG]  [BUGGY]  return  writer.toString()  +  str,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str,  0);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str,  0);	  return    writer.toString()    +    escapeSingleQuotes,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
185	[BUG]  [BUGGY]  return  writer.toString()  /  escapeSingleQuotes,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  /  escapeSingleQuotes,  0);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  /  escapeSingleQuotes,  0);	  return    writer.toString()    +    escapeSingleQuotes,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
186	[BUG]  [BUGGY]  return  writer.toString()  +  escapeSingleQuotes,  0,  str.length());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  escapeSingleQuotes,  0,  str.length());  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  escapeSingleQuotes,  0,  str.length());	  return    writer.toString()    +    escapeSingleQuotes,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
187	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
188	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
189	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
190	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QU  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QU  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QU	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
191	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUO  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUO  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUO	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
192	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
193	[BUG]  [BUGGY]  return  writer.toString()  +  str.length()  +  escapeSingleQuotes;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str.length()  +  escapeSingleQuotes;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.length()  +  escapeSingleQuotes;	  return    writer.toString()    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
194	[BUG]  [BUGGY]  return  writer.toString()  +  str.length()  *  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str.length()  *  2;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.length()  *  2;	  return    writer.toString()    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
195	[BUG]  [BUGGY]  return  writer.toString()  +  str.length()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str.length()  -  1;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.length()  -  1;	  return    writer.toString()    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
196	[BUG]  [BUGGY]  return  writer.toString()  +  str.substring(0,  str.length()  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str.substring(0,  str.length()  -  2);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.substring(0,  str.length()  -  2);	  return    writer.toString()    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
197	[BUG]  [BUGGY]  return  writer.toString()  +  str.substring(0,  str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str.substring(0,  str.length()  -  1);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.substring(0,  str.length()  -  1);	  return    writer.toString()    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
198	[BUG]  [BUGGY]  return  writer.toString()  +  str.substring(1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str.substring(1);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.substring(1);	  return    writer.toString()    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
199	[BUG]  [BUGGY]  return  writer.toString()  +  str.trim();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str.trim();  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.trim();	  return    writer.toString()    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
200	[BUG]  [BUGGY]  CharSequence  <?>  writer  =  new  CharSequence(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  CharSequence  <?>  writer  =  new  CharSequence(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	CharSequence  <?>  writer  =  new  CharSequence(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
201	[BUG]  [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
202	[BUG]  [BUGGY]  CharSequence  <  String>  writer  =  new  CharSequence(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  CharSequence  <  String>  writer  =  new  CharSequence(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	CharSequence  <  String>  writer  =  new  CharSequence(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
203	[BUG]  [BUGGY]  CharSequence  <?>  writer  =  new  CharSequence(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  CharSequence  <?>  writer  =  new  CharSequence(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	CharSequence  <?>  writer  =  new  CharSequence(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
204	[BUG]  [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
205	[BUG]  [BUGGY]  if(str!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
206	[BUG]  [BUGGY]  return  writer.toString()  *  escapeSingleQuotes;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  *  escapeSingleQuotes;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  *  escapeSingleQuotes;	  return    writer.toString()    /    escapeSingleQuotes;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
207	[BUG]  [BUGGY]  return  writer.toString()  /  CSV_DELIMITER;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  /  CSV_DELIMITER;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  /  CSV_DELIMITER;	  return    writer.toString()    /    escapeSingleQuotes;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
208	[BUG]  [BUGGY]  return  writer.toString()  >  escapeSingleQuotes;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  >  escapeSingleQuotes;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  >  escapeSingleQuotes;	  return    writer.toString()    /    escapeSingleQuotes;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
209	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  return  writer.toString();  }	  return    writer.toString(escapeSingleQuotes);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
210	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString();  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString();  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  return  writer.toString();  }  else  {  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  return    writer.toString(escapeSingleQuotes);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
211	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
212	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
213	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
214	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toString();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toString();	  String[]    CSV_QUOTE_STR    =    str.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
215	[BUG]  [BUGGY]  return  writer.toString()  + ",null ",  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",null ",  escapeSingleQuotes);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",null ",  escapeSingleQuotes);	  return    writer.toString()    +   ",null   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
216	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
217	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
218	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
219	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
220	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  if(escapeSingleQuotes)    {    String    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
221	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	  if(escapeSingleQuotes)    {    String    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
222	[BUG]  [BUGGY]  return  writer.toString()  /  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  /  str.length();  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  /  str.length();	  return    writer.toString()    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
223	[BUG]  [BUGGY]  return  writer.toString()  +  str.charAt(str.length()  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  +  str.charAt(str.length()  -  1);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.charAt(str.length()  -  1);	  return    writer.toString()    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
224	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes= "+escapeSingleQuotes;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes= "+escapeSingleQuotes;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes= "+escapeSingleQuotes;	  return    writer.toString()    +   ",    escapeSingleQuotes=   ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
225	[BUG]  [BUGGY]  escapeSingleQuotes  =  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  escapeSingleQuotes  =  false;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	escapeSingleQuotes  =  false;	  if(escapeSingleQuotes)    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
226	[BUG]  [BUGGY]  return  writer.toString()  + ":   "+str.substring(0,  str.length()  *  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ":   "+str.substring(0,  str.length()  *  1);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ":   "+str.substring(0,  str.length()  *  1);	  return    writer.toString()    +   ":   "+str.substring(0,    str.length()    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
227	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
228	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
229	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  nu  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  nu  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  nu	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
230	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscapeSingleQuotes(writer);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  aughtExceptionHandler.handleEscapeSingleQuotes(writer);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	aughtExceptionHandler.handleEscapeSingleQuotes(writer);	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
231	[BUG]  [BUGGY]  aughtExceptionHandler.handleEscapeSingleQuotes(writer,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  aughtExceptionHandler.handleEscapeSingleQuotes(writer,  str);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	aughtExceptionHandler.handleEscapeSingleQuotes(writer,  str);	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
232	[BUG]  [BUGGY]  combineStyle(writer,  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  combineStyle(writer,  escapeSingleQuotes);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	combineStyle(writer,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
233	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
234	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
235	[BUG]  [BUGGY]  safeEscapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  safeEscapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	safeEscapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
236	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str!=  null)  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(str!=  null)  {  return  null;  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str!=  null)  {  return  null;  }	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
237	[BUG]  [BUGGY]  return  writer.toString()  /  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  /  str;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  /  str;	  return    writer.toString()    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
238	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUO  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUO  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUO	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0,    len    =    str.length();    i    <    len;    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
239	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0,    len    =    str.length();    i    <    len;    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
240	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
241	[BUG]  [BUGGY]  reader.append(cSV_QUOTE);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_QUOTE);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_QUOTE);	  reader.append(cSV_DELIMITER);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
242	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.app  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.app  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.app	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
243	[BUG]  [BUGGY]  return  writer.toString()  -  escapeSingleQuotes,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  -  escapeSingleQuotes,  0);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  -  escapeSingleQuotes,  0);	  return    writer.toString()    +    escapeSingleQuotes,    0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
244	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE_STR  =  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE_STR  =  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE_STR  =	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
245	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
246	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
247	[BUG]  [BUGGY]  if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length()    -    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
248	[BUG]  [BUGGY]  if(escapeSingleQuotes!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str!=    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
249	[BUG]  [BUGGY]  if(escapeSingleQuotes  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str!=    null)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
250	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "   ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "   ");  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "   ");  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
251	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER).append('/');  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_DELIMITER).append('/');  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER).append('/');	  reader.append(cSV_DELIMITER).append('n');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	91	None	replace
252	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  str);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
253	[BUG]  [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
254	[BUG]  [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
255	[BUG]  [BUGGY]  CharTypes.Escaped(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  CharTypes.Escaped(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	CharTypes.Escaped(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
256	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
257	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
258	[BUG]  [BUGGY]  return  writer.toString()  + ",: "  +  escapeSingleQuotes;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",: "  +  escapeSingleQuotes;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",: "  +  escapeSingleQuotes;	  return    writer.toString()    +   ",:   "    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
259	[BUG]  [BUGGY]  return  writer.toString()  + ",:n "  +  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",:n "  +  str;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",:n "  +  str;	  return    writer.toString()    +   ",:   "    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
260	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
261	[BUG]  [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
262	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
263	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
264	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
265	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
266	[BUG]  [BUGGY]  return  writer.toString()  /  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  /  2;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  /  2;	  return    writer.toString()    /    escapeSingleQuotes;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
267	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str  ==  null?  null  :  str.toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str  ==  null?  null  :  str.toCharArray();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str  ==  null?  null  :  str.toCharArray();	  String[]    CSV_QUOTE_STR    =    str.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
268	[BUG]  [BUGGY]  return  writer.toString()  + "/ ";  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + "/ ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + "/ ";	  return    writer.toString()    +   "       ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
269	[BUG]  [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
270	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
271	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
272	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
273	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
274	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n'    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
275	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n'    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
276	[BUG]  [BUGGY]  MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
277	[BUG]  [BUGGY]  MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
278	[BUG]  [BUGGY]  MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	MutableStringUtils.checkState(escapeSingleQuotes, " ")  {  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
279	[BUG]  [BUGGY]  escapeSingleQuotes  =  writer.toString(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  escapeSingleQuotes  =  writer.toString(str);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	escapeSingleQuotes  =  writer.toString(str);	  if(escapeSingleQuotes)    {    return    writer.toString(str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
280	[BUG]  [BUGGY]  escapeSingleQuotes  =  writer.toString(escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  escapeSingleQuotes  =  writer.toString(escapeSingleQuotes);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	escapeSingleQuotes  =  writer.toString(escapeSingleQuotes);	  if(escapeSingleQuotes)    {    return    writer.toString(str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
281	[BUG]  [BUGGY]  return  writer.toString()  + ",null ",  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",null ",  str.length();  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",null ",  str.length();	  return    writer.toString()    +   ",n   "    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
282	[BUG]  [BUGGY]  if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str.length()    ==    2    ||    escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
283	[BUG]  [BUGGY]  if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  0);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  0);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  0);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str.length()    ==    2    ||    escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
284	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
285	[BUG]  [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
286	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
287	[BUG]  [BUGGY]  nisipToString(writer.charAt(0))  {  if(escapeSingleQuotes)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  nisipToString(writer.charAt(0))  {  if(escapeSingleQuotes)  {  writer.append('n');  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	nisipToString(writer.charAt(0))  {  if(escapeSingleQuotes)  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
288	[BUG]  [BUGGY]  nisipToJavaStyle(writer,  escapeSingleQuotes)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  nisipToJavaStyle(writer,  escapeSingleQuotes)  {  writer.append('n');  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	nisipToJavaStyle(writer,  escapeSingleQuotes)  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
289	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
290	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
291	[BUG]  [BUGGY]  return  writer.toString()  + ",  -n "  +  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  -n "  +  str;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  -n "  +  str;	  return    writer.toString()    +   ",    -   "    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
292	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  }	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
293	[BUG]  [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_DELIMITER  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
294	[BUG]  [BUGGY]  return  writer.toString()  + ":n "  +  escapeSingleQuotes;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ":n "  +  escapeSingleQuotes;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ":n "  +  escapeSingleQuotes;	  return    writer.toString()    +   ":   "    +    escapeSingleQuotes;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
295	[BUG]  [BUGGY]  if(cSV_DELIMITER  ==  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER  ==  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER  ==  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
296	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
297	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
298	[BUG]  [BUGGY]  if(str  ==  null)  {  return  writer.toString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str  ==  null)  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str  ==  null)  {  return  writer.toString();  }	  if(str!=    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
299	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toLowerCase();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toLowerCase();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toLowerCase();	  String[]    CSV_QUOTE_STR    =    str.toCharArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
300	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes,  escapeSingleQuotes);	  StringWriter    writer    =    new    StringWriter(str.length()    *    2    +    escapeSingleQuotes);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
301	[BUG]  [BUGGY]  reader!=  null?  writer.toString()  : "null ";  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader!=  null?  writer.toString()  : "null ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader!=  null?  writer.toString()  : "null ";	  if(writer!=    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
302	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
303	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n'    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
304	[BUG]  [BUGGY]  ++escapeSingleQuotes;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ++escapeSingleQuotes;  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	++escapeSingleQuotes;	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
305	[BUG]  [BUGGY]  return  writer.toString()  + ",negative "  +  str.length();  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",negative "  +  str.length();  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",negative "  +  str.length();	  return    writer.toString()    +   ",n   "    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
306	[BUG]  [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
307	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUO  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUO  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUO	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
308	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QU  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QU  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QU	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
309	[BUG]  [BUGGY]  Character[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(escapeSingleQuotes.equals(cSV_QUOTE))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
310	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	93	None	replace
311	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
312	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
313	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0,    len    =    str.length();    i    <    len;    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
314	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUO  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUO  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUO	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0,    len    =    str.length();    i    <    len;    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
315	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  char[]  CSV_QUOTE_STR  =  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0,    len    =    str.length();    i    <    len;    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
316	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
317	[BUG]  [BUGGY]  if(writer!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(writer!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(writer!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
318	[BUG]  [BUGGY]  [Delete]  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  [Delete]  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	[Delete]	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
319	[BUG]  [BUGGY]  >>  [Delete]  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  >>  [Delete]  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	>>  [Delete]	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
320	[BUG]  [BUGGY]  ==  [Delete]  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ==  [Delete]  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	==  [Delete]	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
321	[BUG]  [BUGGY]  {  [Delete]  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  {  [Delete]  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	{  [Delete]	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
322	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
323	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  writer.append(str.toCharArray());  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  writer.append(str.toCharArray());  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  writer.append(str.toCharArray());  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
324	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
325	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
326	[BUG]  [BUGGY]  Character(cSV_DELIMITER,  str))  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(cSV_DELIMITER,  str))  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(cSV_DELIMITER,  str))  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
327	[BUG]  [BUGGY]  Character(cSV_DELIMITER,  str))  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(cSV_DELIMITER,  str))  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(cSV_DELIMITER,  str))  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
328	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
329	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()  *  2;  ++i)  {  writer.append(',');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()  *  2;  ++i)  {  writer.append(',');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()  *  2;  ++i)  {  writer.append(',');  }	  if(escapeSingleQuotes)    {    String[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
330	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
331	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
332	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	96	None	replace
333	[BUG]  [BUGGY]  if(cSV_DELIMITER.equals(escapeSingleQuotes))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  nu  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER.equals(escapeSingleQuotes))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  nu  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER.equals(escapeSingleQuotes))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  nu	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
334	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	97	None	replace
335	[BUG]  [BUGGY]  return  writer.toString()  + ". "  +  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ". "  +  str;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ". "  +  str;	  return    writer.toString()    +   ".    -   "    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
336	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()  *  2;  ++i)  {  writer.append(  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()  *  2;  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()  *  2;  ++i)  {  writer.append(	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
337	[BUG]  [BUGGY]  Character[]  CSV_DELIMITER  =  Character.toLowerCase(cSV_QUOTE);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_DELIMITER  =  Character.toLowerCase(cSV_QUOTE);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_DELIMITER  =  Character.toLowerCase(cSV_QUOTE);	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
338	[BUG]  [BUGGY]  Character(cSV_DELIMITER).charAt(escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(cSV_DELIMITER).charAt(escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(cSV_DELIMITER).charAt(escapeSingleQuotes);	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
339	[BUG]  [BUGGY]  Character[]  CSV_DELIMITER  =  Character.toLowerCase(cSV_QUOTE).toCharArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_DELIMITER  =  Character.toLowerCase(cSV_QUOTE).toCharArray();  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_DELIMITER  =  Character.toLowerCase(cSV_QUOTE).toCharArray();	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
340	[BUG]  [BUGGY]  Character[]  CSV_DELIMITER  =  Character.toUpperCase(cSV_QUOTE);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_DELIMITER  =  Character.toUpperCase(cSV_QUOTE);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_DELIMITER  =  Character.toUpperCase(cSV_QUOTE);	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	36	None	replace
341	[BUG]  [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  >  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length()    -    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
342	[BUG]  [BUGGY]  if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  2)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  StringWriter    writer    =    new    StringWriter(str.length()    -    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
343	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes, "  +  str.length()  *  2;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes, "  +  str.length()  *  2;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes, "  +  str.length()  *  2;	  return    writer.toString()    +   ",    escapeSingleQuotes,       "    +    str.length();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
344	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(cSV_DELIMITER!=  null)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
345	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
346	[BUG]  [BUGGY]  Character[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
347	[BUG]  [BUGGY]  if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n'  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n'  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n'	  if(cSV_DELIMITER.equals(str))    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
348	[BUG]  [BUGGY]  if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('	  if(cSV_DELIMITER.equals(str))    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
349	[BUG]  [BUGGY]  return  writer.toString()  + ". ";  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ". ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ". ";	  return    writer.toString()    +   "       ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
350	[BUG]  [BUGGY]  return  writer.toString()  + "/. ";  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + "/. ";  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + "/. ";	  return    writer.toString()    +   "       ";    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
351	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "native ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "native ");  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "native ");  }	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
352	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "null ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "null ");  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "null ");  }	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n       ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
353	[BUG]  [BUGGY]  {  return  writer.toString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	{  return  writer.toString();  }	  if(str!=    null)    {    return    writer.toString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
354	[BUG]  [BUGGY]  Annotations.isEmpty(str)&&  escapeSingleQuotes)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Annotations.isEmpty(str)&&  escapeSingleQuotes)  {  writer.append('n');  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Annotations.isEmpty(str)&&  escapeSingleQuotes)  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
355	[BUG]  [BUGGY]  Annotations.isEscaped(writer,  escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Annotations.isEscaped(writer,  escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Annotations.isEscaped(writer,  escapeSingleQuotes))  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
356	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes: "  +  escapeSingleQuotes;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes: "  +  escapeSingleQuotes;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes: "  +  escapeSingleQuotes;	  return    writer.toString()    +   ":   "    +    escapeSingleQuotes;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
357	[BUG]  [BUGGY]  return  writer.toString()  + ": "  +  escapeJavaStyleString;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ": "  +  escapeJavaStyleString;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ": "  +  escapeJavaStyleString;	  return    writer.toString()    +   ":   "    +    escapeSingleQuotes;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
358	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
359	[BUG]  [BUGGY]  if(cSV_DELIMITER  ==  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER  ==  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER  ==  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
360	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    String[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
361	[BUG]  [BUGGY]  writer.append(cSV_DELIMITER);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  writer.append(cSV_DELIMITER);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	writer.append(cSV_DELIMITER);	  reader.append(cSV_DELIMITER);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	90	None	replace
362	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER).append( "  - ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  reader.append(cSV_DELIMITER).append( "  - ");  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER).append( "  - ");	  reader.append(cSV_DELIMITER).append(   "n   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	92	None	replace
363	[BUG]  [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(','    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
364	[BUG]  [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	boolean  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(','    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	94	None	replace
365	[BUG]  [BUGGY]  if(cSV_DELIMITER.equals(escapeSingleQuotes))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER.equals(escapeSingleQuotes))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER.equals(escapeSingleQuotes))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
366	[BUG]  [BUGGY]  if(cSV_SEARCH_CHARS!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_SEARCH_CHARS!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_SEARCH_CHARS!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	  if(cSV_DELIMITER!=    null)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
367	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  writer.append(cSV_DELIMITER,  str.toCharArray());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  writer.append(cSV_DELIMITER,  str.toCharArray());  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  writer.append(cSV_DELIMITER,  str.toCharArray());	  &&    escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
368	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    writer.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
369	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  0)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str.length()    ==    2    ||    escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
370	[BUG]  [BUGGY]  if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  0  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	  if(str.length()    ==    2    ||    escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
371	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	52	None	replace
372	[BUG]  [BUGGY]  return  writer.toString()  /  CSV_QUOTE_STR;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  /  CSV_QUOTE_STR;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  /  CSV_QUOTE_STR;	  return    writer.toString()    /    escapeSingleQuotes;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
373	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUO	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
374	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
375	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
376	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }	  if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(CSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
377	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
378	[BUG]  [BUGGY]  MutableStringUtils.checkState(escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  MutableStringUtils.checkState(escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	MutableStringUtils.checkState(escapeSingleQuotes);	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
379	[BUG]  [BUGGY]  combuteStructure(str,  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  combuteStructure(str,  escapeSingleQuotes);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	combuteStructure(str,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
380	[BUG]  [BUGGY]  MutableStringUtils.checkState(str.length()  >  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  MutableStringUtils.checkState(str.length()  >  0);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	MutableStringUtils.checkState(str.length()  >  0);	  if(escapeSingleQuotes)    {    StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
381	[BUG]  [BUGGY]  escapeSingleQuotes  |=  writer.toString(str);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  escapeSingleQuotes  |=  writer.toString(str);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	escapeSingleQuotes  |=  writer.toString(str);	  if(escapeSingleQuotes)    {    return    writer.toString(str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
382	[BUG]  [BUGGY]  escapeSingleQuotes)  {  return  writer.toString(str);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  escapeSingleQuotes)  {  return  writer.toString(str);  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	escapeSingleQuotes)  {  return  writer.toString(str);  }	  if(escapeSingleQuotes)    {    return    writer.toString(str);    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
383	[BUG]  [BUGGY]  if(str  ==  null  ||  escapeSingleQuotes)  {  return  writer.toString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(str  ==  null  ||  escapeSingleQuotes)  {  return  writer.toString();  }  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str  ==  null  ||  escapeSingleQuotes)  {  return  writer.toString();  }	  return    writer.toString(escapeSingleQuotes);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
384	[BUG]  [BUGGY]  return  writer.toString()  + ".,: "  +  str;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  return  writer.toString()  + ".,: "  +  str;  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ".,: "  +  str;	  return    writer.toString()    +   ",:   "    +    str;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
385	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  writer.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	  Character(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
386	[BUG]  [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  ||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	||  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length()	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    char[]    CSV_QUOTE_STR    =    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
387	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	  Character(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
388	[BUG]  [BUGGY]  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  aughtExceptionHandler(writer,  str,  escapeSingleQuotes);  [BUGGY]      }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	aughtExceptionHandler(writer,  str,  escapeSingleQuotes);	  if(escapeSingleQuotes)    {    if(str    ==    null)    {    return    null;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
389	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(C  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(C  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(C	  if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
390	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
391	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer	  if(cSV_DELIMITER!=    null)    {    if(escapeSingleQuotes)    {    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
392	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str,  str.length()  *  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);      [BUGGY]  StringWriter  writer  =  new  StringWriter(str,  str.length()  *  2);  [BUGGY]      return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str,  str.length()  *  2);	  StringWriter    writer    =    new    StringWriter(str.length());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
