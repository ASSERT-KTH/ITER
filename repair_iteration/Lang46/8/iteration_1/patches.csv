bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  	12	None	replace
7	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  writer.toCharArray();	      char[]    CSV_QUOTE_STR    =    str.toCharArray();    	non-compiled	[CE]  	15	None	replace
8	[BUG]  [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  String[]  CSV_QUOTE_STR  =  str.toCharArray();  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	String[]  CSV_QUOTE_STR  =  str.toCharArray();	      char[]    CSV_QUOTE_STR    =    str.toCharArray();    	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  char[]  CSV_QUOTE_STR  =  str.getQuotedCharArray();  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  char[]  CSV_QUOTE_STR  =  str.getQuotedCharArray();  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	char[]  CSV_QUOTE_STR  =  str.getQuotedCharArray();	      char[]    CSV_QUOTE_STR    =    str.toCharArray();    	non-compiled	[CE]  	15	None	replace
10	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  	19	None	replace
15	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  	19	None	replace
16	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('/');  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('/');    }    	non-compiled	[CE]  	19	None	replace
17	[BUG]  [BUGGY]  return  writer.toString()  + ",: "  +  str;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ",: "  +  str;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",: "  +  str;	  return    writer.toString()    +   ":   "    +    str;    	non-compiled	[CE]  	21	None	replace
18	[BUG]  [BUGGY]  return  writer.toString()  + ".: "  +  str;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ".: "  +  str;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ".: "  +  str;	  return    writer.toString()    +   ":   "    +    str;    	non-compiled	[CE]  	21	None	replace
19	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QU  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QU  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QU	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR);    }    	non-compiled	[CE]  	18	None	replace
20	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR);    }    	non-compiled	[CE]  	18	None	replace
21	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  	11	None	replace
23	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  String[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append(	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  	11	None	replace
24	[BUG]  [BUGGY]  return  writer.toString()  +  str;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  +  str;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str;	  return    writer.toString()    +    escapeSingleQuotes;    	non-compiled	[CE]  	13	None	replace
25	[BUG]  [BUGGY]  return  writer.toString()  /  escapeSingleQuotes;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  /  escapeSingleQuotes;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  /  escapeSingleQuotes;	  return    writer.toString()    +    escapeSingleQuotes;    	non-compiled	[CE]  	13	None	replace
26	[BUG]  [BUGGY]  return  writer.toString()  +  escapeSingleQuotes,  0);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  +  escapeSingleQuotes,  0);  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  escapeSingleQuotes,  0);	  return    writer.toString()    +    escapeSingleQuotes;    	non-compiled	[CE]  	13	None	replace
27	[BUG]  [BUGGY]  return  writer.toString(str,  escapeSingleQuotes);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString(str,  escapeSingleQuotes);  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString(str,  escapeSingleQuotes);	  return    writer.toString(str);    	non-compiled	[CE]  	14	None	replace
28	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString(str);  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  return  writer.toString(str);  }  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  return  writer.toString(str);  }	  return    writer.toString(str);    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  if(str!=  null)  {  return  writer.toString();  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(str!=  null)  {  return  writer.toString();  }  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str!=  null)  {  return  writer.toString();  }	  return    writer.toString(str);    	non-compiled	[CE]  	14	None	replace
30	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes ";  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes ";  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes ";	  return    writer.toString()    +   "n   ";    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  return  writer.toString()  + "   ";  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + "   ";  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + "   ";	  return    writer.toString()    +   "n   ";    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes= ";  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes= ";  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes= ";	  return    writer.toString()    +   "n   ";    	non-compiled	[CE]  	1	None	replace
33	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length());	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  /  2);  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  /  2);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  -  2);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "   ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "   ");  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "   ");  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length());  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  -  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR  =  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR  =  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0,  len  =  str.length();  i  <  len;  ++i)  {  char[]  CSV_QUOTE_STR  =	      	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE_STR  =  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE_STR  =  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  char[]  CSV_QUOTE_STR  =	      	non-compiled	[CE]  	4	None	replace
42	[BUG]  [BUGGY]  return  writer.toString()  + ": "+str.substring(0,  str.length()  -  1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ": "+str.substring(0,  str.length()  -  1);  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ": "+str.substring(0,  str.length()  -  1);	  return    writer.toString()    +   ":   "+str.length();    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  return  writer.toString()  + ": "+str.substring(0,  str.length()  -  2);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ": "+str.substring(0,  str.length()  -  2);  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ": "+str.substring(0,  str.length()  -  2);	  return    writer.toString()    +   ":   "+str.length();    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  return  writer.toString()  + ",  - "  +  str;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ",  - "  +  str;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  - "  +  str;	  return    writer.toString()    +   "    -   "    +    str;    	non-compiled	[CE]  	20	None	replace
45	[BUG]  [BUGGY]  return  writer.toString()  + ".  - "  +  str;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ".  - "  +  str;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ".  - "  +  str;	  return    writer.toString()    +   "    -   "    +    str;    	non-compiled	[CE]  	20	None	replace
46	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  return  writer.toString()  + ",n "  +  str.length();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ",n "  +  str.length();  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",n "  +  str.length();	  return    writer.toString()    +   ",   "    +    str.length();    	non-compiled	[CE]  	2	None	replace
50	[BUG]  [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes,   "  +  str.length();  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ",  escapeSingleQuotes,   "  +  str.length();  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",  escapeSingleQuotes,   "  +  str.length();	  return    writer.toString()    +   ",   "    +    str.length();    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUO  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUO  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUO	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR    	non-compiled	[CE]  	16	None	replace
52	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  	17	None	replace
53	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  	17	None	replace
54	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n'	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  	17	None	replace
55	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR);    }    	non-compiled	[CE]  	18	None	replace
56	[BUG]  [BUGGY]  return  writer.toString()  + ",null ";  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ",null ";  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",null ";	  return    writer.toString()    +   "n   ";    	non-compiled	[CE]  	1	None	replace
57	[BUG]  [BUGGY]  return  writer.toString()  + "  - ";  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + "  - ";  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + "  - ";	  return    writer.toString()    +   "n   ";    	non-compiled	[CE]  	1	None	replace
58	[BUG]  [BUGGY]  return  writer.toString()  +  escapeJavaStyleString;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  +  escapeJavaStyleString;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  escapeJavaStyleString;	  return    writer.toString()    +    escapeSingleQuotes;    	non-compiled	[CE]  	13	None	replace
59	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  	12	None	replace
60	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  	12	None	replace
61	[BUG]  [BUGGY]  return  writer.toString()  + ",   "  +  str.length()  *  2;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ",   "  +  str.length()  *  2;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ",   "  +  str.length()  *  2;	  return    writer.toString()    +   ",   "    +    str.length();    	non-compiled	[CE]  	2	None	replace
62	[BUG]  [BUGGY]  return  writer.toString()  + ": "  +  escapeSingleQuotes;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + ": "  +  escapeSingleQuotes;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + ": "  +  escapeSingleQuotes;	  return    writer.toString()    +   ":   "    +    str;    	non-compiled	[CE]  	21	None	replace
63	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  String  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "n   ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "n   ");  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "n   ");  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
66	[BUG]  [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append( "	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
67	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes);  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  *  2  +  escapeSingleQuotes);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  2);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  StringWriter  writer  =  new  StringWriter(str.length()  +  2);  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	StringWriter  writer  =  new  StringWriter(str.length()  +  2);	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    	non-compiled	[CE]  	6	None	replace
69	[BUG]  [BUGGY]  return  writer.toString(escapeSingleQuotes);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString(escapeSingleQuotes);  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString(escapeSingleQuotes);	  return    writer.toString(str);    	non-compiled	[CE]  	14	None	replace
70	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  null;  }	      	non-compiled	[CE]  	4	None	replace
71	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  writer.append('n');  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  writer.append('n');  }  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  writer.append('n');  }	      	non-compiled	[CE]  	4	None	replace
72	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  writer.toString();  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  writer.toString();  }  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  if(str  ==  null)  {  return  writer.toString();  }	      	non-compiled	[CE]  	4	None	replace
73	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  return  writer;  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  return  writer;  }  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  return  writer;  }	      	non-compiled	[CE]  	4	None	replace
74	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  	11	None	replace
75	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [CE]  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  if(escapeSingleQuotes)  {  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  	11	None	replace
76	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(CSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str!=  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str  ==  null)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
81	[BUG]  [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  &&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	&&  escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
82	[BUG]  [BUGGY]  if(writer!=  null)  {  return  writer.toString();  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(writer!=  null)  {  return  writer.toString();  }  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(writer!=  null)  {  return  writer.toString();  }	  return    writer.toString(str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
83	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(cSV_QUOTE_STR[i]);  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(cSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
84	[BUG]  [BUGGY]  return  writer.toString()  +  str.length();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  +  str.length();  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  +  str.length();	  return    writer.toString()    +   ":   "+str.length();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('n');  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
86	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append('	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
87	[BUG]  [BUGGY]  return  writer.toString()  + "  - "  +  CSV_QUOTE_STR;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  return  writer.toString()  + "  - "  +  CSV_QUOTE_STR;  [BUGGY]    }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	return  writer.toString()  + "  - "  +  CSV_QUOTE_STR;	  return    writer.toString()    +   "    -   "    +    str;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
88	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(escapeSingleQuotes.equals(cSV_QUOTE))  {  writer.append('n');  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER.equals(str))  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  writer.append('n');  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append('n');    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  reader.append(cSV_DELIMITER);  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER);	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER).append('n');  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  reader.append(cSV_DELIMITER).append('n');  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER).append('n');	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
92	[BUG]  [BUGGY]  reader.append(cSV_DELIMITER).append( "n ");  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  reader.append(cSV_DELIMITER).append( "n ");  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	reader.append(cSV_DELIMITER).append( "n ");	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    writer.append(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
93	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  writer.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(',');  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
94	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(','  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(','  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(','	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(',');    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(str.length()  ==  2  ||  escapeSingleQuotes)  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);  }	      StringWriter    writer    =    new    StringWriter(str.length()    *    2);    escapeJavaStyleString(writer,    str,    escapeSingleQuotes);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
96	[BUG]  [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(cSV_DELIMITER!=  null)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  writer;  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	if(escapeSingleQuotes)  {  char[]  CSV_DELIMITER  =  str.toCharArray();  if(cSV_QUOTE.equals(escapeSingleQuotes))  {  return  null;  }	      if(escapeSingleQuotes)    {    char[]    CSV_DELIMITER    =    str.toCharArray();    if(cSV_QUOTE.equals(escapeSingleQuotes))    {    return    writer;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR[i]);  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR[i]);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  String  escapeJavaStyleString(String  str,  boolean  escapeSingleQuotes)  {  if  (str  ==  null)  {  return  null;  }  try  {  StringWriter  writer  =  new  StringWriter(str.length()  *  2);  escapeJavaStyleString(writer,  str,  escapeSingleQuotes);    [BUGGY]  Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }  [BUGGY]    return  writer.toString();  }  catch  (IOException  ioe)  {  ioe.printStackTrace();  return  null;  }  }  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  String  String  str  boolean  escapeSingleQuotes  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuotes  IOException  ioe  StringWriter  writer  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	161	161	1	replace	Character[]  CSV_QUOTE_STR  =  str.toCharArray();  for(int  i  =  0;  i  <  CSV_QUOTE_STR.length();  ++i)  {  writer.append(CSV_QUOTE_STR);  }	      if(escapeSingleQuotes)    {    char[]    CSV_QUOTE_STR    =    str.toCharArray();    for(int    i    =    0;    i    <    CSV_QUOTE_STR.length();    ++i)    {    writer.append(CSV_QUOTE_STR);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
