bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(str.charAt(0),  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(0),  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(0),  escapeSingleQuote)  {	  switch(str.charAt(0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
2	[BUG]  [BUGGY]  switch(str.charAt(0),  ch)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(0),  ch)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(0),  ch)  {	  switch(str.charAt(0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
3	[BUG]  [BUGGY]  switch(ch,  str.charAt(0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch,  str.charAt(0))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch,  str.charAt(0))  {	  switch(str.charAt(0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
4	[BUG]  [BUGGY]  out.write( "s.IFJDCS ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "s.IFJDCS ");  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "s.IFJDCS ");	  out.write(   ".s.IFJDCS   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
5	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( ".s.IFJDCS ".charAt(0);  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS ".charAt(0);	  out.write(   ".s.IFJDCS   ").charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
6	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ",  ch).charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( ".s.IFJDCS ",  ch).charAt(0);  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS ",  ch).charAt(0);	  out.write(   ".s.IFJDCS   ").charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
7	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(!escapeSingleQuote  &&  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote  &&  escapeSingleQuote)  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
8	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&!str.endsWith( ".java "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(!escapeSingleQuote  &&!str.endsWith( ".java "))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote  &&!str.endsWith( ".java "))  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
9	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.charAt(ch  -  1)!=  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  ||  out.charAt(ch  -  1)!=  '')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  ||  out.charAt(ch  -  1)!=  '')  {	  if(escapeSingleQuote    &&    out.charAt(ch    -    1)!=    '')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
10	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)  ==  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)  ==  '')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.charAt(ch  -  1)  ==  '')  {	  if(escapeSingleQuote    &&    out.charAt(ch    -    1)!=    '')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
11	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  ''')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  ''')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  ''')  {	  if(escapeSingleQuote    &&    out.charAt(ch    -    1)!=    '')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
12	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  ||  Character.isDigit(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  ||  Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
13	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch)||  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isDigit(ch)||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
14	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch,  out))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch,  out))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isDigit(ch,  out))  {	  if(escapeSingleQuote    &&    Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
15	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(!escapeSingleQuote  &&  Character.isDigit(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote  &&  Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
16	[BUG]  [BUGGY]  if(ch  <  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]    ==    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
17	[BUG]  [BUGGY]  if(ch  >  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  >  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  >  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]    ==    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  ==  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  ==  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]    ==    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
19	[BUG]  [BUGGY]  if(ch  >=  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  >=  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  >=  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]    ==    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
20	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch)+  1);  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u00 "  +  hex(ch)+  1);  break;  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u00 "  +  hex(ch)+  1);  break;	  out.write(   "u00   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
21	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  ||  out.isEmpty())  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  ||  out.isEmpty())  {	  if(escapeSingleQuote    &&    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
22	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(!escapeSingleQuote  &&  out.isEmpty())  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote  &&  out.isEmpty())  {	  if(escapeSingleQuote    &&    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
23	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty()  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty()  ||  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.isEmpty()  ||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
24	[BUG]  [BUGGY]  switch(char.charAt(ch)+  1)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(char.charAt(ch)+  1)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(char.charAt(ch)+  1)  {	  switch(str.charAt(ch)+    1)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
25	[BUG]  [BUGGY]  switch(str.charAt(ch)/  1)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(ch)/  1)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(ch)/  1)  {	  switch(str.charAt(ch)+    1)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
26	[BUG]  [BUGGY]  switch(ch.charAt(str)+  1)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch.charAt(str)+  1)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(str)+  1)  {	  switch(str.charAt(ch)+    1)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
27	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ",  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( ".s.IFJDCS ",  hex(ch));  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS ",  hex(ch));	  out.write(   ".s.IFJDCS   "    +    charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
28	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch);  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS "  +  hex(ch);	  out.write(   ".s.IFJDCS   "    +    charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
29	[BUG]  [BUGGY]  if(ch  <  0xf  ||  ch  >  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  0xf  ||  ch  >  0xf)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  0xf  ||  ch  >  0xf)  {	  if(ch    <    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
30	[BUG]  [BUGGY]  switch(ch.charAt(i))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch.charAt(i))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(i))  {	  switch(ch.charAt(str))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
31	[BUG]  [BUGGY]  switch(char.charAt(str))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(char.charAt(str))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(char.charAt(str))  {	  switch(ch.charAt(str))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
32	[BUG]  [BUGGY]  switch(str.charAt(ch  -  1),  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(ch  -  1),  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(ch  -  1),  escapeSingleQuote)  {	  switch(str.charAt(ch    -    1))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
33	[BUG]  [BUGGY]  switch(str.charAt(ch  -  1)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(ch  -  1)||  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(ch  -  1)||  escapeSingleQuote)  {	  switch(str.charAt(ch    -    1))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
34	[BUG]  [BUGGY]  switch(str.charAt(ch  -  1)||  str.charAt(ch  -  1))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(ch  -  1)||  str.charAt(ch  -  1))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(ch  -  1)||  str.charAt(ch  -  1))  {	  switch(str.charAt(ch    -    1))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
35	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote.equals(ch))  {	  if(escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
36	[BUG]  [BUGGY]  switch(char.charAt(ch,  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(char.charAt(ch,  0))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(char.charAt(ch,  0))  {	  switch(char.charAt(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
37	[BUG]  [BUGGY]  if(ch  >  0xf  ||  hexValues[ch]!=  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  >  0xf  ||  hexValues[ch]!=  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  >  0xf  ||  hexValues[ch]!=  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]!=    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
38	[BUG]  [BUGGY]  if(ch  <  0xf  ||  hexValues[ch]!=  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  0xf  ||  hexValues[ch]!=  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  0xf  ||  hexValues[ch]!=  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]!=    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
39	[BUG]  [BUGGY]  if(ch  >=  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  >=  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  >=  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]!=    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
40	[BUG]  [BUGGY]  if(ch  ==  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  ==  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  ==  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]!=    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
41	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote.equals(ch))  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
42	[BUG]  [BUGGY]  if(!escapeSingleQuote  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(!escapeSingleQuote  ||  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote  ||  escapeSingleQuote)  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
43	[BUG]  [BUGGY]  if(ch  <  =  0xf  ||  ch  >  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  =  0xf  ||  ch  >  0xf)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  =  0xf  ||  ch  >  0xf)  {	  if(ch    <    =    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
44	[BUG]  [BUGGY]  switch(ch,  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch,  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch,  escapeSingleQuote)  {	  switch(str,    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
45	[BUG]  [BUGGY]  switch(str.charAt(ch,  escapeSingleQuote))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(ch,  escapeSingleQuote))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(ch,  escapeSingleQuote))  {	  switch(str,    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
46	[BUG]  [BUGGY]  switch(str,  escapeSingleQuote,  ch)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str,  escapeSingleQuote,  ch)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str,  escapeSingleQuote,  ch)  {	  switch(str,    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
47	[BUG]  [BUGGY]  if(ch  ==  '''  ||  ch  ==  ''')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  ==  '''  ||  ch  ==  ''')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  ==  '''  ||  ch  ==  ''')  {	  if(ch    ==    ''')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
48	[BUG]  [BUGGY]  if(ch!=  ''')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch!=  ''')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch!=  ''')  {	  if(ch    ==    ''')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
49	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  ||  Character.isWhitespace(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  ||  Character.isWhitespace(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
50	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  escapeSingleQuote)  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
51	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isDigit(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
52	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||  Character.isJavaStyle(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
53	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  str.charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( ".s.IFJDCS "  +  str.charAt(ch));  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS "  +  str.charAt(ch));	  out.write(   ".s.IFJDCS   "    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
54	[BUG]  [BUGGY]  out.write( "u00 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u00 ");  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u00 ");	  out.write(   "u000   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
55	[BUG]  [BUGGY]  out.write( "u0000 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u0000 ");  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u0000 ");	  out.write(   "u000   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
56	[BUG]  [BUGGY]  switch(escapeSingleQuote,  str)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(escapeSingleQuote,  str)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(escapeSingleQuote,  str)  {	  switch(str,    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
57	[BUG]  [BUGGY]  switch(out,  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(out,  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(out,  escapeSingleQuote)  {	  switch(str,    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
58	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isJavaIdentifierPart(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
59	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isJavaStyle(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isJavaStyle(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
60	[BUG]  [BUGGY]  if(ch  <  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]!=    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
61	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch)!=  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch)!=  '')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.charAt(ch)!=  '')  {	  if(escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
62	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty()  &&  Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty()  &&  Character.isDigit(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.isEmpty()  &&  Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
63	[BUG]  [BUGGY]  if(ch  <  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]    ==    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
64	[BUG]  [BUGGY]  switch(ch.charAt(str  -  1))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch.charAt(str  -  1))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(str  -  1))  {	  switch(str.charAt(ch    -    1))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
65	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u00000 "  +  hex(ch));  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u00000 "  +  hex(ch));	  out.write(   ".IFJDCS   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
66	[BUG]  [BUGGY]  out.write( "u00 "  +  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u00 "  +  charAt(ch));  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u00 "  +  charAt(ch));	  out.write(   ".s.IFJDCS   "    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
67	[BUG]  [BUGGY]  out.write( "u000 "  +  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u000 "  +  charAt(ch));  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u000 "  +  charAt(ch));	  out.write(   ".s.IFJDCS   "    +    charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
68	[BUG]  [BUGGY]  out.write( "u00 ").charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u00 ").charAt(0);  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u00 ").charAt(0);	  out.write(   ".s.IFJDCS   ").charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
69	[BUG]  [BUGGY]  out.write( "s.IFJDCS ").charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "s.IFJDCS ").charAt(0);  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "s.IFJDCS ").charAt(0);	  out.write(   ".s.IFJDCS   ").charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
70	[BUG]  [BUGGY]  if(ch  <  =  ''')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  =  ''')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  =  ''')  {	  if(ch    ==    ''')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
71	[BUG]  [BUGGY]  switch(ch.charAt(char))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch.charAt(char))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(char))  {	  switch(char.charAt(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
72	[BUG]  [BUGGY]  switch(char.charAt(ch  -  1))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(char.charAt(ch  -  1))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(char.charAt(ch  -  1))  {	  switch(char.charAt(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	26	None	replace
73	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(!escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
74	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(!escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote  &&  Character.isWhitespace(ch))  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
75	[BUG]  [BUGGY]  switch(ch.charAt(0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch.charAt(0))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(0))  {	  switch(str.charAt(0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
76	[BUG]  [BUGGY]  switch(char.charAt(0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(char.charAt(0))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(char.charAt(0))  {	  switch(str.charAt(0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
77	[BUG]  [BUGGY]  switch(cSV_DELIMITER,  str,  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(cSV_DELIMITER,  str,  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(cSV_DELIMITER,  str,  escapeSingleQuote)  {	  switch(str,    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
78	[BUG]  [BUGGY]  out.write( "[IFJDCS] "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "[IFJDCS] "  +  hex(ch));  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "[IFJDCS] "  +  hex(ch));	  out.write(   ".IFJDCS   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
79	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch,  char))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch,  char))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isDigit(ch,  char))  {	  if(escapeSingleQuote    &&    Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
80	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch)||!Character.isJavaIdentifierPart(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch)||!Character.isJavaIdentifierPart(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isDigit(ch)||!Character.isJavaIdentifierPart(ch))  {	  if(escapeSingleQuote    &&    Character.isDigit(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
81	[BUG]  [BUGGY]  if(ch  <  =  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  =  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  =  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]    ==    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
82	[BUG]  [BUGGY]  if(ch  <  =  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  =  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  =  0xf  ||  hexValues[ch]  ==  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]    ==    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
83	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  =  0x7F)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  =  0x7F)  {	  if(ch    <    =    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
84	[BUG]  [BUGGY]  switch(ch.charAt(str.charAt(ch)+  1))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch.charAt(str.charAt(ch)+  1))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(str.charAt(ch)+  1))  {	  switch(str.charAt(ch)+    1)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
85	[BUG]  [BUGGY]  switch(str.charAt(i)+  1)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(i)+  1)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(i)+  1)  {	  switch(str.charAt(ch)+    1)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
86	[BUG]  [BUGGY]  if(cSV_DELIMITER  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(cSV_DELIMITER  ||  escapeSingleQuote)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(cSV_DELIMITER  ||  escapeSingleQuote)  {	  if(escapeSingleQuote    ||    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
87	[BUG]  [BUGGY]  switch(ch.charAt(sz))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch.charAt(sz))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(sz))  {	  switch(ch.charAt(str))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
88	[BUG]  [BUGGY]  out.write( "u00 "  +  charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u00 "  +  charAt(0));  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u00 "  +  charAt(0));	  out.write(   ".s.IFJDCS   "    +    charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
89	[BUG]  [BUGGY]  out.write( "/.s.IFJDCS ").charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "/.s.IFJDCS ").charAt(0);  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "/.s.IFJDCS ").charAt(0);	  out.write(   ".s.IFJDCS   ").charAt(0);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
90	[BUG]  [BUGGY]  if(!escapeSingleQuote  &&!Character.isJavaIdentifierPart(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(!escapeSingleQuote  &&!Character.isJavaIdentifierPart(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote  &&!Character.isJavaIdentifierPart(ch))  {	  if(!escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
91	[BUG]  [BUGGY]  if(ch  <  =  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  <  =  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  =  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {	  if(ch    >    0xf    &&    hexValues[ch]!=    CSV_DELIMITER)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
92	[BUG]  [BUGGY]  switch(ch.charAt(str.length  -  1))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(ch.charAt(str.length  -  1))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(str.length  -  1))  {	  switch(str.charAt(ch    -    1))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
93	[BUG]  [BUGGY]  switch(str.charAt(i  -  1))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  switch(str.charAt(i  -  1))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(i  -  1))  {	  switch(str.charAt(ch    -    1))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
94	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty()  ||  ch  >  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty()  ||  ch  >  0xf)  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.isEmpty()  ||  ch  >  0xf)  {	  if(escapeSingleQuote    &&    out.isEmpty())    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
95	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  ||  ch  ==  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote  ||  ch  ==  '')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote  ||  ch  ==  '')  {	  if(escapeSingleQuote    &&    escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
96	[BUG]  [BUGGY]  out.write( "/.s.IFJDCS ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "/.s.IFJDCS ");  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "/.s.IFJDCS ");	  out.write(   ".s.IFJDCS   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
97	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  out.write( "u00000 "  +  hex(ch));  break;  [BUGGY]      switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u00000 "  +  hex(ch));  break;	  out.write(   "u0000   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
98	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch))  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch)||!Character.isDigit(ch))  {	  if(escapeSingleQuote    &&    Character.isWhitespace(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
99	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '/')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '/')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '/')  {	  if(escapeSingleQuote    &&    out.charAt(ch    -    1)!=    '')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
100	[BUG]  [BUGGY]  if(ch  ==  '''  ||  ch  ==  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      break;  default  :  if  (ch  >  0xf)  {  out.write(     "\\u00     "  +  hex(ch));  }  else  {  out.write(     "\\u000     "  +  hex(ch));  }  break;  }  }  else  {      [BUGGY]  if(ch  ==  '''  ||  ch  ==  '')  {  [BUGGY]      case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '     "'  :  out.write('\\');  out.write('     "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  ==  '''  ||  ch  ==  '')  {	  if(ch    ==    ''')    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
