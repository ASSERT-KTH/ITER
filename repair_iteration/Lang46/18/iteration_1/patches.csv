bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(str.charAt(ch)+  1)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  switch(str.charAt(ch)+  1)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(ch)+  1)  {	  switch(str.charAt(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
2	[BUG]  [BUGGY]  switch(ch.charAt(str))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  switch(ch.charAt(str))  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(ch.charAt(str))  {	  switch(str.charAt(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
3	[BUG]  [BUGGY]  switch(str.charAt(0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  switch(str.charAt(0))  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(0))  {	  switch(str.charAt(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
4	[BUG]  [BUGGY]  Out.write( "u00 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  Out.write( "u00 "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	Out.write( "u00 "  +  hex(ch));	      Out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
5	[BUG]  [BUGGY]  out.write( "u000 ");  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u000 ");  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u000 ");	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
6	[BUG]  [BUGGY]  switch(str,  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  switch(str,  escapeSingleQuote)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str,  escapeSingleQuote)  {	  switch(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
7	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u00 "  +  hex(ch));  break;	      out.write(   "u000   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
8	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u0000 "  +  hex(ch));  break;  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u0000 "  +  hex(ch));  break;	      out.write(   "u000   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
9	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( "u0000 "  +  hex(ch));	      out.write(   "u00   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
10	[BUG]  [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  ||  escapeSingleQuote)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  ||  escapeSingleQuote)  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
11	[BUG]  [BUGGY]  if(!escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(!escapeSingleQuote)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(!escapeSingleQuote)  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
12	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  escapeSingleQuote)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  escapeSingleQuote)  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
13	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS "  +  hex(ch));	      out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
14	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(0));  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(0));  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS "  +  charAt(0));	      out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
15	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ");  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( ".s.IFJDCS ");  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS ");	      out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
16	[BUG]  [BUGGY]  out.write( ".IFJDCS "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( ".IFJDCS "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".IFJDCS "  +  hex(ch));	      out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  ==  0xf)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  ==  0xf)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
18	[BUG]  [BUGGY]  if(ch  <  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  <  0xf)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  0xf)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
19	[BUG]  [BUGGY]  if(ch  <  =  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  <  =  0xf)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  <  =  0xf)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
20	[BUG]  [BUGGY]  if(ch  >=  0xf)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  >=  0xf)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  >=  0xf)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
21	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(ch));  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS "  +  charAt(ch));	      out.write(   ".s.IFJDCS   ".charAt(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
22	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.charAt(ch  -  1)!=  '')  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
23	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty())  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  out.isEmpty())  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  out.isEmpty())  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
24	[BUG]  [BUGGY]  switch(str)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  switch(str)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str)  {	  switch(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
25	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").charAt(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  out.write( ".s.IFJDCS ").charAt(0);  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	out.write( ".s.IFJDCS ").charAt(0);	      out.write(   ".s.IFJDCS   ".charAt(0));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
26	[BUG]  [BUGGY]  switch(char.charAt(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  switch(char.charAt(ch))  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(char.charAt(ch))  {	  switch(str.charAt(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
27	[BUG]  [BUGGY]  if(ch  ==  ''')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  ==  ''')  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  ==  ''')  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
28	[BUG]  [BUGGY]  if(ch  >  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  >  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  >  0xf  &&  hexValues[ch]!=  CSV_DELIMITER)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
29	[BUG]  [BUGGY]  if(ch  >  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(ch  >  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(ch  >  0xf  &&  hexValues[ch]  ==  CSV_DELIMITER)  {	  if(ch    >    0xf)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
30	[BUG]  [BUGGY]  Out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  Out.write( "u0000 "  +  hex(ch));  [BUGGY]    switch  (ch)  {  case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	Out.write( "u0000 "  +  hex(ch));	      Out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
31	[BUG]  [BUGGY]  switch(str.charAt(ch  -  1))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  switch(str.charAt(ch  -  1))  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	switch(str.charAt(ch  -  1))  {	  switch(str.charAt(ch))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
32	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  Character.isDigit(ch))  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isDigit(ch))  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
33	[BUG]  [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    break;  default  :  if  (ch  >  0xf)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  {  out.write(   "\\u000   "  +  hex(ch));  }  break;  }  }  else  {    [BUGGY]  if(escapeSingleQuote  &&  Character.isWhitespace(ch))  {  [BUGGY]    case  '\''  :  if  (escapeSingleQuote)  {  out.write('\\');  }  out.write('\'');  break;  case  '   "'  :  out.write('\\');  out.write('   "');  break;  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	228	228	1	replace	if(escapeSingleQuote  &&  Character.isWhitespace(ch))  {	  if(escapeSingleQuote)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
