bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(ch  <  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  0)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  0)  {	  }    else    if(ch    <    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
2	[BUG]  [BUGGY]  }  else  if(ch  <  =  32)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  32)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  =  32)  {	  }    else    if(ch    <    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
3	[BUG]  [BUGGY]  }  else  if(ch  <  0xff)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  0xff)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  0xff)  {	  }    else    if(ch    <    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
4	[BUG]  [BUGGY]  }  else  if(ch  ==  'u00')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  ==  'u00')  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  ==  'u00')  {	  }    else    if(ch    <    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
5	[BUG]  [BUGGY]  out.write( "u0000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  out.write( "u0000 "  +  hex(ch));  [BUGGY]    }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	out.write( "u0000 "  +  hex(ch));	      out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
6	[BUG]  [BUGGY]  }  else  if(ch  <  128)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  128)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  128)  {	  }    else    if(ch    <    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
7	[BUG]  [BUGGY]  }  else  if(ch  >=  127)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  >=  127)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  >=  127)  {	  }    else    if(ch    <    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
8	[BUG]  [BUGGY]  }  else  if(ch  <  =  127)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  127)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  =  127)  {	  }    else    if(ch    <    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
9	[BUG]  [BUGGY]  }  else  if(ch  <  =  16)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  16)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  =  16)  {	  }    else    if(ch    <    16)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
10	[BUG]  [BUGGY]  }  else  if(ch  <  20)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  20)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  20)  {	  }    else    if(ch    <    16)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
11	[BUG]  [BUGGY]  }  else  if(ch  <  100  ||  hex(ch)  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  100  ||  hex(ch)  ==  0)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  100  ||  hex(ch)  ==  0)  {	  }    else    if(ch    <    100)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
12	[BUG]  [BUGGY]  }  else  if(ch  <  100  ||  hex(ch)!=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  100  ||  hex(ch)!=  0)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  100  ||  hex(ch)!=  0)  {	  }    else    if(ch    <    100)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
13	[BUG]  [BUGGY]  }  else  if(ch  <  10000)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  10000)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  10000)  {	  }    else    if(ch    <    1000)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
14	[BUG]  [BUGGY]  }  else  if(ch  <  =  1000)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  1000)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  =  1000)  {	  }    else    if(ch    <    1000)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
15	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  out.write( ".s.IFJDCS "  +  charAt(i));  [BUGGY]    }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	out.write( ".s.IFJDCS "  +  charAt(i));	      out.write(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
16	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  out.write( ".s.IFJDCS "  +  hex(ch));  [BUGGY]    }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	out.write( ".s.IFJDCS "  +  hex(ch));	      out.write(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
17	[BUG]  [BUGGY]  }  else  if(ch  <  50)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  50)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  50)  {	  }    else    if(ch    <    60)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
18	[BUG]  [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  out.write( "u00 "  +  hex(ch));  break;  [BUGGY]    }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	out.write( "u00 "  +  hex(ch));  break;	      out.write(   "u0   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
19	[BUG]  [BUGGY]  out.write( "u000 "  +  hex(ch));  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  out.write( "u000 "  +  hex(ch));  break;  [BUGGY]    }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	out.write( "u000 "  +  hex(ch));  break;	      out.write(   "u0   "    +    hex(ch));    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
20	[BUG]  [BUGGY]  }  else  if(ch  >  127)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  >  127)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  >  127)  {	  }    else    if(ch    <    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
21	[BUG]  [BUGGY]  }  else  if(ch  >  100)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  >  100)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  >  100)  {	  }    else    if(ch    <    100)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
22	[BUG]  [BUGGY]  }  else  if(ch  >  1000)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  >  1000)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  >  1000)  {	  }    else    if(ch    <    1000)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
23	[BUG]  [BUGGY]  out.write( "u00000 "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  out.write( "u00000 "  +  hex(ch));  [BUGGY]    }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	out.write( "u00000 "  +  hex(ch));	      out.write(   "u000   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
24	[BUG]  [BUGGY]  out.write(''  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  out.write(''  +  hex(ch));  [BUGGY]    }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	out.write(''  +  hex(ch));	      out.write('');    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
25	[BUG]  [BUGGY]  }  else  if(ch  <  =  60)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  =  60)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  =  60)  {	  }    else    if(ch    <    60)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
26	[BUG]  [BUGGY]  }  else  if(ch  >  32)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  >  32)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  >  32)  {	  }    else    if(ch    <    32)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
27	[BUG]  [BUGGY]  }  else  if(ch  <  100  ||  hex(ch)  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  100  ||  hex(ch)  ==  CSV_DELIMITER)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  100  ||  hex(ch)  ==  CSV_DELIMITER)  {	  }    else    if(ch    <    100)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
28	[BUG]  [BUGGY]  }  else  if(ch  <  100  ||  hex(ch)!=  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  100  ||  hex(ch)!=  CSV_DELIMITER)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  100  ||  hex(ch)!=  CSV_DELIMITER)  {	  }    else    if(ch    <    100)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
29	[BUG]  [BUGGY]  }  else  if(ch  <  1000  ||  hex(ch)  ==  CSV_DELIMITER)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  }  else  if(ch  <  1000  ||  hex(ch)  ==  CSV_DELIMITER)  {  [BUGGY]    out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	}  else  if(ch  <  1000  ||  hex(ch)  ==  CSV_DELIMITER)  {	  }    else    if(ch    <    1000)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
30	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(i  +  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    int  sz;  sz  =  str.length();  for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(   "\\u   "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(   "\\u0   "  +  hex(ch));    [BUGGY]  out.write( ".s.IFJDCS ".charAt(i  +  1));  [BUGGY]    }  else  if  (ch  >  0x7f)  {  out.write(   "\\u00   "  +  hex(ch));  }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	195	195	1	replace	out.write( ".s.IFJDCS ".charAt(i  +  1));	      out.write(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	4	None	replace
