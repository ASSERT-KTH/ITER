bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(''  +  hex(ch)+  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write(''  +  hex(ch)+  1);  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write(''  +  hex(ch)+  1);	  out.write(''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
2	[BUG]  [BUGGY]  out.write(''  +  hex(ch)+ "' ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write(''  +  hex(ch)+ "' ");  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write(''  +  hex(ch)+ "' ");	  out.write(''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
3	[BUG]  [BUGGY]  out.write(''  +  hex(ch),  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write(''  +  hex(ch),  0);  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write(''  +  hex(ch),  0);	  out.write(''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
4	[BUG]  [BUGGY]  out.write(''  +  hex(ch)+  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write(''  +  hex(ch)+  2);  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write(''  +  hex(ch)+  2);	  out.write(''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
5	[BUG]  [BUGGY]  }  else  if(ch  <  =  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  =  0x7f)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  =  0x7f)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
6	[BUG]  [BUGGY]  }  else  if(ch  ==  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  ==  0x7f)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  ==  0x7f)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
7	[BUG]  [BUGGY]  }  else  if(ch  >=  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  >=  0x7f)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  >=  0x7f)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
8	[BUG]  [BUGGY]  }  else  if(ch  <  =  0x7FF)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  =  0x7FF)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  =  0x7FF)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
9	[BUG]  [BUGGY]  }  else  if(ch  <  32  ||  ch  >=  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  32  ||  ch  >=  0x7f)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  32  ||  ch  >=  0x7f)  {	  }    else    if(ch    <    32    ||    ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
10	[BUG]  [BUGGY]  }  else  if(ch  <  32  ||  ch  ==  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  32  ||  ch  ==  0x7f)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  32  ||  ch  ==  0x7f)  {	  }    else    if(ch    <    32    ||    ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
11	[BUG]  [BUGGY]  }  else  if(ch  <  32  ||  ch  >  0x7F)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  32  ||  ch  >  0x7F)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  32  ||  ch  >  0x7F)  {	  }    else    if(ch    <    32    ||    ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
12	[BUG]  [BUGGY]  }  else  if(ch  <  =  32  &&  ch  >  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  =  32  &&  ch  >  0x7f)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  =  32  &&  ch  >  0x7f)  {	  }    else    if(ch    <    =    32    ||    ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
13	[BUG]  [BUGGY]  }  else  if(ch  <  =  32  ||  ch  >=  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  =  32  ||  ch  >=  0x7f)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  =  32  ||  ch  >=  0x7f)  {	  }    else    if(ch    <    =    32    ||    ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
14	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  str.charAt(i  -  1));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write( ".s.IFJDCS "  +  str.charAt(i  -  1));  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write( ".s.IFJDCS "  +  str.charAt(i  -  1));	  out.write(   ".s.IFJDCS   "    +    str.charAt(i));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
15	[BUG]  [BUGGY]  out.write( "u00   "  +  str.charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write( "u00   "  +  str.charAt(i));  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write( "u00   "  +  str.charAt(i));	  out.write(   ".s.IFJDCS   "    +    str.charAt(i));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
16	[BUG]  [BUGGY]  }  else  if(ch  <  127)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  127)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  127)  {	  }    else    if(ch    <    =    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
17	[BUG]  [BUGGY]  }  else  if(ch  ==  127)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  ==  127)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  ==  127)  {	  }    else    if(ch    <    =    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
18	[BUG]  [BUGGY]  }  else  if(ch  >=  127)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  >=  127)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  >=  127)  {	  }    else    if(ch    <    =    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
19	[BUG]  [BUGGY]  out.write( "s.IFJDCS   "  +  str.charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write( "s.IFJDCS   "  +  str.charAt(i));  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write( "s.IFJDCS   "  +  str.charAt(i));	  out.write(   ".s.IFJDCS   "    +    str.charAt(i));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
20	[BUG]  [BUGGY]  }  else  if(ch  <  32  &&  ch  >  0x7f)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  32  &&  ch  >  0x7f)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  32  &&  ch  >  0x7f)  {	  }    else    if(ch    <    32    ||    ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
21	[BUG]  [BUGGY]  out.write(''  +  hex(ch)+  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write(''  +  hex(ch)+  3);  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write(''  +  hex(ch)+  3);	  out.write(''    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
22	[BUG]  [BUGGY]  }  else  if(ch  <  =  0x7F)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  =  0x7F)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  =  0x7F)  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
23	[BUG]  [BUGGY]  }  else  if(ch  ==  '')  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  ==  '')  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  ==  '')  {	  }    else    if(ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
24	[BUG]  [BUGGY]  out.write( "s.IFJDCS   "  +  hex(ch));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write( "s.IFJDCS   "  +  hex(ch));  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write( "s.IFJDCS   "  +  hex(ch));	  out.write(   ".s.IFJDCS   "    +    hex(ch));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
25	[BUG]  [BUGGY]  }  else  if(ch  <  32  ||  ch  >  0x7FF)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  32  ||  ch  >  0x7FF)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  32  ||  ch  >  0x7FF)  {	  }    else    if(ch    <    =    32    ||    ch    >    0x7f)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
26	[BUG]  [BUGGY]  out.write( "u00 "  +  charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write( "u00 "  +  charAt(i));  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write( "u00 "  +  charAt(i));	  out.write(   ".s.IFJDCS   "    +    charAt(i));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
27	[BUG]  [BUGGY]  }  else  if(ch  <  128)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  <  128)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  <  128)  {	  }    else    if(ch    <    =    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
28	[BUG]  [BUGGY]  }  else  if(ch  >  127)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  }  else  if(ch  >  127)  {  [BUGGY]      switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	}  else  if(ch  >  127)  {	  }    else    if(ch    <    =    127)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
29	[BUG]  [BUGGY]  out.write( "u000 "  +  str.charAt(i));  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  sz;  i++)  {  char  ch  =  str.charAt(i);  if  (ch  >  0xfff)  {  out.write(     "\\u     "  +  hex(ch));  }  else  if  (ch  >  0xff)  {  out.write(     "\\u0     "  +  hex(ch));  }  else  if  (ch  >  0x7f)  {  out.write(     "\\u00     "  +  hex(ch));      [BUGGY]  out.write( "u000 "  +  str.charAt(i));  [BUGGY]      }  else  if  (ch  <  32)  {  switch  (ch)  {  case  '\b'  :  out.write('\\');  out.write('b');  break;  case  '\n'  :  out.write('\\');  out.write('n');  break;  case  '\t'  :  [CLASS]  StringEscapeUtils  [METHOD]  escapeJavaStyleString  [RETURN_TYPE]  void  Writer  out  String  str  boolean  escapeSingleQuote  [VARIABLES]  char  CSV_DELIMITER  CSV_QUOTE  ch  String  CSV_QUOTE_STR  str  boolean  escapeSingleQuote  Writer  out  int  i  sz  char[]  CSV_SEARCH_CHARS  	projects/Lang46/src/java/org/apache/commons/lang/StringEscapeUtils.java	0.5	197	197	1	replace	out.write( "u000 "  +  str.charAt(i));	  out.write(   ".s.IFJDCS   "    +    str.charAt(i));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
