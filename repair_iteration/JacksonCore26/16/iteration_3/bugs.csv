bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_origBufferLen  >  0)  {  If(_currInputProcessed  >  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0)  {  If(_currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0)  {  If(_currInputProcessed  >  0)  {	  if(_currInputProcessed    >    0)    {    If(_currInputProcessed    >    0)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
2	[BUG]  [BUGGY]  If(_origBufferLen  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  If(_origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	If(_origBufferLen  >  0)  {	  if(_currInputProcessed    >    0)    {    If(_currInputProcessed    >    0)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
3	[BUG]  [BUGGY]  if(_origBufferLen  <  =  _inputEnd)  {  If(_currInputProcessed  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  <  =  _inputEnd)  {  If(_currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  <  =  _inputEnd)  {  If(_currInputProcessed  >  0)  {	  if(_currInputProcessed    >    0)    {    If(_currInputProcessed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
4	[BUG]  [BUGGY]  int  _origBufferLen  =  _origBufferLen;  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  int  _origBufferLen  =  _origBufferLen;  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	int  _origBufferLen  =  _origBufferLen;	  if(_origBufferLen    >    start)    {    int    _origBufferLen    =    _origBufferLen;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
5	[BUG]  [BUGGY]  Integer  _origBufferLen  =  _origBufferLen;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  Integer  _origBufferLen  =  _origBufferLen;  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	Integer  _origBufferLen  =  _origBufferLen;	  if(_origBufferLen    >    start)    {    int    _origBufferLen    =    _origBufferLen;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
6	[BUG]  [BUGGY]  _origBufferLen  =  _origBufferLen;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _origBufferLen  =  _origBufferLen;  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_origBufferLen  =  _origBufferLen;	  if(_origBufferLen    >    start)    {    int    _origBufferLen    =    _origBufferLen;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
7	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
8	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  If(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  If(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    If(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
9	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  if(_origBufferLen  >  0  ||  _origBufferLen  >  _inputEnd)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  if(_origBufferLen  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    if(_origBufferLen  >  0  ||  _origBufferLen  >  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
10	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >=  0)  {	  if(_currInputProcessed    >=    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	51	1	replace
11	[BUG]  [BUGGY]  if(_origBufferLen  >=  0)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >=  0)  {	  if(_currInputProcessed    >=    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	51	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen!=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen!=  0)  {	  if(_currInputProcessed    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	51	1	replace
13	[BUG]  [BUGGY]  if(_origBufferLen!=  0)  {  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen!=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen!=  0)  {	  if(_currInputProcessed    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	51	1	replace
14	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0    ||    _currInputProcessed    >    0)    {    if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
15	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  If(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  If(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0    ||    _currInputProcessed    >    0)    {    If(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
16	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  ||  _origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  ||  _origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0    ||    _currInputProcessed    >    0)    {    ||  _origBufferLen  >  0  ||  _currInputProcessed  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
17	[BUG]  [BUGGY]  ((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)    ||(_origBufferLen    >    0))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
18	[BUG]  [BUGGY]  ||(_origBufferLen  >  0))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ||(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	||(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)    ||(_origBufferLen    >    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
19	[BUG]  [BUGGY]  ((  _origBuffer  >  0)||(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _origBuffer  >  0)||(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _origBuffer  >  0)||(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)    ||(_origBufferLen    >    0))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
20	[BUG]  [BUGGY]  if(_inputPtr  >=  end)  {  if(_inputPtr  >=  end)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  end)  {  if(_inputPtr  >=  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    end)    {    if(_inputPtr  >=  end)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
21	[BUG]  [BUGGY]  if(_inputPtr  >=  end)  {  if(_inputPtr!=  end)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  end)  {  if(_inputPtr!=  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    end)    {    if(_inputPtr!=  end)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
22	[BUG]  [BUGGY]  if(_inputPtr  >=  end)  {  if(_inputPtr  >>  end)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  end)  {  if(_inputPtr  >>  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    end)    {    if(_inputPtr  >>  end)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
23	[BUG]  [BUGGY]  if(_inputPtr  >=  end)  {  if(_inputPtr  ==  end)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  end)  {  if(_inputPtr  ==  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    end)    {    if(_inputPtr  ==  end)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
24	[BUG]  [BUGGY]  if(_inputPtr  >  end)  {  if(_inputPtr  >  end)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  end)  {  if(_inputPtr  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    end)    {    if(_inputPtr  >  end)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
25	[BUG]  [BUGGY]  if(_inputPtr  >  end)  {  If(_inputPtr  >  end)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  end)  {  If(_inputPtr  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    end)    {    If(_inputPtr  >  end)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
26	[BUG]  [BUGGY]  if(_inputPtr  >  end)  {  if(_inputPtr  >  start)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  end)  {  if(_inputPtr  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    end)    {    if(_inputPtr  >  start)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
27	[BUG]  [BUGGY]  if(_origBufferLen  >  0)  {  ||  _currInputProcessed  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0)  {  ||  _currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0)  {  ||  _currInputProcessed  >  0)  {	  if(_currInputProcessed    >    0)    {    ||    _currInputProcessed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
28	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]                  AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(end  >  0)  {	  if(_origPtr    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	54	1	replace
29	[BUG]  [BUGGY]  if(end  >  0)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]                  AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  >  0)  {	  if(_origPtr    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	54	1	replace
30	[BUG]  [BUGGY]  if(_cfgPtr  >  0)  {  [CE]  cannot  find  symbol  _cfgPtr  [FE]                    AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_cfgPtr  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_cfgPtr  >  0)  {	  if(_origPtr    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  _cfgPtr	54	None	replace
31	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
32	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  If(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  If(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    If(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
33	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  if(_origBufferLen  >  0  ||  _currInputProcessed  >=  _origBufferLen)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  if(_origBufferLen  >  0  ||  _currInputProcessed  >=  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    if(_origBufferLen  >  0  ||  _currInputProcessed  >=  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
34	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  end);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  end);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  end);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'       ",    start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
35	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start,  end);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start,  end);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start,  end);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'       ",    start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  ||(_currInputProcessed  >  0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ||(_currInputProcessed  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	||(_currInputProcessed  >  0))  {	  if(_currInputProcessed    >    0)    {    ||(_currInputProcessed    >    0))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||(_currInputProcessed  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  0  ||(_currInputProcessed  >  0)&&(_origBufferLen  >  0))  {	  if(_currInputProcessed    >    0)    {    ||(_currInputProcessed    >    0))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
38	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||(_currInputProcessed  >  0)&&(_origBufferLen  >  0))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||(_currInputProcessed  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0  ||(_currInputProcessed  >  0)&&(_origBufferLen  >  0))  {	  if(_currInputProcessed    >    0)    {    ||(_currInputProcessed    >    0))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||(_currInputProcessed  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  0  ||(_currInputProcessed  >  0))  {	  if(_currInputProcessed    >    0)    {    ||(_currInputProcessed    >    0))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
40	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||(_currInputProcessed  >  0))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||(_currInputProcessed  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0  ||(_currInputProcessed  >  0))  {	  if(_currInputProcessed    >    0)    {    ||(_currInputProcessed    >    0))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
41	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputPtr);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputPtr);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputPtr);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
42	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
43	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ",  _inputPtr);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ",  _inputPtr);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ",  _inputPtr);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
44	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  ||(_inputPtr  >  start)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  ||(_inputPtr  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  <  _inputEnd)  {  ||(_inputPtr  >  start)  {	  if(_inputPtr    >    start)    {    ||(_inputPtr    >    start)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
45	[BUG]  [BUGGY]  if(_inputPtr  >=  start)  {  ||(_inputPtr  >  start)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  start)  {  ||(_inputPtr  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  start)  {  ||(_inputPtr  >  start)  {	  if(_inputPtr    >    start)    {    ||(_inputPtr    >    start)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >=  start)  {	  if(_inputPtr    >    start)    {    ||(_inputPtr    >    start)    {    	compilable	  [FE]  AssertionFailedError  	25	1	replace
47	[BUG]  [BUGGY]  if(_inputPtr  >=  start)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  start)  {	  if(_inputPtr    >    start)    {    ||(_inputPtr    >    start)    {    	compilable	  [FE]  AssertionFailedError  	25	1	replace
48	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  if(_inputPtr  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  if(_inputPtr  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    0)    {    if(_inputPtr  >  0)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
49	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  If(_inputPtr  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  If(_inputPtr  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    0)    {    If(_inputPtr  >  0)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
50	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  (_inputPtr  >  0)  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  (_inputPtr  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    0)    {    (_inputPtr  >  0)  {	  	non-compiled	[CE]  not  a  statement	38	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >  _inputEnd)  {	  if(_currInputProcessed    >    start)    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
52	[BUG]  [BUGGY]  if(_currInputProcessed  >  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  _inputEnd)  {	  if(_currInputProcessed    >    start)    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >  _origBufferLen)  {	  if(_currInputProcessed    >    start)    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
54	[BUG]  [BUGGY]  if(_currInputProcessed  >  _origBufferLen)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  _origBufferLen)  {	  if(_currInputProcessed    >    start)    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
55	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  >  _currInputProcessed)  {	  if(_currInputProcessed    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	47	1	replace
56	[BUG]  [BUGGY]  if(start  >  _currInputProcessed)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  >  _currInputProcessed)  {	  if(_currInputProcessed    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	47	1	replace
57	[BUG]  [BUGGY]  if(start  >  _inputPtr)  {  if(start  >  _inputPtr)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _inputPtr)  {  if(start  >  _inputPtr)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _inputPtr)    {    if(start  >  _inputPtr)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
58	[BUG]  [BUGGY]  if(start  >  _inputPtr)  {  If(start  >  _inputPtr)  {  [CE]  ';'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _inputPtr)  {  If(start  >  _inputPtr)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _inputPtr)    {    If(start  >  _inputPtr)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
59	[BUG]  [BUGGY]  if(start  >  _inputPtr)  {  ((  _inputPtr  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer.length);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _inputPtr)  {  ((  _inputPtr  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer.length);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _inputPtr)    {    ((  _inputPtr  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer.length);	  	non-compiled	[CE]  not  a  statement	16	None	add
60	[BUG]  [BUGGY]  if(start  >  _inputPtr)  {  ((  _inputPtr  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer[start]);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _inputPtr)  {  ((  _inputPtr  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer[start]);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _inputPtr)    {    ((  _inputPtr  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer[start]);	  	non-compiled	[CE]  not  a  statement	16	None	add
61	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  If(_origBufferLen  >  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  If(_origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  _inputEnd)  {  If(_origBufferLen  >  0)  {	  if(_origBufferLen    >    0)    {    If(_origBufferLen    >    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
62	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  If(_origBufferLen  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0)  {  If(_origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0)  {  If(_origBufferLen  >  0)  {	  if(_origBufferLen    >    0)    {    If(_origBufferLen    >    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
63	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  If(_currInputLen  >  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0)  {  If(_currInputLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0)  {  If(_currInputLen  >  0)  {	  if(_origBufferLen    >    0)    {    If(_origBufferLen    >    0)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
64	[BUG]  [BUGGY]  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)&&(_origBufferLen    >    0))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
65	[BUG]  [BUGGY]  ||(_origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ||(_origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	||(_origBufferLen  >  0)&&(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)&&(_origBufferLen    >    0))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
66	[BUG]  [BUGGY]  ((  _inputPtr  >  0)&&(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _inputPtr  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _inputPtr  >  0)&&(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)&&(_origBufferLen    >    0))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >  0  ||  _currInputProcessed  >  0)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
68	[BUG]  [BUGGY]  if(_inputPtr  >  0  ||  _currInputProcessed  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0  ||  _currInputProcessed  >  0)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
69	[BUG]  [BUGGY]  if(_origBufferLen  <  =  0  ||  _currInputProcessed  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  <  =  0  ||  _currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  <  =  0  ||  _currInputProcessed  >  0)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  ==  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  ==  _origBufferLen)  {	  if(start    >    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
71	[BUG]  [BUGGY]  if(start  ==  _origBufferLen)  {  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  ==  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  ==  _origBufferLen)  {	  if(start    >    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
72	[BUG]  [BUGGY]  if(end  >  _inputEnd)  {  if(end  >  _inputEnd)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputEnd)  {  if(end  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _inputEnd)    {    if(end  >  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
73	[BUG]  [BUGGY]  if(end  >  _inputEnd)  {  ((  _inputEnd  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer.length);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputEnd)  {  ((  _inputEnd  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer.length);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _inputEnd)    {    ((  _inputEnd  >  _inputEnd)?  _inputBufferLen  :  _inputBuffer.length);	  	non-compiled	[CE]  not  a  statement	42	None	add
74	[BUG]  [BUGGY]  if(end  >  _inputEnd)  {  ((  _inputEnd  >  _inputEnd)&&(_origBufferLen  >  _inputEnd))  {  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputEnd)  {  ((  _inputEnd  >  _inputEnd)&&(_origBufferLen  >  _inputEnd))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _inputEnd)    {    ((  _inputEnd  >  _inputEnd)&&(_origBufferLen  >  _inputEnd))  {	  	non-compiled	[CE]  not  a  statement	42	None	add
75	[BUG]  [BUGGY]  if(end  >  _inputEnd)  {  If(end  >  _inputEnd)  {  [CE]  ';'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputEnd)  {  If(end  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _inputEnd)    {    If(end  >  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
76	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  ==  _inputEnd)  {	  if(_inputPtr    <    _inputEnd)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	15	1	replace
77	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  ==  _inputEnd)  {	  if(_inputPtr    <    _inputEnd)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	15	1	replace
78	[BUG]  [BUGGY]  if(_origBufferLen  <  =  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  <  =  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  <  =  _inputEnd)  {	  if(_inputPtr    <    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
79	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
80	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [CE]  ';'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr!=  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
81	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr  >>  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
82	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [CE]  ';'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr  ==  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
83	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  <  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
84	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  If(_inputPtr  <  _inputEnd)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  If(_inputPtr  <  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    <    _inputEnd)    {    If(_inputPtr  <  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
85	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  &&  _origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >  0  &&  _origBufferLen  >  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
87	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  &&  _origBufferLen  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  &&  _origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0  &&  _origBufferLen  >  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
88	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >=  0  ||  _origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >=  0  ||  _origBufferLen  >  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	53	1	replace
89	[BUG]  [BUGGY]  if(_currInputProcessed  >=  0  ||  _origBufferLen  >  0)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >=  0  ||  _origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >=  0  ||  _origBufferLen  >  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	53	1	replace
90	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  <  =  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0  ||  _origBufferLen  <  =  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
91	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  if(end  >  _origBufferLen)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _origBufferLen)  {  if(end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _origBufferLen)    {    if(end  >  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
92	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  If(end  >  _origBufferLen)  {  [CE]  ';'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _origBufferLen)  {  If(end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _origBufferLen)    {    If(end  >  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
93	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  ((  _origBufferLen  >  _origBufferLen)&&(end  >  _origBufferLen))  {  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _origBufferLen)  {  ((  _origBufferLen  >  _origBufferLen)&&(end  >  _origBufferLen))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _origBufferLen)    {    ((  _origBufferLen  >  _origBufferLen)&&(end  >  _origBufferLen))  {	  	non-compiled	[CE]  not  a  statement	6	None	add
94	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  ((  _origBufferLen  >  _origBufferLen)||(end  >  _origBufferLen))  {  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _origBufferLen)  {  ((  _origBufferLen  >  _origBufferLen)||(end  >  _origBufferLen))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _origBufferLen)    {    ((  _origBufferLen  >  _origBufferLen)||(end  >  _origBufferLen))  {	  	non-compiled	[CE]  not  a  statement	6	None	add
95	[BUG]  [BUGGY]  if(_currInputProcessed  >  start)  {  if(_currInputProcessed  >  start)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  start)  {  if(_currInputProcessed  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    start)    {    if(_currInputProcessed  >  start)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
96	[BUG]  [BUGGY]  if(_currInputProcessed  >  start)  {  If(_currInputProcessed  >  start)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  start)  {  If(_currInputProcessed  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    start)    {    If(_currInputProcessed  >  start)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
97	[BUG]  [BUGGY]  if(_currInputProcessed  >  start)  {  ||(_currInputProcessed  >  start)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  start)  {  ||(_currInputProcessed  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    start)    {    ||(_currInputProcessed  >  start)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
98	[BUG]  [BUGGY]  if(start  >  _origBufferLen)  {  ||(end  >  _origBufferLen)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _origBufferLen)  {  ||(end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  >  _origBufferLen)  {  ||(end  >  _origBufferLen)  {	  if(_origBufferLen    >    start)    {    ||(_origBufferLen    >    start)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
99	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  ||(end  >  _origBufferLen)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _origBufferLen)  {  ||(end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  >  _origBufferLen)  {  ||(end  >  _origBufferLen)  {	  if(_origBufferLen    >    start)    {    ||(_origBufferLen    >    start)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
100	[BUG]  [BUGGY]  if(_currInputProcessed  >=  0)  {  if(_currInputProcessed  >=  0)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >=  0)  {  if(_currInputProcessed  >=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >=    0)    {    if(_currInputProcessed  >=  0)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
101	[BUG]  [BUGGY]  if(_currInputProcessed  >=  0)  {  if(_currInputProcessed!=  0)  {  [CE]  ';'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >=  0)  {  if(_currInputProcessed!=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >=    0)    {    if(_currInputProcessed!=  0)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
102	[BUG]  [BUGGY]  if(_currInputProcessed  >=  0)  {  if(_currInputProcessed  >>  0)  {  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >=  0)  {  if(_currInputProcessed  >>  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >=    0)    {    if(_currInputProcessed  >>  0)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
103	[BUG]  [BUGGY]  if(_currInputProcessed  >=  0)  {  if(_currInputProcessed  ==  0)  {  [CE]  ';'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >=  0)  {  if(_currInputProcessed  ==  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >=    0)    {    if(_currInputProcessed  ==  0)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
104	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  If(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  If(_origBufferLen  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  _inputEnd)  {  If(_origBufferLen  >  end)  {	  if(_origBufferLen    >    end)    {    If(_origBufferLen    >    end)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
105	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  0))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
106	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
107	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)&&(_origBufferLen  >  0))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
108	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)||(_inputPtr  >  0))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)||(_inputPtr  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)||(_inputPtr  >  0))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
109	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0));  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)&&(_origBufferLen  >  0));	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
110	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)||(_inputPtr  >  _inputEnd));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)||(_inputPtr  >  _inputEnd));  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)||(_inputPtr  >  _inputEnd));	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
111	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0));  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0));  }  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  0));  }	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
112	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  0));  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  0));  }  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  0));  }	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
113	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputPtr)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(end  >  _inputPtr)  {	  if(_inputPtr    >    end)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	45	1	replace
114	[BUG]  [BUGGY]  if(end  >  _inputPtr)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputPtr)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  >  _inputPtr)  {	  if(_inputPtr    >    end)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	45	1	replace
115	[BUG]  [BUGGY]  _reportError( "Already  closed,  can  not  feed  more  input. ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Already  closed,  can  not  feed  more  input. ");  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Already  closed,  can  not  feed  more  input. ");	  _reportError(   "Already    closed,    can    not    feed    more    input       ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(end  <  _origBufferLen)  {	  if(end    >    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
117	[BUG]  [BUGGY]  if(end  <  _origBufferLen)  {  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  <  _origBufferLen)  {	  if(end    >    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
118	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(end  >  _currInputProcessed)  {	  if(end    >    _origBufferLen)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	7	1	replace
119	[BUG]  [BUGGY]  if(end  >  _currInputProcessed)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  >  _currInputProcessed)  {	  if(end    >    _origBufferLen)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	7	1	replace
120	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
121	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  If(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  If(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    If(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
122	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
123	[BUG]  [BUGGY]  if(start  >  _origBufferLen)  {  if(start  >  _origBufferLen)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _origBufferLen)  {  if(start  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _origBufferLen)    {    if(start  >  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
124	[BUG]  [BUGGY]  if(start  >  _origBufferLen)  {  If(start  >  _origBufferLen)  {  [CE]  ';'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _origBufferLen)  {  If(start  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _origBufferLen)    {    If(start  >  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
125	[BUG]  [BUGGY]  if(start  >  _origBufferLen)  {  ((  _origBufferLen  +  1)  <  _origBuffer.length))  {  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _origBufferLen)  {  ((  _origBufferLen  +  1)  <  _origBuffer.length))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _origBufferLen)    {    ((  _origBufferLen  +  1)  <  _origBuffer.length))  {	  	non-compiled	[CE]  not  a  statement	26	None	add
126	[BUG]  [BUGGY]  If(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  If(_origBufferLen  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	If(_origBufferLen  >  start)  {	  if(_origBufferLen    >    start)    {    If(_origBufferLen    >    start)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
127	[BUG]  [BUGGY]  If(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  If(_origBufferLen  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	If(_origBufferLen  >  end)  {	  if(_origBufferLen    >    start)    {    If(_origBufferLen    >    start)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
128	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  _inputPtr);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  _inputPtr);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  _inputPtr);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
129	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  _inputEnd  -  _inputPtr);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  _inputEnd  -  _inputPtr);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  _inputEnd  -  _inputPtr);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
130	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >=  _inputEnd)  {	  if(_currInputProcessed    >    0)    {    if(_currInputProcessed    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	35	1	replace
131	[BUG]  [BUGGY]  if(_origBufferLen  >=  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >=  _inputEnd)  {	  if(_currInputProcessed    >    0)    {    if(_currInputProcessed    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	35	1	replace
132	[BUG]  [BUGGY]  if(_currInputProcessed  >  end)  {  if(_currInputProcessed  >  end)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  end)  {  if(_currInputProcessed  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    end)    {    if(_currInputProcessed  >  end)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
133	[BUG]  [BUGGY]  if(_currInputProcessed  >  end)  {  If(_currInputProcessed  >  end)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  end)  {  If(_currInputProcessed  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    end)    {    If(_currInputProcessed  >  end)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
134	[BUG]  [BUGGY]  if(_currInputProcessed  >  end)  {  if(_currInputProcessed  >  start)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  end)  {  if(_currInputProcessed  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    end)    {    if(_currInputProcessed  >  start)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
135	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >=  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  0  ||  _currInputProcessed  >=  _origBufferLen)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	34	1	replace
136	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >=  _origBufferLen)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >=  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0  ||  _currInputProcessed  >=  _origBufferLen)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	34	1	replace
137	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >=  0  ||  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >=  0  ||  _currInputProcessed  <  _origBufferLen)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	34	1	replace
138	[BUG]  [BUGGY]  if(_origBufferLen  >=  0  ||  _currInputProcessed  <  _origBufferLen)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >=  0  ||  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >=  0  ||  _currInputProcessed  <  _origBufferLen)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	34	1	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  &&  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  0  &&  _currInputProcessed  <  _origBufferLen)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
140	[BUG]  [BUGGY]  if(_origBufferLen  >  0  &&  _currInputProcessed  <  _origBufferLen)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  &&  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0  &&  _currInputProcessed  <  _origBufferLen)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
141	[BUG]  [BUGGY]  If(_inputPtr  <  _inputEnd)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  If(_inputPtr  <  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	If(_inputPtr  <  _inputEnd)  {	  if(_inputPtr    >    start)    {    If(_inputPtr    >    start)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
142	[BUG]  [BUGGY]  If(_inputPtr  <  start)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  If(_inputPtr  <  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	If(_inputPtr  <  start)  {	  if(_inputPtr    >    start)    {    If(_inputPtr    >    start)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >  0  ||  _origBufferLen  >  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
144	[BUG]  [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0  ||  _origBufferLen  >  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
145	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >=  _inputEnd  ||  _currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	59	1	replace
146	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  _inputEnd  ||  _currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	59	1	replace
147	[BUG]  [BUGGY]  if(end  <  =  _origBufferLen)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  <  =  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  <  =  _origBufferLen)  {	  if(_origBufferLen    <    =    end)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
148	[BUG]  [BUGGY]  if(_origBufferLen  <  =  start)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  <  =  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  <  =  start)  {	  if(_origBufferLen    <    =    end)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
149	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  <  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  <  end)  {	  if(_origBufferLen    <    =    end)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	8	1	replace
150	[BUG]  [BUGGY]  if(_origBufferLen  <  end)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  <  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  <  end)  {	  if(_origBufferLen    <    =    end)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	8	1	replace
151	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  >  _inputEnd)  {	  if(_inputPtr    >    start)    {    If(_inputPtr    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	24	1	replace
152	[BUG]  [BUGGY]  if(start  >  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  >  _inputEnd)  {	  if(_inputPtr    >    start)    {    If(_inputPtr    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	24	1	replace
153	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)&&(_origBufferLen    >    0))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
154	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd));  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd));	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
155	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)||(_inputPtr  >  0));  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)||(_inputPtr  >  0));  }  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)||(_inputPtr  >  0));  }	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  <  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  <  _inputEnd)  {	  if(_inputPtr    >    end)    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
157	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  <  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  <  _inputEnd)  {	  if(_inputPtr    >    end)    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
158	[BUG]  [BUGGY]  if(_inputPtr  >  end)  {  ||(_inputPtr  >  end)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  end)  {  ||(_inputPtr  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    end)    {    ||(_inputPtr  >  end)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
159	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {  ((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)    ||(_origBufferLen    >    0))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
160	[BUG]  [BUGGY]  if(_inputPtr  >=  start)  {  if(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  start)  {  if(_origBufferLen  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  start)  {  if(_origBufferLen  >  end)  {	  if(_origBufferLen    >    end)    {    if(_origBufferLen    >    end)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
161	[BUG]  [BUGGY]  if(_inputPtr  >  start)  {  if(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  start)  {  if(_origBufferLen  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  start)  {  if(_origBufferLen  >  end)  {	  if(_origBufferLen    >    end)    {    if(_origBufferLen    >    end)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
162	[BUG]  [BUGGY]  if(_inputPtr  >=  end)  {  If(_inputPtr  >=  end)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  end)  {  If(_inputPtr  >=  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    end)    {    If(_inputPtr  >=  end)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
163	[BUG]  [BUGGY]  if(start  >  _origBufferLen)  {  ((  _origBufferLen  +  _origBufferLen)  >  _origBufferLen)  {  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _origBufferLen)  {  ((  _origBufferLen  +  _origBufferLen)  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _origBufferLen)    {    ((  _origBufferLen  +  _origBufferLen)  >  _origBufferLen)  {	  	non-compiled	[CE]  not  a  statement	26	None	add
164	[BUG]  [BUGGY]  if(start  >  _origBufferLen)  {  ((  _origBufferLen  +  _origBufferLen)  <  _origBufferLen)  {  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _origBufferLen)  {  ((  _origBufferLen  +  _origBufferLen)  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _origBufferLen)    {    ((  _origBufferLen  +  _origBufferLen)  <  _origBufferLen)  {	  	non-compiled	[CE]  not  a  statement	26	None	add
165	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >=  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  >=  _origBufferLen)  {	  if(start    >    _origBufferLen)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	27	1	replace
166	[BUG]  [BUGGY]  if(start  >=  _origBufferLen)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >=  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  >=  _origBufferLen)  {	  if(start    >    _origBufferLen)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	27	1	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  <  _origBufferLen)  {	  if(start    >    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
168	[BUG]  [BUGGY]  if(start  <  _origBufferLen)  {  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  <  _origBufferLen)  {	  if(start    >    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
169	[BUG]  [BUGGY]  if(end  >  _inputEnd)  {  ((  _inputEnd  >  _inputEnd)&&(end  >  _inputBufferLen))  {  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputEnd)  {  ((  _inputEnd  >  _inputEnd)&&(end  >  _inputBufferLen))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _inputEnd)    {    ((  _inputEnd  >  _inputEnd)&&(end  >  _inputBufferLen))  {	  	non-compiled	[CE]  not  a  statement	42	None	add
170	[BUG]  [BUGGY]  if(end  >  _inputEnd)  {  ((  _inputEnd  >  _inputEnd)||(end  >  _inputEnd))  {  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputEnd)  {  ((  _inputEnd  >  _inputEnd)||(end  >  _inputEnd))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _inputEnd)    {    ((  _inputEnd  >  _inputEnd)||(end  >  _inputEnd))  {	  	non-compiled	[CE]  not  a  statement	42	None	add
171	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  <  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  <  start)  {	  if(_inputPtr    >    start)    {    ||(_inputPtr    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	25	1	replace
172	[BUG]  [BUGGY]  if(_inputPtr  <  start)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  <  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  <  start)  {	  if(_inputPtr    >    start)    {    ||(_inputPtr    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	25	1	replace
173	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputStart)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputStart)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputStart)  {	  	non-compiled	[CE]  ';'  expected	58	None	add
174	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
175	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)||(_inputPtr  >  _inputEnd))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)||(_inputPtr  >  _inputEnd))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)||(_inputPtr  >  _inputEnd))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
176	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)||(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)||(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)||(_origBufferLen  >  0))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
177	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  >=  _inputEnd)  {	  if(start    >    _inputPtr)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	17	1	replace
178	[BUG]  [BUGGY]  if(start  >=  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  >=  _inputEnd)  {	  if(start    >    _inputPtr)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	17	1	replace
179	[BUG]  [BUGGY]  if(_origBufferLen  >  0)  {  If(_currInputProcessed  >  1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0)  {  If(_currInputProcessed  >  1)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0)  {  If(_currInputProcessed  >  1)  {	  if(_currInputProcessed    >    0)    {    If(_currInputProcessed    >    0)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
180	[BUG]  [BUGGY]  if(_origBufferLen  >  start)  {  If(_currInputProcessed  >  start)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  start)  {  If(_currInputProcessed  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  start)  {  If(_currInputProcessed  >  start)  {	  if(_currInputProcessed    >    0)    {    If(_currInputProcessed    >    0)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
181	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  ((  _origBufferLen  +  _origBufferLen)  >  _origBufferLen)  {  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _origBufferLen)  {  ((  _origBufferLen  +  _origBufferLen)  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _origBufferLen)    {    ((  _origBufferLen  +  _origBufferLen)  >  _origBufferLen)  {	  	non-compiled	[CE]  not  a  statement	6	None	add
182	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  ((  _origBufferLen  +  _origBufferLen)  <  _origBufferLen)  {  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _origBufferLen)  {  ((  _origBufferLen  +  _origBufferLen)  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _origBufferLen)    {    ((  _origBufferLen  +  _origBufferLen)  <  _origBufferLen)  {	  	non-compiled	[CE]  not  a  statement	6	None	add
183	[BUG]  [BUGGY]  if(_origBufferLength  >  0)  {  [CE]  cannot  find  symbol  _origBufferLength  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLength  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLength  >  0)  {	  if(_currInputProcessed    >    0)    {    ||    _currInputProcessed    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  _origBufferLength	37	None	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >  0  ||  _origBufferLen  >  _inputEnd)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
185	[BUG]  [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0  ||  _origBufferLen  >  _inputEnd)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >  0  ||  _origBufferLen  >  _currInputProcessed)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
187	[BUG]  [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  _currInputProcessed)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0  ||  _origBufferLen  >  _currInputProcessed)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
188	[BUG]  [BUGGY]  if(_currInputProcessed  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  <  =  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  <  =  end)  {	  if(_origBufferLen    <    =    end)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
189	[BUG]  [BUGGY]  if(start  >  _inputPtr)  {  ((  _inputPtr  +  start)>  _inputEnd)  {  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _inputPtr)  {  ((  _inputPtr  +  start)>  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _inputPtr)    {    ((  _inputPtr  +  start)>  _inputEnd)  {	  	non-compiled	[CE]  not  a  statement	16	None	add
190	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]                  AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  >  0)  {	  if(_origPtr    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	54	1	replace
191	[BUG]  [BUGGY]  if(start  >  0)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]                  AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  >  0)  {	  if(_origPtr    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	54	1	replace
192	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _inputPtr  >  0)&&(_inputEnd  >  0))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _inputPtr  >  0)&&(_inputEnd  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    0)    {    ((  _inputPtr  >  0)&&(_inputEnd  >  0))  {	  	non-compiled	[CE]  not  a  statement	38	None	add
193	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _inputPtr  >  0)  ||(_inputEnd  >  0))  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _inputPtr  >  0)  ||(_inputEnd  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    0)    {    ((  _inputPtr  >  0)  ||(_inputEnd  >  0))  {	  	non-compiled	[CE]  not  a  statement	38	None	add
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >  0  ||  _currInputProcessed  <  _origBufferLen)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
195	[BUG]  [BUGGY]  if(_inputPtr  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0  ||  _currInputProcessed  <  _origBufferLen)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
196	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  If(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _origBufferLen)  {  If(_origBufferLen  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  >  _origBufferLen)  {  If(_origBufferLen  >  start)  {	  if(_origBufferLen    >    start)    {    If(_origBufferLen    >    start)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
197	[BUG]  [BUGGY]  if(_currInputProcessed  >  start)  {  If(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  start)  {  If(_origBufferLen  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  start)  {  If(_origBufferLen  >  start)  {	  if(_origBufferLen    >    start)    {    If(_origBufferLen    >    start)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
198	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  if(_origBufferLen  >  0  ||  (_currInputProcessed  >  0))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  if(_origBufferLen  >  0  ||  (_currInputProcessed  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0    ||    _currInputProcessed    >    0)    {    if(_origBufferLen  >  0  ||  (_currInputProcessed  >  0))  {	  	non-compiled	[CE]  ';'  expected	31	None	add
199	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start  +  1);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start  +  1);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'       ",    start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
200	[BUG]  [BUGGY]  if(_origBufferLen  >  start)  {  If(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  start)  {  If(_origBufferLen  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  start)  {  If(_origBufferLen  >  end)  {	  if(_origBufferLen    >    end)    {    If(_origBufferLen    >    end)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
201	[BUG]  [BUGGY]  if(_currInputProcessed  >  end)  {  If(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  end)  {  If(_origBufferLen  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  end)  {  If(_origBufferLen  >  end)  {	  if(_origBufferLen    >    end)    {    If(_origBufferLen    >    end)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _inputPtr  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >  0  ||  _inputPtr  >  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
203	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _inputPtr  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0  ||  _inputPtr  >  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0  ||  _inputPtr  >  0)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    0)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
204	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0)  {  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)&&(_origBufferLen    >    0))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
205	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ");  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ");	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
206	[BUG]  [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  _currInputEnd)  {  [CE]  cannot  find  symbol  _currInputEnd  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0  ||  _origBufferLen  >  _currInputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0  ||  _origBufferLen  >  _currInputEnd)  {	  if(_currInputProcessed    >    0    ||    _origBufferLen    >    _inputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  _currInputEnd	59	None	replace
207	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _inputPtr  >  0)  ||(_inputEnd  >  _inputBufferLen));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _inputPtr  >  0)  ||(_inputEnd  >  _inputBufferLen));  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    0)    {    ((  _inputPtr  >  0)  ||(_inputEnd  >  _inputBufferLen));	  	non-compiled	[CE]  not  a  statement	38	None	add
208	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _inputPtr  >  0)&&(_inputEnd  <  =  _inputBufferLen));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _inputPtr  >  0)&&(_inputEnd  <  =  _inputBufferLen));  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    0)    {    ((  _inputPtr  >  0)&&(_inputEnd  <  =  _inputBufferLen));	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
209	[BUG]  [BUGGY]  if(_inputPtr  >  start)  {  If(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  start)  {  If(_origBufferLen  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  start)  {  If(_origBufferLen  >  end)  {	  if(_origBufferLen    >    start)    {    If(_origBufferLen    >    start)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
210	[BUG]  [BUGGY]  if(_inputPtr  >  start)  {  If(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  start)  {  If(_origBufferLen  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  start)  {  If(_origBufferLen  >  start)  {	  if(_origBufferLen    >    start)    {    If(_origBufferLen    >    start)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
211	[BUG]  [BUGGY]  if(_currInputProcessed  >  end)  {  If(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  end)  {  If(_origBufferLen  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  end)  {  If(_origBufferLen  >  start)  {	  if(_origBufferLen    >    start)    {    If(_origBufferLen    >    start)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
212	[BUG]  [BUGGY]  if(_inputPtr  >=  start)  {  If(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  start)  {  If(_origBufferLen  >  start)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  start)  {  If(_origBufferLen  >  start)  {	  if(_origBufferLen    >    start)    {    If(_origBufferLen    >    start)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >  _inputEnd)  {	  if(end    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	43	1	replace
214	[BUG]  [BUGGY]  if(_inputPtr  >  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  _inputEnd)  {	  if(end    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	43	1	replace
215	[BUG]  [BUGGY]  if(_currInputProcessed  >=  0)  {  If(_currInputProcessed  >=  0)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >=  0)  {  If(_currInputProcessed  >=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >=    0)    {    If(_currInputProcessed  >=  0)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
216	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  _currInputEnd))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  _currInputEnd))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  _currInputEnd))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
217	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
218	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_currInputEnd  >  _currInputEnd))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_currInputEnd  >  _currInputEnd))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_currInputEnd  >  _currInputEnd))  {	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
219	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  If(_inputPtr  >=  _inputEnd)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  If(_inputPtr  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >=    _inputEnd)    {    If(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
220	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  end);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  end);  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ",  end);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'.   ");    	non-compiled	[CE]  <identifier>  expected	57	None	replace
221	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  0  ||  _currInputProcessed  >=  0)  {	  if(_currInputProcessed    >=    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	51	1	replace
222	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >=  0)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >=  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0  ||  _currInputProcessed  >=  0)  {	  if(_currInputProcessed    >=    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	51	1	replace
223	[BUG]  [BUGGY]  if(_inputPtr  >  end)  {  If(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  end)  {  If(_origBufferLen  >  end)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  end)  {  If(_origBufferLen  >  end)  {	  if(_origBufferLen    >    end)    {    If(_origBufferLen    >    end)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
224	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0)  {  ((  _origBufferLen  >  0)||(_origBufferLen  >  0))  {	  if(_origBufferLen    >    0)    {    ((    _origBufferLen    >    0)    ||(_origBufferLen    >    0))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  _currInputProcessed)  {	  if(_currInputProcessed    >    end)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
226	[BUG]  [BUGGY]  if(_origBufferLen  >  _currInputProcessed)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  _currInputProcessed)  {	  if(_currInputProcessed    >    end)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
227	[BUG]  [BUGGY]  if(start  >  _origBufferLen)  {  ((  _origBufferLen  +  1)>  buf.length))  {  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _origBufferLen)  {  ((  _origBufferLen  +  1)>  buf.length))  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _origBufferLen)    {    ((  _origBufferLen  +  1)>  buf.length))  {	  	non-compiled	[CE]  not  a  statement	26	None	add
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  0  ||  _currInputProcessed  <  0)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
229	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  0)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0  ||  _currInputProcessed  <  0)  {	  if(_origBufferLen    >    0    ||    _currInputProcessed    <    _origBufferLen)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
230	[BUG]  [BUGGY]  if(start  >  _inputPtr)  {  ((  _inputPtr)start).reset();  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(start  >  _inputPtr)  {  ((  _inputPtr)start).reset();  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start    >    _inputPtr)    {    ((  _inputPtr)start).reset();	  	non-compiled	[CE]  ';'  expected	16	None	add
231	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  _currInputEnd));  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  _currInputEnd));  }  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {  ((  _currInputProcessed  >  0)||(_origBufferLen  >  _currInputEnd));  }	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
232	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd));  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd));  }  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)&&(_origBufferLen  >  _currInputEnd));  }	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
233	[BUG]  [BUGGY]  ((  _currInputProcessed  >  0)||(_inputPtr  >  _currInputEnd));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  ((  _currInputProcessed  >  0)||(_inputPtr  >  _currInputEnd));  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	((  _currInputProcessed  >  0)||(_inputPtr  >  _currInputEnd));	  if(_currInputProcessed    >    0)    {    ((    _currInputProcessed    >    0)    ||(_origBufferLen    >    _currInputEnd));    	non-compiled	[CE]  not  a  statement	55	None	replace
234	[BUG]  [BUGGY]  if(end  >  _inputEnd)  {  if(end  >  _inputStart)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Already  closed    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }        [BUGGY]  if(end  >  _inputEnd)  {  if(end  >  _inputStart)  {  [BUGGY]      _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end    >    _inputEnd)    {    if(end  >  _inputStart)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
