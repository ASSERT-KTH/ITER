bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_origBufferLen  >  0)  {  if(_origBufferLen  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0)  {  if(_origBufferLen  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0)    {    if(_origBufferLen  >  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
2	[BUG]  [BUGGY]  if(_origBufferLen  >  0)  {  If(_origBufferLen  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0)  {  If(_origBufferLen  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0)    {    If(_origBufferLen  >  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
3	[BUG]  [BUGGY]  if(_origBufferLen  >  0)  {  ||(_origBufferLen  >  0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0)  {  ||(_origBufferLen  >  0))  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0)    {    ||(_origBufferLen  >  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >  end)  {	  if(_origBufferLen    >    end)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
5	[BUG]  [BUGGY]  if(_currInputProcessed  >  end)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  end)  {	  if(_origBufferLen    >    end)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
6	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(end  >  _origBufferLen)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(end  >  _origBufferLen)  {	  if(_origBufferLen    >    end)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	6	1	replace
7	[BUG]  [BUGGY]  if(end  >  _origBufferLen)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(end  >  _origBufferLen)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  >  _origBufferLen)  {	  if(_origBufferLen    >    end)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	6	1	replace
8	[BUG]  [BUGGY]  if(_origBufferLen  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  <  =  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  <  =  end)  {	  if(_origBufferLen    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >=  _inputEnd)  {	  if(_origBufferLen    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	2	1	replace
10	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  _inputEnd)  {	  if(_origBufferLen    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	2	1	replace
11	[BUG]  [BUGGY]  _reportError( "Already  closed,  can  not  feed  more  input   ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  _reportError( "Already  closed,  can  not  feed  more  input   ");  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Already  closed,  can  not  feed  more  input   ");	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ");  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ");	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
13	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  start);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  start);  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  start);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  <  _inputEnd)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
15	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  <  _inputEnd)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
16	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(start  >  _inputPtr)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  >  _inputPtr)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	11	1	replace
17	[BUG]  [BUGGY]  if(start  >  _inputPtr)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(start  >  _inputPtr)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  >  _inputPtr)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	11	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >=  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >=  end)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
19	[BUG]  [BUGGY]  if(_inputPtr  >=  end)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >=  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >=  end)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
20	[BUG]  [BUGGY]  if(_origBufferLen  >  start)  {  if(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  start)  {  if(_origBufferLen  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    start)    {    if(_origBufferLen  >  start)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
21	[BUG]  [BUGGY]  if(_origBufferLen  >  start)  {  If(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  start)  {  If(_origBufferLen  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    start)    {    If(_origBufferLen  >  start)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
22	[BUG]  [BUGGY]  if(_origBufferLen  >  start)  {  ||(_origBufferLen  >  start)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  start)  {  ||(_origBufferLen  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    start)    {    ||(_origBufferLen  >  start)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
23	[BUG]  [BUGGY]  if(_inputPtr  >  start)  {  if(_inputPtr  >  start)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >  start)  {  if(_inputPtr  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    start)    {    if(_inputPtr  >  start)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
24	[BUG]  [BUGGY]  if(_inputPtr  >  start)  {  If(_inputPtr  >  start)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >  start)  {  If(_inputPtr  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    start)    {    If(_inputPtr  >  start)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
25	[BUG]  [BUGGY]  if(_inputPtr  >  start)  {  ||(_inputPtr  >  start)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >  start)  {  ||(_inputPtr  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr    >    start)    {    ||(_inputPtr  >  start)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
26	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(start  >  _origBufferLen)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(start  >  _origBufferLen)  {	  if(_origBufferLen    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	4	1	replace
27	[BUG]  [BUGGY]  if(start  >  _origBufferLen)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(start  >  _origBufferLen)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(start  >  _origBufferLen)  {	  if(_origBufferLen    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	4	1	replace
28	[BUG]  [BUGGY]  if(_origBufferLen  >  end)  {  if(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  end)  {  if(_origBufferLen  >  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    end)    {    if(_origBufferLen  >  end)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
29	[BUG]  [BUGGY]  if(_origBufferLen  >  end)  {  If(_origBufferLen  >  end)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  end)  {  If(_origBufferLen  >  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    end)    {    If(_origBufferLen  >  end)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
30	[BUG]  [BUGGY]  if(_origBufferLen  >  end)  {  if(_origBufferLen  >  start)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  end)  {  if(_origBufferLen  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    end)    {    if(_origBufferLen  >  start)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {	  if(_currInputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
32	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0  ||  _currInputProcessed  >  0)  {	  if(_currInputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {	  if(_currInputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
34	[BUG]  [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen  >  0  ||  _currInputProcessed  <  _origBufferLen)  {	  if(_currInputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
35	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  if(_currInputProcessed  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0)  {  if(_currInputProcessed  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0)    {    if(_currInputProcessed  >  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
36	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  If(_currInputProcessed  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0)  {  If(_currInputProcessed  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0)    {    If(_currInputProcessed  >  0)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
37	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ||  _currInputProcessed  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0)  {  ||  _currInputProcessed  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0)    {    ||  _currInputProcessed  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >  0)  {	  if(_inputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
39	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  0)  {	  if(_inputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
40	[BUG]  [BUGGY]  if(_origBufferLen  >  start)  {  int  _origBufferLen  =  _origBufferLen;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  start)  {  int  _origBufferLen  =  _origBufferLen;  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    start)    {    int  _origBufferLen  =  _origBufferLen;	  	non-compiled	[CE]  ';'  expected	3	None	add
41	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ||(_currInputProcessed  >  0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0)  {  ||(_currInputProcessed  >  0))  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0)    {    ||(_currInputProcessed  >  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
42	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(end  >  _inputEnd)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(end  >  _inputEnd)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	11	1	replace
43	[BUG]  [BUGGY]  if(end  >  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(end  >  _inputEnd)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(end  >  _inputEnd)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	11	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_inputPtr  >  end)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
45	[BUG]  [BUGGY]  if(_inputPtr  >  end)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_inputPtr  >  end)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_inputPtr  >  end)  {	  if(_inputPtr    >    start)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >  start)  {	  if(_origBufferLen    >    start)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
47	[BUG]  [BUGGY]  if(_currInputProcessed  >  start)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  start)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  start)  {	  if(_origBufferLen    >    start)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
48	[BUG]  [BUGGY]  if(_origBufferLen  >  0)  {  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0)  {  ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0)    {    ((  _origBufferLen  >  0)&&(_origBufferLen  >  0))  {	  	non-compiled	[CE]  not  a  statement	1	None	add
49	[BUG]  [BUGGY]  if(_origBufferLen  >  0)  {  ((  _origBufferLen  >  0)  ||(_origBufferLen  >  0))  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origBufferLen  >  0)  {  ((  _origBufferLen  >  0)  ||(_origBufferLen  >  0))  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origBufferLen    >    0)    {    ((  _origBufferLen  >  0)  ||(_origBufferLen  >  0))  {	  	non-compiled	[CE]  not  a  statement	1	None	add
50	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >=  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >=  0)  {	  if(_currInputProcessed    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	13	1	replace
51	[BUG]  [BUGGY]  if(_currInputProcessed  >=  0)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >=  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >=  0)  {	  if(_currInputProcessed    >    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Already  closed  	13	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {	  if(_origBufferLen    >    0)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
53	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0  ||  _origBufferLen  >  0)  {	  if(_origBufferLen    >    0)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
54	[BUG]  [BUGGY]  if(_origPtr  >  0)  {  [CE]  cannot  find  symbol  _origPtr  [FE]              AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_origPtr  >  0)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_origPtr  >  0)  {	  if(_inputProcessed    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  _origPtr	7	None	replace
55	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)  ||(_origBufferLen  >  _currInputEnd));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)  ||(_origBufferLen  >  _currInputEnd));  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0)    {    ((  _currInputProcessed  >  0)  ||(_origBufferLen  >  _currInputEnd));	  	non-compiled	[CE]  not  a  statement	12	None	add
56	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)  ||(_origBufferLen  >  _currInputEnd))  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0)  {  ((  _currInputProcessed  >  0)  ||(_origBufferLen  >  _currInputEnd))  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed    >    0)    {    ((  _currInputProcessed  >  0)  ||(_origBufferLen  >  _currInputEnd))  {	  	non-compiled	[CE]  not  a  statement	12	None	add
57	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ");  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'. ");	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {	  if(_currInputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
59	[BUG]  [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }      [BUGGY]  if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {  [BUGGY]    _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;  _currInputRowStart  =  start  -  (_inputEnd  -  _currInputRowStart);  _inputBuffer  =  buf;  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	if(_currInputProcessed  >  0  ||  _origBufferLen  >  _inputEnd)  {	  if(_currInputProcessed    >    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
