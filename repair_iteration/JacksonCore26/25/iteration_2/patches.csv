bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
2	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
4	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	5	1	replace
6	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	5	1	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  RuntimeException  	71	1	replace
8	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  RuntimeException  	71	1	replace
9	[BUG]  [BUGGY]  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
10	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	22	1	replace
12	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	22	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	22	1	replace
14	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	22	1	replace
15	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  <  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
16	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  If(_inputPtr  <  _inputEnd)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  If(_inputPtr  <  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    <    _inputEnd)    {    If(_inputPtr  <  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
17	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
19	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_binaryValue  ==  null)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_binaryValue  ==  null)  {	  if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >>    _inputEnd)    {    	compilable	  [FE]  RuntimeException  	16	1	replace
21	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_binaryValue  ==  null)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_binaryValue  ==  null)  {	  if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >>    _inputEnd)    {    	compilable	  [FE]  RuntimeException  	16	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_binaryValue!=  null)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_binaryValue!=  null)  {	  if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >>    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
23	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_binaryValue!=  null)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_binaryValue!=  null)  {	  if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >>    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	64	1	replace
25	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	64	1	replace
26	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	63	1	replace
27	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	63	1	replace
28	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
29	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
30	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
31	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
32	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
33	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
34	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
35	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
36	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.START_OBJECT))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.START_OBJECT))  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.START_OBJECT))  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
37	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
38	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
39	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
40	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
41	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
42	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
43	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
44	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
45	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
46	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  _currInputProcessed)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  _currInputProcessed)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  &&  _currInputProcessed)  {	  if(_inputPtr    >=    _inputEnd    ||    _currInputProcessed)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	76	None	replace
47	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currTokenType!=  JsonToken.VALUE_STRING)  {  [CE]  cannot  find  symbol  _currTokenType  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currTokenType!=  JsonToken.VALUE_STRING)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  ||  _currTokenType!=  JsonToken.VALUE_STRING)  {	  if(_inputPtr    >=    _inputEnd    ||    _currInputProcessed)    {    	non-compiled	[CE]  cannot  find  symbol  _currTokenType	76	None	replace
48	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _tokenInputTotal  ==  _binaryValue)  {  [CE]  incomparable  types:  long  and  byte[]  [FE]              AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _tokenInputTotal  ==  _binaryValue)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  ||  _tokenInputTotal  ==  _binaryValue)  {	  if(_inputPtr    >=    _inputEnd    ||    _currInputProcessed)    {    	non-compiled	[CE]  incomparable  types:  long  and  byte[]	76	None	replace
49	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
50	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF	  	non-compiled	[CE]  ';'  expected	79	None	add
51	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  not  a  statement	79	None	add
52	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF()  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF()  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF()	  	non-compiled	[CE]  ';'  expected	79	None	add
53	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEO  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEO  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEO	  	non-compiled	[CE]  ';'  expected	79	None	add
54	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  ';'  expected	78	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
56	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
58	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
59	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    &&    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
60	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    &&    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
61	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    &&    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
62	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  |&  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  |&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    &&    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  |&  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
63	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
64	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
65	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
66	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
67	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
68	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF	  	non-compiled	[CE]  ';'  expected	77	None	add
69	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF()  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF()  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF()	  	non-compiled	[CE]  ';'  expected	77	None	add
70	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEO  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEO  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEO	  	non-compiled	[CE]  ';'  expected	77	None	add
71	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  not  a  statement	77	None	add
72	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
73	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  NOT_OBJECT  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  cannot  find  symbol  NOT_OBJECT	68	None	replace
74	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
75	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	58	1	replace
76	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	58	1	replace
77	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	58	1	replace
78	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	58	1	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
80	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
81	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
82	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
83	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
84	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
86	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
87	[BUG]  [BUGGY]  ||  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  ||  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	||  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
88	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _finishTokenWithEO  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _finishTokenWithEO  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _finishTokenWithEO	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  ';'  expected	24	None	replace
89	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
91	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
92	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_NAME)  {  [CE]  cannot  find  symbol  START_NAME  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    If(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  START_NAME	67	None	replace
93	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
94	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
95	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
96	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
98	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	82	1	replace
100	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	82	1	replace
101	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
102	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
103	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
104	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  >=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  >=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  >=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
105	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
106	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
107	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  not  a  statement	19	None	add
108	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
109	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
110	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
111	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
112	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  >=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
113	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  >>  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  >>  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  >>  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
114	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  ==  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
115	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
116	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr!=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
117	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  >>  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
118	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
119	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
120	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
121	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
122	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
123	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
124	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  >=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
125	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    	compilable	  [FE]  RuntimeException  	10	1	replace
127	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_ARRAY)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    	compilable	  [FE]  RuntimeException  	10	1	replace
128	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
129	[BUG]  [BUGGY]  if(_inputPtr  >=  _binaryValue)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _binaryValue)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _binaryValue)  {	  if(_inputPtr    >=    inputEnd)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	61	None	replace
130	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _binaryValue.length)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _binaryValue.length)  {	  if(_inputPtr    >=    inputEnd)    {    	compilable	  [FE]  NullPointerException  	61	1	replace
131	[BUG]  [BUGGY]  if(_inputPtr  >=  _binaryValue.length)  {  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _binaryValue.length)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _binaryValue.length)  {	  if(_inputPtr    >=    inputEnd)    {    	compilable	  [FE]  NullPointerException  	61	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	80	1	replace
133	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	80	1	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	80	1	replace
135	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	80	1	replace
136	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  ';'  expected	80	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	20	1	replace
138	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	20	1	replace
139	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
140	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
141	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
142	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
143	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
144	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr!=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
145	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  >>  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
146	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  ==  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
147	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
148	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
149	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
150	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    &&    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
152	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    &&    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	1	1	replace
154	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	1	1	replace
155	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
156	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
157	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  not  a  statement	21	None	add
158	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
159	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
160	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	34	1	replace
161	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	34	1	replace
162	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
163	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
164	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
165	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
166	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd  ||!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  RuntimeException  	75	1	replace
167	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  ||!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  RuntimeException  	75	1	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  ==  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  ==  _inputEnd  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
169	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd  &&!loadMore())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  ==  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  ==  _inputEnd  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
170	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
171	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
172	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    _inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  not  a  statement	23	None	add
173	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
174	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
175	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
176	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >>  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >>  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >>  _inputEnd)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
177	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
178	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
179	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _inputPtr  >=  _inputEnd))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _inputPtr  >=  _inputEnd))  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _inputPtr  >=  _inputEnd))  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
180	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
181	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
182	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
183	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  >>  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
184	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    if(_inputPtr  >=  _inputEnd  &&!loadMore())  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
185	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr  >>  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr  >>  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    if(_inputPtr  >>  _inputEnd  &&!loadMore())  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
186	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr!=  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr!=  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    if(_inputPtr!=  _inputEnd  &&!loadMore())  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
187	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr  ==  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr  ==  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    if(_inputPtr  ==  _inputEnd  &&!loadMore())  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
188	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  If(_inputPtr  ==  _inputEnd)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  If(_inputPtr  ==  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    ==    _inputEnd)    {    If(_inputPtr  ==  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
189	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    _currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  not  a  statement	25	None	add
190	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr!=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr!=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr!=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
191	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  If(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  If(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    If(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
193	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
194	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
195	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
196	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
197	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd  &&! "loadMore())  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd  &&! "loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    if(_inputPtr  >=  _inputEnd  &&! "loadMore())  {	  	non-compiled	[CE]  unclosed  string  literal	74	None	add
198	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
200	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
202	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
203	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	14	1	replace
204	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	14	1	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
206	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
207	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
208	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  >>  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
209	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
210	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.EOF)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  EOF  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.EOF)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.EOF)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  cannot  find  symbol  EOF	68	None	replace
211	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
212	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	71	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	22	1	replace
214	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	22	1	replace
215	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF()  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF()  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF()	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  ';'  expected	78	None	replace
216	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
217	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
218	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
219	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    &&    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
220	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
221	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
222	[BUG]  [BUGGY]  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    &&    _currToken    ==    JsonToken.START_OBJECT)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	32	None	replace
223	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
224	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
225	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _binaryValue)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _binaryValue)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  ||  _binaryValue)  {	  if(_inputPtr    >=    _inputEnd    ||    _currInputProcessed)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	76	None	replace
226	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _bufferLength  ==  _inputEnd)  {  [CE]  cannot  find  symbol  _bufferLength  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _bufferLength  ==  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  ||  _bufferLength  ==  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd    ||    _currInputProcessed)    {    	non-compiled	[CE]  cannot  find  symbol  _bufferLength	76	None	replace
227	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  START_EOF  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  cannot  find  symbol  START_EOF	20	None	replace
228	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    If(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	52	1	replace
230	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    If(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	52	1	replace
231	[BUG]  [BUGGY]  if(_binaryValue  ==  _inputEnd)  {  [CE]  incomparable  types:  byte[]  and  int  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_binaryValue  ==  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_binaryValue  ==  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr!=    _inputEnd)    {    	non-compiled	[CE]  incomparable  types:  byte[]  and  int	17	None	replace
232	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _bufferLen  <  =  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _bufferLen  <  =  _inputEnd)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  ||  _bufferLen  <  =  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd    ||    _currInputProcessed)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
234	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
235	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  inputEnd  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  cannot  find  symbol  inputEnd	20	None	replace
236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  RuntimeException  	26	1	replace
237	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  RuntimeException  	26	1	replace
238	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  &&  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  &&  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  &&  _inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
239	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
240	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  >=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
241	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    	compilable	  [FE]  RuntimeException  	10	1	replace
242	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_ARRAY)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.START_ARRAY)    {    	compilable	  [FE]  RuntimeException  	10	1	replace
243	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
244	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  <  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd)    {    	compilable	  [FE]  RuntimeException  	42	1	replace
245	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  <  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd)    {    	compilable	  [FE]  RuntimeException  	42	1	replace
246	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&  _currInputProcessed!=  false)  {  [CE]  incomparable  types:  long  and  boolean  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  <  _inputEnd  &&  _currInputProcessed!=  false)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  <  _inputEnd  &&  _currInputProcessed!=  false)  {	  if(_inputPtr    <    _inputEnd)    {    	non-compiled	[CE]  incomparable  types:  long  and  boolean	42	None	replace
247	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
249	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
250	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	50	1	replace
251	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	50	1	replace
252	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	14	1	replace
253	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	14	1	replace
254	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currInputProcessed  ==  false)  {  return  _finishTokenWithEOF();  }  [CE]  incomparable  types:  long  and  boolean  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currInputProcessed  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currInputProcessed  ==  false)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  incomparable  types:  long  and  boolean	22	None	replace
255	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  inputEnd  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  cannot  find  symbol  inputEnd	22	None	replace
256	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currInputProcessed!=  false)  {  return  _finishTokenWithEOF();  }  [CE]  incomparable  types:  long  and  boolean  [FE]        AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currInputProcessed!=  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currInputProcessed!=  false)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  incomparable  types:  long  and  boolean	22	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
258	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
259	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  RuntimeException  	60	1	replace
260	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  RuntimeException  	60	1	replace
261	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.Start_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.Start_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.Start_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
262	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.NOT_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
263	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    If(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
264	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishTokenWithEOF();    }    if(_inputPtr  >>  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
265	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd  &&!loadMore())  {  [CE]  cannot  find  symbol  inputEnd  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  inputEnd  &&!loadMore())  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  inputEnd  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	non-compiled	[CE]  cannot  find  symbol  inputEnd	75	None	replace
266	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	36	1	replace
267	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  &&  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	36	1	replace
268	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
269	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
270	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
271	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.Start_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.Start_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.Start_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
273	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
275	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _finishTokenWithEOF();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	24	1	replace
