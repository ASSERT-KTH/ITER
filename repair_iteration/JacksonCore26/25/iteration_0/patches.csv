bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
2	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
4	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
6	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  RuntimeException  	49	1	replace
8	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [FE]  RuntimeException  [FE]          AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  RuntimeException  	49	1	replace
9	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]    [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	  	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
11	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
13	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }    [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  	compilable	  [FE]  AssertionFailedError  	49	1	replace
