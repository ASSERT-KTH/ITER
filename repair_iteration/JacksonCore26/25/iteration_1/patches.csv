bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
2	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
3	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  >=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
4	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  >>  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  if(_currToken  >>  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=    JsonToken.START_OBJECT)    {    if(_currToken  >>  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
5	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
6	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
7	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  >=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
8	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  If(_currToken  ==  JsonToken.START_OBJECT)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  If(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    If(_currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
10	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
12	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
14	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
15	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
16	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr  >>  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
17	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr!=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
18	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr  ==  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
20	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
22	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
24	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
26	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
28	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
30	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
32	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
33	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	13	1	replace
34	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	13	1	replace
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	13	1	replace
36	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	13	1	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
38	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  ==  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
40	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  ==  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
41	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  <  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
42	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  <  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
43	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr!=  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
44	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr!=  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
45	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
46	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
47	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
48	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
49	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
50	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
51	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  >=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
52	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  If(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  If(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    If(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
53	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
54	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
55	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
56	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  >=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
58	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
59	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
60	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
61	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd)  {  [CE]  cannot  find  symbol  inputEnd  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  inputEnd)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  inputEnd	6	None	replace
62	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
63	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
64	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
66	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.START_ARRAY)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
67	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    If(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
68	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  NOT_OBJECT  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	      	non-compiled	[CE]  cannot  find  symbol  NOT_OBJECT	9	None	replace
69	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  NOT_OBJECT  [FE]                  AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.NOT_OBJECT)  {  return  _finishTokenWithEOF();  }	      	non-compiled	[CE]  cannot  find  symbol  NOT_OBJECT	9	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
71	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
72	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
73	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken!=    JsonToken.START_OBJECT)    {    	compilable	  [FE]  RuntimeException  	8	1	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
75	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
76	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currInputProcessed)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currInputProcessed)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd  ||  _currInputProcessed)  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	6	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
78	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
80	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	if(_currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
82	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }      [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	if(_currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
