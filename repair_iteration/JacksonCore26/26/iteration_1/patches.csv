bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	        _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	add
2	[BUG]  [BUGGY]      _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	        _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	add
3	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _startToken();  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _startToken();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
4	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
5	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
6	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
7	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _binaryValue  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
8	[BUG]  [BUGGY]  _numTypesValid  =  _currToken  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _currToken  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _currToken  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
10	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputPtr  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	9	1	replace
12	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputPtr  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	9	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
14	[BUG]  [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
16	[BUG]  [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
18	[BUG]  [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
19	[BUG]  [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  ||  _numTypesValid  ==  NR_UNKNOWN  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  ||  _numTypesValid  ==  NR_UNKNOWN  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    NR_UNKNOWN    +    1;    ||  _numTypesValid  ==  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _binaryValue.length;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _binaryValue.length;	  _numTypesValid    =    _binaryValue;    	compilable	  [FE]  NullPointerException  	5	1	replace
21	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length;  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _binaryValue.length;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.length;	  _numTypesValid    =    _binaryValue;    	compilable	  [FE]  NullPointerException  	5	1	replace
22	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.size();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _binaryValue.size();  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.size();	  _numTypesValid    =    _binaryValue;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
23	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.toString();  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _binaryValue.toString();  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.toString();	  _numTypesValid    =    _binaryValue;    	non-compiled	[CE]  incompatible  types	5	None	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++];	  _numTypesValid    =    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
25	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++];	  _numTypesValid    =    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    0;    _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
27	[BUG]  [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    0;    _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  int  numTypesValid  =  0;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    0;    int  numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
29	[BUG]  [BUGGY]  _numTypesValid  =  0;  int  numTypesValid  =  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  int  numTypesValid  =  0;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    0;    int  numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    0;    _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
31	[BUG]  [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    0;    _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
32	[BUG]  [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  [CE]  break  outside  switch  or  loop  [FE]          AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    0;    _numTypesValid  =  0;  break;	  	non-compiled	[CE]  break  outside  switch  or  loop	1	None	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  2;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  2;	  _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
34	[BUG]  [BUGGY]  _numTypesValid  =  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  2;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  2;	  _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
36	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
38	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
39	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr);  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr);	  	non-compiled	[CE]  ';'  expected	10	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    1;    _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
41	[BUG]  [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    1;    _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  2;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    1;    _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
43	[BUG]  [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  2;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    1;    _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  3;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    1;    _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
45	[BUG]  [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  3;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  3;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    1;    _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  4;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    1;    _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
47	[BUG]  [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  _numTypesValid  =  4;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    1;    _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    0;    int  _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
49	[BUG]  [BUGGY]  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    0;    int  _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr];	  _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
51	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr];	  _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
52	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
56	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
58	[BUG]  [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	8	1	add
59	[BUG]  [BUGGY]  _numTypesValid  =  0L;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0L;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  0L;	  _numTypesValid    =    0;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
60	[BUG]  [BUGGY]      if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	        if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
61	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.getName();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _binaryValue.getName();  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.getName();	  _numTypesValid    =    _binaryValue;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
62	[BUG]  [BUGGY]  _numTypesValid  =  0;  ||  _numTypesValid  ==  0;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  0;  ||  _numTypesValid  ==  0;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    0;    ||  _numTypesValid  ==  0;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    1;    int  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
64	[BUG]  [BUGGY]  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    1;    int  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputBuffer.length;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer.length;	  _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
66	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputBuffer.length;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer.length;	  _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
68	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
69	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startToken();  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startToken();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
70	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  return  _startToken();  }  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  return  _startToken();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
71	[BUG]  [BUGGY]  _numTypesValid  =  _numTypes  +  1;  [CE]  cannot  find  symbol  _numTypes  [FE]    AssertionFailedError    [CONTEXT]    return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }      [BUGGY]  _numTypesValid  =  _numTypes  +  1;  [BUGGY]    _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _numTypes  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    	non-compiled	[CE]  cannot  find  symbol  _numTypes	9	None	replace
