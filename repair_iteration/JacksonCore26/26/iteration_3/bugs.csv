bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
2	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr  +  1];	  _numTypesValid    =    _inputPtr    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
4	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr  +  1];	  _numTypesValid    =    _inputPtr    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  _numTypesValid  =  _inputBuffer[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr];    _numTypesValid  =  _inputBuffer[_inputPtr];	  	compilable	  [FE]  AssertionFailedError  	50	1	add
6	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  _numTypesValid  =  _inputBuffer[_inputPtr];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  _numTypesValid  =  _inputBuffer[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr];    _numTypesValid  =  _inputBuffer[_inputPtr];	  	compilable	  [FE]  AssertionFailedError  	50	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  int  numTypesValid  =  _inputBuffer[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr];    int  numTypesValid  =  _inputBuffer[_inputPtr];	  	compilable	  [FE]  AssertionFailedError  	50	1	add
8	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  int  numTypesValid  =  _inputBuffer[_inputPtr];  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  int  numTypesValid  =  _inputBuffer[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr];    int  numTypesValid  =  _inputBuffer[_inputPtr];	  	compilable	  [FE]  AssertionFailedError  	50	1	add
9	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  _numTypesValid  =  _outputBuffer[_inputPtr];  [CE]  cannot  find  symbol  _outputBuffer  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  _numTypesValid  =  _outputBuffer[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr];    _numTypesValid  =  _outputBuffer[_inputPtr];	  	non-compiled	[CE]  cannot  find  symbol  _outputBuffer	50	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  Integer  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	Integer  _numTypesValid  =  _inputPtr;	  _numTypesValid    =    _inputPtr;    Integer    _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
11	[BUG]  [BUGGY]  Integer  _numTypesValid  =  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  Integer  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	Integer  _numTypesValid  =  _inputPtr;	  _numTypesValid    =    _inputPtr;    Integer    _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  -  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer.length  -  1;	  _numTypesValid    =    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
13	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  -  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer.length  -  1;	  _numTypesValid    =    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  -  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer.length  -  2;	  _numTypesValid    =    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
15	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length  -  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  -  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer.length  -  2;	  _numTypesValid    =    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputBuffer[_inputPtr++];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr++];    _numTypesValid  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	add
17	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputBuffer[_inputPtr++];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++];    _numTypesValid  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  int  numTypesValid  =  _inputBuffer[_inputPtr++];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr++];    int  numTypesValid  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	add
19	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  int  numTypesValid  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  int  numTypesValid  =  _inputBuffer[_inputPtr++];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++];    int  numTypesValid  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	add
20	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputBuffer[_inputPtr++].;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputBuffer[_inputPtr++].;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++];    _numTypesValid  =  _inputBuffer[_inputPtr++].;	  	non-compiled	[CE]  <identifier>  expected	24	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputPtr    +    1;    _numTypesValid  =  _inputPtr  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
22	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr    +    1;    _numTypesValid  =  _inputPtr  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  _numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputPtr    +    1;    int  _numTypesValid  =  _inputPtr  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
24	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  _numTypesValid  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  _numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr    +    1;    int  _numTypesValid  =  _inputPtr  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputPtr    +    1;    int  numTypesValid  =  _inputPtr  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
26	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  numTypesValid  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr    +    1;    int  numTypesValid  =  _inputPtr  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputPtr  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputPtr    +    1;    _numTypesValid  =  _inputPtr  +  2;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
28	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputPtr  +  2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputPtr  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputPtr    +    1;    _numTypesValid  =  _inputPtr  +  2;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
29	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer!=  null)  {  return  _inputBuffer[_inputPtr++];  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer!=  null)  {  return  _inputBuffer[_inputPtr++];  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer!=  null)  {  return  _inputBuffer[_inputPtr++];  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue!=    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	57	None	add
31	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	57	None	add
32	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  Integer  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  Integer  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    Integer  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	57	None	add
33	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	57	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  4;	  _numTypesValid    =    1;    _numTypesValid    =    4;    	compilable	  [FE]  AssertionFailedError  	47	1	replace
35	[BUG]  [BUGGY]  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  4;	  _numTypesValid    =    1;    _numTypesValid    =    4;    	compilable	  [FE]  AssertionFailedError  	47	1	replace
36	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  _numTypesValid  =  0;  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  _numTypesValid  =  0;  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    _numTypesValid    =    0;    _numTypesValid  =  0;  int  _numTypesValid  =  0;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	48	None	add
37	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  _numTypesValid  =  0;  int  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  _numTypesValid  =  0;  int  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    _numTypesValid    =    0;    int  _numTypesValid  =  0;  int  _numTypesValid  =  0;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	48	None	add
38	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    _numTypesValid    =    0;    int  _numTypesValid  =  0;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	48	None	add
39	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  _numTypesValid  =  0;  Integer  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  _numTypesValid  =  0;  Integer  _numTypesValid  =  0;  int  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    _numTypesValid    =    0;    Integer  _numTypesValid  =  0;  int  _numTypesValid  =  0;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	48	None	add
40	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken!=    JsonToken.VALUE_NULL)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
41	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken!=    JsonToken.VALUE_NULL)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
42	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length  -  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _binaryValue.length  -  1;	  _numTypesValid    =    _binaryValue.length;    	compilable	  [FE]  NullPointerException  	21	1	replace
43	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length  -  1;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length  -  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.length  -  1;	  _numTypesValid    =    _binaryValue.length;    	compilable	  [FE]  NullPointerException  	21	1	replace
44	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _binaryValue.length  +  1;	  _numTypesValid    =    _binaryValue.length;    	compilable	  [FE]  NullPointerException  	21	1	replace
45	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length  +  1;  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.length  +  1;	  _numTypesValid    =    _binaryValue.length;    	compilable	  [FE]  NullPointerException  	21	1	replace
46	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length  -  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _binaryValue.length  -  2;	  _numTypesValid    =    _binaryValue.length;    	compilable	  [FE]  NullPointerException  	21	1	replace
47	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length  -  2;  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length  -  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.length  -  2;	  _numTypesValid    =    _binaryValue.length;    	compilable	  [FE]  NullPointerException  	21	1	replace
48	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startToken();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
49	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startToken();    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
50	[BUG]  [BUGGY]  ||  _inputPtr  >=  _inputEnd)  {  return  _startToken();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  ||  _inputPtr  >=  _inputEnd)  {  return  _startToken();  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	||  _inputPtr  >=  _inputEnd)  {  return  _startToken();	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
51	[BUG]  [BUGGY]  ||  _numTypesValid  ==  0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  ||  _numTypesValid  ==  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	||  _numTypesValid  ==  0;	  _numTypesValid    =    0;    ||    _numTypesValid    ==    0;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
52	[BUG]  [BUGGY]  _numTypesValid  =  0;  ||  _binaryValue  ==  0;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  0;  ||  _binaryValue  ==  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  0;  ||  _binaryValue  ==  0;	  _numTypesValid    =    0;    ||    _numTypesValid    ==    0;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  1;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
54	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  1;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  2;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  2;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
56	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  2;  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  2;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  2;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  5;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  1;  _numTypesValid  =  5;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
58	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  5;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  5;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  1;  _numTypesValid  =  5;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  1;  _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
60	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  3;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  1;  _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
61	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  _numTypesValid  =  0;  int  numTypesValid  =  0;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  _numTypesValid  =  0;  int  numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    numTypesValid    =    0;    _numTypesValid  =  0;  int  numTypesValid  =  0;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	28	None	add
62	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  int  numTypesValid  =  0;  int  numTypesValid  =  0;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  int  numTypesValid  =  0;  int  numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    numTypesValid    =    0;    int  numTypesValid  =  0;  int  numTypesValid  =  0;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	28	None	add
63	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  int  numTypesValid  =  0;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  int  numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    numTypesValid    =    0;    int  numTypesValid  =  0;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	28	None	add
64	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  int  _numTypesValid  =  0;  int  numTypesValid  =  0;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  int  _numTypesValid  =  0;  int  numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    numTypesValid    =    0;    int  _numTypesValid  =  0;  int  numTypesValid  =  0;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	28	None	add
65	[BUG]  [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  Integer  numTypesValid  =  0;  int  numTypesValid  =  0;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]            AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    int  numTypesValid  =  0;  Integer  numTypesValid  =  0;  int  numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        int    numTypesValid    =    0;    Integer  numTypesValid  =  0;  int  numTypesValid  =  0;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	28	None	add
66	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	15	None	add
67	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	15	None	add
68	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  Integer  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  Integer  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    _numTypesValid    =    NR_UNKNOWN    +    1;    Integer  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	15	None	add
69	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	15	None	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
71	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
72	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr);  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr);  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	non-compiled	[CE]  ';'  expected	39	None	replace
73	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;	          _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	2	1	replace
74	[BUG]  [BUGGY]  _inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;	          _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	2	1	replace
75	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	          _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
76	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	          _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr]  &  0xFF;	  _numTypesValid    =    _inputBuffer[_inputPtr];    	compilable	  [FE]  AssertionFailedError  	51	1	replace
78	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr]  &  0xFF;	  _numTypesValid    =    _inputBuffer[_inputPtr];    	compilable	  [FE]  AssertionFailedError  	51	1	replace
79	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _binaryValue[_inputPtr];	  _numTypesValid    =    _inputBuffer[_inputPtr];    	compilable	  [FE]  NullPointerException  	51	1	replace
80	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr];  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue[_inputPtr];	  _numTypesValid    =    _inputBuffer[_inputPtr];    	compilable	  [FE]  NullPointerException  	51	1	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr]  +  1;	  _numTypesValid    =    _inputBuffer[_inputPtr];    	compilable	  [FE]  AssertionFailedError  	51	1	replace
82	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr]  +  1;	  _numTypesValid    =    _inputBuffer[_inputPtr];    	compilable	  [FE]  AssertionFailedError  	51	1	replace
83	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
84	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
85	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _binaryValue;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _binaryValue;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
86	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  null)  {  return  _binaryValue;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  null)  {  return  _binaryValue;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
87	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
88	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue  +  1;  _numTypesValid  =  _binaryValue  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue  +  1;  _numTypesValid  =  _binaryValue  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue  +  1;  _numTypesValid  =  _binaryValue  +  2;	  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid    =    NR_UNKNOWN    +    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;	  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid    =    NR_UNKNOWN    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
90	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;	  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid    =    NR_UNKNOWN    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
91	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  2;	  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid    =    NR_UNKNOWN    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
92	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++]  -  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  -  2;	  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid    =    NR_UNKNOWN    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
93	[BUG]  [BUGGY]  ||  _numTypesValid  ==  NR_UNKNOWN  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  ||  _numTypesValid  ==  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	||  _numTypesValid  ==  NR_UNKNOWN  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    ||    _numTypesValid    ==    NR_UNKNOWN    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
94	[BUG]  [BUGGY]  ||  _numTypesValid  ==  NR_UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  ||  _numTypesValid  ==  NR_UNKNOWN;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	||  _numTypesValid  ==  NR_UNKNOWN;	  _numTypesValid    =    NR_UNKNOWN    +    1;    ||    _numTypesValid    ==    NR_UNKNOWN    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
95	[BUG]  [BUGGY]  _numTypesValid  =  _numTypesValid  +  1;  ||  _numTypesValid  ==  _binaryValue  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _numTypesValid  +  1;  ||  _numTypesValid  ==  _binaryValue  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _numTypesValid  +  1;  ||  _numTypesValid  ==  _binaryValue  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    ||    _numTypesValid    ==    NR_UNKNOWN    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
97	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  2;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
99	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  2;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  2;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  int  _numTypesValid  =  1;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    1;    int  _numTypesValid  =  1;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
101	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  int  _numTypesValid  =  1;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  int  _numTypesValid  =  1;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    1;    int  _numTypesValid  =  1;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
103	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	40	1	add
104	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length;  _numTypesValid  =  _binaryValue.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _binaryValue.length;    _numTypesValid  =  _binaryValue.length;	  	compilable	  [FE]  NullPointerException  	20	1	add
105	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length;  _numTypesValid  =  _binaryValue.length;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length;  _numTypesValid  =  _binaryValue.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _binaryValue.length;    _numTypesValid  =  _binaryValue.length;	  	compilable	  [FE]  NullPointerException  	20	1	add
106	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length;  int  numTypesValid  =  _binaryValue.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _binaryValue.length;    int  numTypesValid  =  _binaryValue.length;	  	compilable	  [FE]  NullPointerException  	20	1	add
107	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length;  int  numTypesValid  =  _binaryValue.length;  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length;  int  numTypesValid  =  _binaryValue.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _binaryValue.length;    int  numTypesValid  =  _binaryValue.length;	  	compilable	  [FE]  NullPointerException  	20	1	add
108	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length;  _numTypesValid  =  _binaryValue.length);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length;  _numTypesValid  =  _binaryValue.length);  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _binaryValue.length;    _numTypesValid  =  _binaryValue.length);	  	non-compiled	[CE]  ';'  expected	20	None	add
109	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _startDocument();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _startDocument();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _startDocument();  }	          if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument();    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
110	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startDocument();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startDocument();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startDocument();  }	          if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument();    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
111	[BUG]  [BUGGY]  ||  _inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  ||  _inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	||  _inputPtr  >=  _inputEnd)  {  return  _startDocument();  }	          if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument();    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
113	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
115	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
116	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  RN_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  cannot  find  symbol  RN_UNKNOWN  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  RN_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  RN_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  cannot  find  symbol  RN_UNKNOWN	13	None	add
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
118	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  -1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  -1;	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
120	[BUG]  [BUGGY]  _numTypesValid  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  -1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  -1;	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    2;    _numTypesValid  =  1;  _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	42	1	add
122	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    2;    _numTypesValid  =  1;  _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	42	1	add
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    2;    _numTypesValid  =  1;  _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	42	1	add
124	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  3;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    2;    _numTypesValid  =  1;  _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	42	1	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  2;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    2;    _numTypesValid  =  2;  _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	42	1	add
126	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  2;  _numTypesValid  =  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  2;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    2;    _numTypesValid  =  2;  _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	42	1	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    2;    _numTypesValid  =  1;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	42	1	add
128	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  2;  _numTypesValid  =  1;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    2;    _numTypesValid  =  1;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	42	1	add
129	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        int    numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	37	None	add
130	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        int    numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	37	None	add
131	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  int  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  int  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        int    numTypesValid    =    _inputPtr;    int  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	37	None	add
132	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  Integer  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  Integer  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        int    numTypesValid    =    _inputPtr;    Integer  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	37	None	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr++];  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr++];  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
134	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr++];  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr++];  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr++];  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	int  _numTypesValid  =  0;	  _numTypesValid    =    1;    int    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
136	[BUG]  [BUGGY]  int  _numTypesValid  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	int  _numTypesValid  =  0;	  _numTypesValid    =    1;    int    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
137	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
138	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
139	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
140	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
141	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
142	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    _numTypesValid  =  _inputBuffer[_inputPtr++]  +  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
143	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr++].  +  1;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr++].  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    _numTypesValid  =  _inputBuffer[_inputPtr++].  +  1;	  	non-compiled	[CE]  <identifier>  expected	9	None	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  3;	  _numTypesValid    =    1;    _numTypesValid    =    3;    	compilable	  [FE]  AssertionFailedError  	45	1	replace
145	[BUG]  [BUGGY]  _numTypesValid  =  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  3;	  _numTypesValid    =    1;    _numTypesValid    =    3;    	compilable	  [FE]  AssertionFailedError  	45	1	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	67	1	add
147	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	67	1	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	67	1	add
149	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	67	1	add
150	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputIndex;  [CE]  cannot  find  symbol  _inputIndex  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputIndex;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputIndex;	  	non-compiled	[CE]  cannot  find  symbol  _inputIndex	67	None	add
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputEnd;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputEnd;	  	compilable	  [FE]  AssertionFailedError  	67	1	add
152	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputEnd;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputEnd;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputEnd;	  	compilable	  [FE]  AssertionFailedError  	67	1	add
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    int    numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
154	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    int    numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
155	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  numTypesValid  =  _inputPtr;  }  [CE]  cannot  find  symbol  numTypesValid  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  numTypesValid  =  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  numTypesValid  =  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    int    numTypesValid    =    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  numTypesValid	38	None	replace
156	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_inputPtr  =  _inputBuffer[_inputPtr++];	  _numTypesValid    =    _inputPtr;    int    numTypesValid    =    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	1	replace
157	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++];	  _numTypesValid    =    _inputPtr;    int    numTypesValid    =    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	1	replace
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
159	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	compilable	  [FE]  AssertionFailedError  	53	1	replace
160	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
161	[BUG]  [BUGGY]  ||  _inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  ||  _inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	||  _inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  1;  _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
163	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  1;  _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  1;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
165	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  1;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  2;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  2;  _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
167	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  2;  _numTypesValid  =  3;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  2;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  2;  _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  5;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  1;  _numTypesValid  =  5;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
169	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  5;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  5;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  1;  _numTypesValid  =  5;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
170	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.toString()  +  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.toString()  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.toString()  +  1;	  _numTypesValid    =    _binaryValue.toString();    	non-compiled	[CE]  incompatible  types	23	None	replace
171	[BUG]  [BUGGY]  _numTypesValid  =  _nextToken();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _nextToken();  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _nextToken();	  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid    =    NR_UNKNOWN    +    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
172	[BUG]  [BUGGY]  _numTypesValid  =  _currToken.nextToken()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _currToken.nextToken()  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _currToken.nextToken()  +  1;	  _numTypesValid    =    _currToken    +    1;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    2;    _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	33	1	add
174	[BUG]  [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    2;    _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	33	1	add
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    2;    _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	33	1	add
176	[BUG]  [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  3;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    2;    _numTypesValid  =  3;	  	compilable	  [FE]  AssertionFailedError  	33	1	add
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    2;    _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	33	1	add
178	[BUG]  [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    2;    _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	33	1	add
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    2;    _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	33	1	add
180	[BUG]  [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  2;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    2;    _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	33	1	add
181	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.size()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.size()  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.size()  +  1;	  _numTypesValid    =    _binaryValue.size();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
182	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length();  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.length();	  _numTypesValid    =    _binaryValue.size();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
183	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr++];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _binaryValue[_inputPtr++];	  _numTypesValid    =    _inputBuffer[_inputPtr++];    	compilable	  [FE]  NullPointerException  	25	1	replace
184	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr++];  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr++];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue[_inputPtr++];	  _numTypesValid    =    _inputBuffer[_inputPtr++];    	compilable	  [FE]  NullPointerException  	25	1	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
186	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
188	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  2;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
190	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  2;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  3;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
192	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  3;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  3;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  3;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  0;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    1;    _numTypesValid  =  0;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
194	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  0;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  0;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    1;    _numTypesValid  =  0;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  0;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    1;    _numTypesValid  =  0;  _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
196	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  0;  _numTypesValid  =  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  0;  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    1;    _numTypesValid  =  0;  _numTypesValid  =  2;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  int  _numTypesValid  =  0;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    1;    int  _numTypesValid  =  0;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
198	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  int  _numTypesValid  =  0;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  int  _numTypesValid  =  0;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    1;    int  _numTypesValid  =  0;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
200	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  _numTypesValid  =  1;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
201	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	                _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
202	[BUG]  [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	                _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
203	[BUG]  [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	                _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	1	None	add
204	[BUG]  [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  (_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  (_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	                _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    (_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);	  	non-compiled	[CE]  not  a  statement	1	None	add
205	[BUG]  [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	                _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	26	1	add
207	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0;  _numTypesValid  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	26	1	add
208	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0,  _numTypesValid  =  0;  _numTypesValid  =  0;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0,  _numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    0;    _numTypesValid  =  0,  _numTypesValid  =  0;  _numTypesValid  =  0;	  	non-compiled	[CE]  ';'  expected	26	None	add
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  int  numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    0;    int  numTypesValid  =  0;  _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	26	1	add
210	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  int  numTypesValid  =  0;  _numTypesValid  =  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  int  numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    0;    int  numTypesValid  =  0;  _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	26	1	add
211	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0;  _numTypesValid  =  0;  case  MAJOR_ROOT:  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0;  _numTypesValid  =  0;  case  MAJOR_ROOT:  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    0;    _numTypesValid  =  0;  _numTypesValid  =  0;  case  MAJOR_ROOT:	  	non-compiled	[CE]  orphaned  case	26	None	add
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	int  numTypesValid  =  0;	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
213	[BUG]  [BUGGY]  int  numTypesValid  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	int  numTypesValid  =  0;	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
214	[BUG]  [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        int    _numTypesValid    =    1;    _numTypesValid  =  1;  int  _numTypesValid  =  1;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	63	None	add
215	[BUG]  [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  int  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  int  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        int    _numTypesValid    =    1;    int  _numTypesValid  =  1;  int  _numTypesValid  =  1;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	63	None	add
216	[BUG]  [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  Integer  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  Integer  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        int    _numTypesValid    =    1;    Integer  _numTypesValid  =  1;  int  _numTypesValid  =  1;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	63	None	add
217	[BUG]  [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  int  _numTypesValid  =  1;  int  _numTypesValid  =  2;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  int  _numTypesValid  =  1;  int  _numTypesValid  =  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        int    _numTypesValid    =    1;    int  _numTypesValid  =  1;  int  _numTypesValid  =  2;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	63	None	add
218	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++];  int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	58	1	replace
219	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++];  int  numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	58	1	replace
220	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  null)  {  return  _currToken;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  null)  {  return  _currToken;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  null)  {  return  _currToken;  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
221	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _currInputProcessed;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _currInputProcessed;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _currInputProcessed;  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  1;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
223	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  1;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
224	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	68	1	replace
225	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	68	1	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
227	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  0  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  0;  _numTypesValid  =  0  +  _inputPtr;	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
229	[BUG]  [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  0  +  _inputPtr;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  0;  _numTypesValid  =  0  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  0;  _numTypesValid  =  0  +  _inputPtr;	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
230	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue  *  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue  *  1;	  _numTypesValid    =    _binaryValue    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
231	[BUG]  [BUGGY]  _numTypesValid  =  0;  break;  [CE]  break  outside  switch  or  loop  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  0;  break;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  0;  break;	  _numTypesValid    =    0;    _numTypesValid    =    0;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	32	None	replace
232	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  [CE]  break  outside  switch  or  loop  [FE]                AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	32	None	replace
233	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  break  outside  switch  or  loop  [FE]                  AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	32	None	replace
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
235	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
237	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    _inputPtr  =  _inputPtr;  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
238	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
239	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
241	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	35	1	add
242	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++]  &  1;	  _numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
243	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++]  &  1;	  _numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
244	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _binaryValue[_inputPtr++]  +  1;	  _numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  NullPointerException  	10	1	replace
245	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr++]  +  1;  [FE]  NullPointerException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue[_inputPtr++]  +  1;	  _numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  NullPointerException  	10	1	replace
246	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        Integer    _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	55	None	add
247	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        Integer    _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	55	None	add
248	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  int  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  int  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        Integer    _numTypesValid    =    _inputPtr;    int  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	55	None	add
249	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  _inputPtr  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]          AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  _inputPtr  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        Integer    _numTypesValid    =    _inputPtr;    _inputPtr  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	55	None	add
250	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
251	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length;  _numTypesValid  =  _inputBuffer.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer.length;    _numTypesValid  =  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
253	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length;  _numTypesValid  =  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length;  _numTypesValid  =  _inputBuffer.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer.length;    _numTypesValid  =  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length;  int  numTypesValid  =  _inputBuffer.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer.length;    int  numTypesValid  =  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
255	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length;  int  numTypesValid  =  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length;  int  numTypesValid  =  _inputBuffer.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer.length;    int  numTypesValid  =  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
256	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length;  _numTypesValid  =  _inputBuffer.length);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length;  _numTypesValid  =  _inputBuffer.length);  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer.length;    _numTypesValid  =  _inputBuffer.length);	  	non-compiled	[CE]  ';'  expected	65	None	add
257	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr  +  1);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr  +  1);  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr  +  1);	  _numTypesValid    =    _inputPtr    +    1;    	non-compiled	[CE]  ']'  expected	12	None	replace
258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputPtr  +  2;	  _numTypesValid    =    _inputPtr    +    1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
259	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr  +  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputPtr  +  2;	  _numTypesValid    =    _inputPtr    +    1;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
260	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
261	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }	          if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument();    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
262	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue!=  null)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue!=  null)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }	          if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument();    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
263	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }	          if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument();    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
264	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _startDocument();  }	          if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument();    }    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	60	None	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
266	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
267	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  else  {  _reportUnsupportedOperation();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  else  {  _reportUnsupportedOperation();  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  UnsupportedOperationException  	29	1	replace
268	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  else  {  _reportUnsupportedOperation();  }  [FE]  UnsupportedOperationException  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  else  {  _reportUnsupportedOperation();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  else  {  _reportUnsupportedOperation();  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  UnsupportedOperationException  	29	1	replace
269	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  else  {  _reportUnexpectedChar(ch,  ' "');  }  [CE]  cannot  find  symbol  ch  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  else  {  _reportUnexpectedChar(ch,  ' "');  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  else  {  _reportUnexpectedChar(ch,  ' "');  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	non-compiled	[CE]  cannot  find  symbol  ch	29	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        int    _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
271	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
273	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
275	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  0;  }	  _numTypesValid    =    _inputPtr;    int    numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
277	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  int  numTypesValid  =  0;  }	  _numTypesValid    =    _inputPtr;    int    numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
278	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _inputValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [CE]  cannot  find  symbol  _inputValid  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _inputValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    _inputValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _inputValid	35	None	add
279	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
280	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
281	[BUG]  [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  ||  _numTypesValid  >=  NR_UNKNOWN  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  NR_UNKNOWN  +  1;  ||  _numTypesValid  >=  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  NR_UNKNOWN  +  1;  ||  _numTypesValid  >=  NR_UNKNOWN  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    ||    _numTypesValid    ==    NR_UNKNOWN    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
282	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  [CE]  break  outside  switch  or  loop  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue  ==  null)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue  ==  null)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	32	None	replace
283	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  [CE]  break  outside  switch  or  loop  [FE]                AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue!=  null)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue!=  null)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  break;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	32	None	replace
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputEnd  +  1;  int  numTypesValid  =  _inputEnd  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputEnd  +  1;  int  numTypesValid  =  _inputEnd  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
285	[BUG]  [BUGGY]  _numTypesValid  =  _inputEnd  +  1;  int  numTypesValid  =  _inputEnd  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputEnd  +  1;  int  numTypesValid  =  _inputEnd  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputEnd  +  1;  int  numTypesValid  =  _inputEnd  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
286	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  int  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    int  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
287	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  int  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  int  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++]    +    1;    int  _numTypesValid  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  int  _numTypesValid  =  _inputBuffer[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer[_inputPtr];    int  _numTypesValid  =  _inputBuffer[_inputPtr];	  	compilable	  [FE]  AssertionFailedError  	50	1	add
289	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  int  _numTypesValid  =  _inputBuffer[_inputPtr];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr];  int  _numTypesValid  =  _inputBuffer[_inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr];    int  _numTypesValid  =  _inputBuffer[_inputPtr];	  	compilable	  [FE]  AssertionFailedError  	50	1	add
290	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr  +  _inputPtr);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr  +  _inputPtr);  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr  +  _inputPtr);	  	non-compiled	[CE]  ']'  expected	67	None	add
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	67	1	add
292	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    int  numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr  +  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	67	1	add
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  6;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  1;  _numTypesValid  =  6;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
294	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  6;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  1;  _numTypesValid  =  6;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  1;  _numTypesValid  =  6;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  2;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  2;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
296	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  2;  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  3;  _numTypesValid  =  2;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    3;    _numTypesValid  =  2;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
297	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
298	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
299	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length;  int  _numTypesValid  =  _binaryValue.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _binaryValue.length;    int  _numTypesValid  =  _binaryValue.length;	  	compilable	  [FE]  NullPointerException  	20	1	add
300	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.length;  int  _numTypesValid  =  _binaryValue.length;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.length;  int  _numTypesValid  =  _binaryValue.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _binaryValue.length;    int  _numTypesValid  =  _binaryValue.length;	  	compilable	  [FE]  NullPointerException  	20	1	add
301	[BUG]  [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	                _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	1	None	add
302	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        int    numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	37	None	add
303	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
304	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue!=  null)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue!=  null)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
305	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xF;	  _numTypesValid    =    _inputBuffer[_inputPtr++];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	1	replace
306	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xF;	  _numTypesValid    =    _inputBuffer[_inputPtr++];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	1	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
308	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_currToken  ==  JsonToken.START_OBJECT)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
310	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
311	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.NOT_ASCII)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [CE]  cannot  find  symbol  NOT_ASCII  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.NOT_ASCII)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.NOT_ASCII)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	non-compiled	[CE]  cannot  find  symbol  NOT_ASCII	27	None	replace
312	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.trim();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.trim();  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.trim();	  _numTypesValid    =    _binaryValue.toString();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
313	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue  +  1L;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue  +  1L;	  _numTypesValid    =    _binaryValue    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	7	None	replace
314	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.getParent();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.getParent();  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.getParent();	  _numTypesValid    =    _binaryValue.getName();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
315	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  inputEnd)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  inputEnd)  {  if(_binaryValue  ==  null)  {  return  _binaryValue;  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
316	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _startDocument(ch);  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _startDocument(ch);  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  3;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  3;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
318	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  3;  _numTypesValid  =  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  3;  _numTypesValid  =  4;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  3;  _numTypesValid  =  4;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
319	[BUG]  [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    int  _numTypesValid  =  1;  int  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        int    _numTypesValid    =    1;    int  _numTypesValid  =  1;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	63	None	add
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue  ==  null)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_binaryValue  ==  null)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
321	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_binaryValue  ==  null)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_binaryValue  ==  null)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer.length  +  1;	  _numTypesValid    =    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
323	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer.length  +  1;	  _numTypesValid    =    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	66	1	replace
324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  int  numTypesValid  =  0;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    1;    int  numTypesValid  =  0;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
325	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  int  numTypesValid  =  0;  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  1;  int  numTypesValid  =  0;  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    1;    int  numTypesValid  =  0;  _numTypesValid  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	1	add
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputEnd  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputEnd  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
327	[BUG]  [BUGGY]  _numTypesValid  =  _inputEnd  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputEnd  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputEnd  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
328	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr  +  _inputPtr;  [CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    Integer  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        Integer    _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  Integer  _numTypesValid  =  _inputPtr  +  _inputPtr;	  	non-compiled	[CE]  variable  _numTypesValid  is  already  defined  in  method  nextToken()	55	None	add
329	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  inputEnd)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  inputEnd)  {  if(_binaryValue!=  null)  {  return  _binaryValue;  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue!=    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
330	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed!=  null)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed!=  null)  {  return  _startDocument(ch);  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed!=  null)  {  return  _startDocument(ch);  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue!=    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
331	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  null)  {  return  _currToken;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  null)  {  return  _currToken;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken!=  null)  {  return  _currToken;  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue!=    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length;  int  _numTypesValid  =  _inputBuffer.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid    =    _inputBuffer.length;    int  _numTypesValid  =  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
333	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length;  int  _numTypesValid  =  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length;  int  _numTypesValid  =  _inputBuffer.length;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer.length;    int  _numTypesValid  =  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	65	1	add
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  int  _numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    0;    int  _numTypesValid  =  0;  _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	26	1	add
335	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  int  _numTypesValid  =  0;  _numTypesValid  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  int  _numTypesValid  =  0;  _numTypesValid  =  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    0;    int  _numTypesValid  =  0;  _numTypesValid  =  0;	  	compilable	  [FE]  AssertionFailedError  	26	1	add
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
337	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  Integer  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    Integer  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
339	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  Integer  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  Integer  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    Integer  _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
340	[BUG]  [BUGGY]  _numTypesValid  =  0;  ||  _numTypesValid  >=  0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  0;  ||  _numTypesValid  >=  0;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  0;  ||  _numTypesValid  >=  0;	  _numTypesValid    =    0;    ||    _numTypesValid    ==    0;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
341	[BUG]  [BUGGY]  _numTypesValid  =  _currToken  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _currToken  +  1L;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _currToken  +  1L;	  _numTypesValid    =    _currToken    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	replace
342	[BUG]  [BUGGY]  _numTypesValid  =  _currToken.length  +  1;  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _currToken.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _currToken.length  +  1;	  _numTypesValid    =    _currToken    +    1;    	non-compiled	[CE]  cannot  find  symbol  length	8	None	replace
343	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    int  _numTypesValid  =  NR_UNKNOWN  +  1;  int  numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	57	None	add
344	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  Integer  numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    int  numTypesValid  =  NR_UNKNOWN  +  1;  Integer  numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        int    numTypesValid    =    NR_UNKNOWN    +    1;    Integer  numTypesValid  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	57	None	add
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	int  numTypesValid  =  _inputPtr  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
346	[BUG]  [BUGGY]  int  numTypesValid  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	int  numTypesValid  =  _inputPtr  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputPtr  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
348	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputPtr  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer.length  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
350	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer.length  +  1;  int  numTypesValid  =  _inputBuffer.length  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
351	[BUG]  [BUGGY]  _numTypesValid  =  _numTypesValid  +  1;  ||  _numTypesValid  ==  _numTypesValid  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _numTypesValid  +  1;  ||  _numTypesValid  ==  _numTypesValid  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _numTypesValid  +  1;  ||  _numTypesValid  ==  _numTypesValid  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    ||    _numTypesValid    ==    NR_UNKNOWN    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
352	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  break;  }  [CE]  break  outside  switch  or  loop  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  break;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  break;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    break;    	non-compiled	[CE]  break  outside  switch  or  loop	32	None	replace
353	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	int  _numTypesValid  =  _inputPtr  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
354	[BUG]  [BUGGY]  int  _numTypesValid  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  _inputPtr  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	int  _numTypesValid  =  _inputPtr  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	int  _numTypesValid  =  NR_UNKNOWN  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
356	[BUG]  [BUGGY]  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	int  _numTypesValid  =  NR_UNKNOWN  +  1;	  _numTypesValid    =    NR_UNKNOWN    +    1;    int    _numTypesValid    =    NR_UNKNOWN    +    1;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
357	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr  +  _inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr  +  _inputPtr];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	1	add
358	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr  +  _inputPtr];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr  +  _inputPtr;  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr  +  _inputPtr];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr    +    _inputPtr;    _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputBuffer[_inputPtr  +  _inputPtr];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	67	1	add
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }  else  {  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }  else  {  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    ||    _numTypesValid    ==    0;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
360	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }  else  {  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }  else  {  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }  else  {  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    ||    _numTypesValid    ==    0;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    ||    _numTypesValid    ==    0;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
362	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    ||    _numTypesValid    ==    0;    	compilable	  [FE]  AssertionFailedError  	62	1	replace
363	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	non-compiled	[CE]  incompatible  types	5	None	replace
364	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  numTypesValid  =  0;  }  [CE]  cannot  find  symbol  numTypesValid  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  numTypesValid  =  0;  }	  _numTypesValid    =    _inputPtr;    int    numTypesValid    =    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  numTypesValid	38	None	replace
365	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  RN_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [CE]  cannot  find  symbol  RN_UNKNOWN  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  RN_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    _numTypesValid  =  RN_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;	  	non-compiled	[CE]  cannot  find  symbol  RN_UNKNOWN	17	None	add
366	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  RR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [CE]  cannot  find  symbol  RR_UNKNOWN  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  2;  _numTypesValid  =  RR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    2;    _numTypesValid  =  RR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  2;	  	non-compiled	[CE]  cannot  find  symbol  RR_UNKNOWN	17	None	add
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
368	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_currToken  ==  JsonToken.VALUE_NULL)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
370	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL)  {  _numTypesValid  =  0;  int  numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
372	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
373	[BUG]  [BUGGY]  if(_numTypes  >  0)  {  _numTypesValid  =  0;  }  else  {  _numTypesValid  =  0;  }  [CE]  cannot  find  symbol  _numTypes  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypes  >  0)  {  _numTypesValid  =  0;  }  else  {  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypes  >  0)  {  _numTypesValid  =  0;  }  else  {  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	non-compiled	[CE]  cannot  find  symbol  _numTypes	27	None	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
375	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }	  _numTypesValid    =    0;    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	int  _numTypesValid  =  _inputPtr;	  _numTypesValid    =    _inputPtr;    Integer    _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
377	[BUG]  [BUGGY]  int  _numTypesValid  =  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	int  _numTypesValid  =  _inputPtr;	  _numTypesValid    =    _inputPtr;    Integer    _numTypesValid    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  6;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  1;  _numTypesValid  =  6;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
379	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  6;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  4;  _numTypesValid  =  1;  _numTypesValid  =  6;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    4;    _numTypesValid  =  1;  _numTypesValid  =  6;	  	compilable	  [FE]  AssertionFailedError  	46	1	add
380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  <  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  <  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }	  _numTypesValid    =    1;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
381	[BUG]  [BUGGY]  if(_numTypesValid  <  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  <  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  <  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }	  _numTypesValid    =    1;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  1;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  ==  0)  {  _numTypesValid  =  1;  _numTypesValid  =  0;  }	  _numTypesValid    =    1;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
383	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  1;  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  1;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  ==  0)  {  _numTypesValid  =  1;  _numTypesValid  =  0;  }	  _numTypesValid    =    1;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }	  _numTypesValid    =    1;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
385	[BUG]  [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  1;  }	  _numTypesValid    =    1;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
386	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputBuffer[_inputPtr++].read();  [CE]  byte  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr++];  _numTypesValid  =  _inputBuffer[_inputPtr++].read();  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid    =    _inputBuffer[_inputPtr++];    _numTypesValid  =  _inputBuffer[_inputPtr++].read();	  	non-compiled	[CE]  byte  cannot  be  dereferenced	24	None	add
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  2;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  2;  }	  _numTypesValid    =    1;    _numTypesValid    =    2;    	compilable	  [FE]  AssertionFailedError  	43	1	replace
388	[BUG]  [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  2;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  ==  1)  {  _numTypesValid  =  1;  _numTypesValid  =  2;  }	  _numTypesValid    =    1;    _numTypesValid    =    2;    	compilable	  [FE]  AssertionFailedError  	43	1	replace
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  <  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  <  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }	  _numTypesValid    =    0;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	31	1	replace
390	[BUG]  [BUGGY]  if(_numTypesValid  <  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  <  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  <  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }	  _numTypesValid    =    0;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	31	1	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }	  _numTypesValid    =    0;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	31	1	replace
392	[BUG]  [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }	  _numTypesValid    =    0;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	31	1	replace
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_numTypesValid  ==  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }	  _numTypesValid    =    0;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	31	1	replace
394	[BUG]  [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_numTypesValid  ==  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_numTypesValid  ==  1)  {  _numTypesValid  =  0;  _numTypesValid  =  1;  }	  _numTypesValid    =    0;    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	31	1	replace
395	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputProcessed  ==  null)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
396	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr  +  2];	  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid    =    NR_UNKNOWN    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
397	[BUG]  [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputPtr  +  1;  _numTypesValid  =  _inputBuffer[_inputPtr  +  2];	  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid    =    NR_UNKNOWN    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
398	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  RR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  cannot  find  symbol  RR_UNKNOWN  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  RR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  RR_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  cannot  find  symbol  RR_UNKNOWN	13	None	add
399	[BUG]  [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NS_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [CE]  cannot  find  symbol  NS_UNKNOWN  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NR_UNKNOWN  +  1;  _numTypesValid  =  NS_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        NR_UNKNOWN        +        1;        _numTypesValid    =    NR_UNKNOWN    +    1;    _numTypesValid  =  NS_UNKNOWN  +  1;  _numTypesValid  =  NR_UNKNOWN  +  1;	  	non-compiled	[CE]  cannot  find  symbol  NS_UNKNOWN	13	None	add
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  0;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
401	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  0;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  else  {  _binaryValue  =  null;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  else  {  _binaryValue  =  null;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
403	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  else  {  _binaryValue  =  null;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  else  {  _binaryValue  =  null;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  }  else  {  _binaryValue  =  null;  }	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
404	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _inputPtr  >=  _inputEnd)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	49	1	replace
406	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  _numTypesValid  =  0;  int  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    _numTypesValid    =    0;    	compilable	  [FE]  AssertionFailedError  	49	1	replace
407	[BUG]  [BUGGY]  if(_inputPtr  >=  _binaryValue)  {  _numTypesValid  =  0;  int  _numTypesValid  =  0;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _binaryValue)  {  _numTypesValid  =  0;  int  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _binaryValue)  {  _numTypesValid  =  0;  int  _numTypesValid  =  0;  }	  _numTypesValid    =    0;    int    _numTypesValid    =    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	49	None	replace
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  0xFF;	  _numTypesValid    =    0L;    	compilable	  [FE]  AssertionFailedError  	59	1	replace
409	[BUG]  [BUGGY]  _numTypesValid  =  0xFF;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  0xFF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  0xFF;	  _numTypesValid    =    0L;    	compilable	  [FE]  AssertionFailedError  	59	1	replace
410	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  _inputPtr  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    int  numTypesValid  =  _inputPtr;  _inputPtr  =  _inputPtr;  int  numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        int    numTypesValid    =    _inputPtr;    _inputPtr  =  _inputPtr;  int  numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  variable  numTypesValid  is  already  defined  in  method  nextToken()	37	None	add
411	[BUG]  [BUGGY]  _numTypesValid  =  _binaryValue.cloneTree();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _binaryValue.cloneTree();  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _binaryValue.cloneTree();	  _numTypesValid    =    _binaryValue.getName();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
412	[BUG]  [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1);  _numTypesValid  =  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    1;    _numTypesValid  =  1;  _numTypesValid  =  1);  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        1;        _numTypesValid    =    1;    _numTypesValid  =  1);  _numTypesValid  =  1;	  	non-compiled	[CE]  ';'  expected	40	None	add
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	int  _numTypesValid  =  1;	  _numTypesValid    =    1;    int    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
414	[BUG]  [BUGGY]  int  _numTypesValid  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  int  _numTypesValid  =  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	int  _numTypesValid  =  1;	  _numTypesValid    =    1;    int    _numTypesValid    =    1;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer.length  +  _inputPtr;	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
416	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer.length  +  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer.length  +  _inputPtr;	  _numTypesValid    =    _inputPtr;    _numTypesValid    =    _inputPtr    +    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	68	1	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    0;    if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
418	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    0;    if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid        =        0;        _numTypesValid    =    0;    if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
420	[BUG]  [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    0;    _numTypesValid  =  0;  if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        0;        _numTypesValid    =    0;    if(_numTypesValid  ==  0)  {  _numTypesValid  =  0;  _numTypesValid  =  0;  }  else  {  _binaryValue  =  null;  }	  	compilable	  [FE]  AssertionFailedError  	26	1	add
421	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _tokenInputBuffer[_inputPtr++];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _tokenInputBuffer[_inputPtr++];  }  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _tokenInputBuffer[_inputPtr++];  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_binaryValue    ==    null)    {    return    _binaryValue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
422	[BUG]  [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]          _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	                _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);	  	non-compiled	[CE]  ';'  expected	1	None	add
423	[BUG]  [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _nodeValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [CE]  cannot  find  symbol  _nodeValid  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid    =    _inputPtr;    _numTypesValid  =  _inputPtr;  _nodeValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid        =        _inputPtr;        _numTypesValid    =    _inputPtr;    _nodeValid  =  _inputPtr;  _numTypesValid  =  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _nodeValid	35	None	add
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_numTypesValid  =  _inputBuffer[_inputPtr]  &  0xF;	  _numTypesValid    =    _inputBuffer[_inputPtr];    	compilable	  [FE]  AssertionFailedError  	51	1	replace
425	[BUG]  [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _numTypesValid  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_numTypesValid  =  _inputBuffer[_inputPtr]  &  0xF;	  _numTypesValid    =    _inputBuffer[_inputPtr];    	compilable	  [FE]  AssertionFailedError  	51	1	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;	          _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
427	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;	          _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
