bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    int    _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	121	1	replace
2	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    int    _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	121	1	replace
3	[BUG]  [BUGGY]  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    int    _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	121	None	replace
4	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _input;  [CE]  cannot  find  symbol  _input  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    int    _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _input	121	None	replace
5	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _input	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	110	None	replace
6	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	110	None	replace
7	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _in  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _in	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	110	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  2;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
9	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  2;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
10	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  int  _tokenInputTotal  =  _currInputProcessed  +  2;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  int  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    2;    int  _tokenInputTotal  =  _currInputProcessed  +  2;	  	non-compiled	[CE]  possible  loss  of  precision	37	None	add
11	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _currInputTotal  =  _currInputProcessed  +  2;  [CE]  cannot  find  symbol  _currInputTotal  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _currInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    2;    _currInputTotal  =  _currInputProcessed  +  2;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	37	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  3;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  3;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
13	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  3;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  3;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  3;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	add
15	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	add
16	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  0xF;  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  0xF;	  	non-compiled	[CE]  <identifier>  expected	97	None	add
17	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++],  &  0xF;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++],  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr++],  &  0xF;	  	non-compiled	[CE]  ';'  expected	97	None	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	176	1	add
19	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	176	1	add
20	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputPro  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputPro  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputPro	  	non-compiled	[CE]  ';'  expected	176	None	add
21	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput	  	non-compiled	[CE]  ';'  expected	176	None	add
22	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currIn  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currIn  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currIn	  	non-compiled	[CE]  ';'  expected	176	None	add
23	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _curr  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _curr  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _curr	  	non-compiled	[CE]  ';'  expected	176	None	add
24	[BUG]  [BUGGY]  _tokenInputTotal  =  _currToken[_inputPtr++]  +  _currInputProcessed;  [CE]  array  required,  but  JsonToken  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currToken[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currToken[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  array  required,  but  JsonToken  found	20	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
26	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
27	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	52	None	add
28	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInput  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInput	  	non-compiled	[CE]  ';'  expected	52	None	add
29	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputPro  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputPro  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputPro	  	non-compiled	[CE]  ';'  expected	52	None	add
30	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currIn  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currIn  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currIn	  	non-compiled	[CE]  ';'  expected	52	None	add
31	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  ';'  expected	42	None	replace
32	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	1	replace
33	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	1	replace
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	1	replace
35	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	1	replace
36	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	1	replace
37	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	42	1	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	replace
39	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	replace
40	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	replace
41	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	replace
42	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	90	None	replace
43	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  0xFF;  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  0xFF;	  	non-compiled	[CE]  <identifier>  expected	95	None	add
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	95	1	add
45	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	95	1	add
46	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF);	  	non-compiled	[CE]  ';'  expected	95	None	add
47	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _input  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _input	  	non-compiled	[CE]  ';'  expected	122	None	add
48	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _in  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _in	  	non-compiled	[CE]  ';'  expected	122	None	add
49	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  [CE]  unexpected  type  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &	  	non-compiled	[CE]  unexpected  type	122	None	add
50	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _	  	non-compiled	[CE]  ';'  expected	122	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
52	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	122	1	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_currInputProcessed  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	174	1	replace
54	[BUG]  [BUGGY]  _currInputProcessed  =  _currInputProcessed  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputProcessed  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	174	1	replace
55	[BUG]  [BUGGY]  _currInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	174	None	replace
56	[BUG]  [BUGGY]  _tokenInputTotal  =  _currTokenInput  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _currTokenInput  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currTokenInput  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currTokenInput  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currTokenInput	174	None	replace
57	[BUG]  [BUGGY]  _currInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	174	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _tokenInputTotal  =  _currInputProcessed  +  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    1L;    _tokenInputTotal  =  _currInputProcessed  +  1L;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
59	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _tokenInputTotal  =  _currInputProcessed  +  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _tokenInputTotal  =  _currInputProcessed  +  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1L;    _tokenInputTotal  =  _currInputProcessed  +  1L;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
60	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  int  _tokenInputTotal  =  _currInputProcessed  +  1L;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  int  _tokenInputTotal  =  _currInputProcessed  +  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1L;    int  _tokenInputTotal  =  _currInputProcessed  +  1L;	  	non-compiled	[CE]  possible  loss  of  precision	138	None	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _tokenInputTotal  =  _currInputProcessed  +  2L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    1L;    _tokenInputTotal  =  _currInputProcessed  +  2L;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
62	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _tokenInputTotal  =  _currInputProcessed  +  2L;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _tokenInputTotal  =  _currInputProcessed  +  2L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1L;    _tokenInputTotal  =  _currInputProcessed  +  2L;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _binaryValue  =  null;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_binaryValue  =  null;	          if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	compilable	  [FE]  AssertionFailedError  	164	1	replace
64	[BUG]  [BUGGY]  _binaryValue  =  null;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _binaryValue  =  null;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_binaryValue  =  null;	          if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	compilable	  [FE]  AssertionFailedError  	164	1	replace
65	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  inputEnd)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  inputEnd)  {  return  _finishToken();  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  inputEnd)  {  return  _finishToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
66	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed.length  -  1;  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed.length  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	117	None	replace
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	117	1	replace
68	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	117	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    	compilable	  [FE]  AssertionFailedError  	117	1	replace
70	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed  -  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    	compilable	  [FE]  AssertionFailedError  	117	1	replace
71	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	17	None	replace
72	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	17	None	replace
73	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr  +  _currInputProcessed);	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	17	None	replace
74	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  1);	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	17	None	replace
75	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _startPtr    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	157	1	replace
76	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _startPtr    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	157	1	replace
77	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _inputTotal  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _startPtr    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	157	None	replace
78	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _startPtr  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _startPtr    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  cannot  find  symbol  _startPtr	157	None	replace
79	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
80	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
81	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	9	None	add
82	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
83	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
84	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  (_inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF);  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  (_inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    (_inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF);	  	non-compiled	[CE]  not  a  statement	9	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  _inputPtr  =  _inputEnd  -  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	                _inputPtr    =    _inputEnd    -    _inputPtr;    _inputPtr  =  _inputEnd  -  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	162	1	add
86	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  _inputPtr  =  _inputEnd  -  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  _inputPtr  =  _inputEnd  -  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd    -    _inputPtr;    _inputPtr  =  _inputEnd  -  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	162	1	add
87	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  _inputPtr  =  _inputEnd  -  _inputPtr);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  _inputPtr  =  _inputEnd  -  _inputPtr);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd    -    _inputPtr;    _inputPtr  =  _inputEnd  -  _inputPtr);	  	non-compiled	[CE]  ';'  expected	162	None	add
88	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  int  _inputPtr  =  _inputEnd  -  _inputPtr;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  int  _inputPtr  =  _inputEnd  -  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd    -    _inputPtr;    int  _inputPtr  =  _inputEnd  -  _inputPtr;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	162	None	add
89	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  _inputPtr  =  _inputStart  -  _inputPtr;  [CE]  cannot  find  symbol  _inputStart  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd  -  _inputPtr;  _inputPtr  =  _inputStart  -  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd    -    _inputPtr;    _inputPtr  =  _inputStart  -  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _inputStart	162	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;	  	compilable	  [FE]  AssertionFailedError  	83	1	add
91	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;	  	compilable	  [FE]  AssertionFailedError  	83	1	add
92	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	83	None	add
93	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    1;    _inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	83	None	add
94	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
95	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
96	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
97	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
98	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _inputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _inputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _inputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	111	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;	  	compilable	  [FE]  AssertionFailedError  	128	1	add
100	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;	  	compilable	  [FE]  AssertionFailedError  	128	1	add
101	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN);	  	non-compiled	[CE]  ';'  expected	128	None	add
102	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    int  _inputPtr  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	128	None	add
103	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _tokenInputTotal  =  _outputBuffer[_inputPtr]  &  NR_UNKNOWN;  [CE]  cannot  find  symbol  _outputBuffer  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _tokenInputTotal  =  _outputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    _tokenInputTotal  =  _outputBuffer[_inputPtr]  &  NR_UNKNOWN;	  	non-compiled	[CE]  cannot  find  symbol  _outputBuffer	128	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
105	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	154	1	add
106	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currProcessed;  [CE]  cannot  find  symbol  _currProcessed  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currProcessed	154	None	add
107	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currentProcessed;  [CE]  cannot  find  symbol  _currentProcessed  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currentProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currentProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	154	None	add
108	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    	compilable	  [FE]  NullPointerException  	98	1	replace
109	[BUG]  [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xF;  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    	compilable	  [FE]  NullPointerException  	98	1	replace
110	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
111	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	add
112	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _currInputProcessed;  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _currInputProcessed;	  	non-compiled	[CE]  <identifier>  expected	18	None	add
113	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	18	None	add
114	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _itemCount;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _itemCount;  [CE]  cannot  find  symbol  _itemCount  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _itemCount;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _itemCount;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _itemCount;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _itemCount;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currProcessed;    	non-compiled	[CE]  cannot  find  symbol  _itemCount	50	None	replace
115	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;  [CE]  cannot  find  symbol  _currentState  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentState	50	None	replace
116	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;  [CE]  cannot  find  symbol  _currProcessed  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currProcessed	50	None	replace
117	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [CE]  cannot  find  symbol  _currentState  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentState	50	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _tokenInputTotal  =  _currInputProcessed  *  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    *    1;    _tokenInputTotal  =  _currInputProcessed  *  1;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
119	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _tokenInputTotal  =  _currInputProcessed  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _tokenInputTotal  =  _currInputProcessed  *  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    *    1;    _tokenInputTotal  =  _currInputProcessed  *  1;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _tokenInputTotal  =  _currInputProcessed  *  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    *    1;    _tokenInputTotal  =  _currInputProcessed  *  2;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
121	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _tokenInputTotal  =  _currInputProcessed  *  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _tokenInputTotal  =  _currInputProcessed  *  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    *    1;    _tokenInputTotal  =  _currInputProcessed  *  2;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
122	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  int  _tokenInputTotal  =  _currInputProcessed  *  1;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  int  _tokenInputTotal  =  _currInputProcessed  *  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    *    1;    int  _tokenInputTotal  =  _currInputProcessed  *  1;	  	non-compiled	[CE]  possible  loss  of  precision	39	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    	compilable	  [FE]  AssertionFailedError  	67	1	replace
124	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    	compilable	  [FE]  AssertionFailedError  	67	1	replace
125	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1);	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	140	None	replace
126	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed);	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ';'  expected	140	None	replace
127	[BUG]  [BUGGY]  _tokenInputTotal  =  _currToken[_inputPtr  +  _currInputProcessed);  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currToken[_inputPtr  +  _currInputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currToken[_inputPtr  +  _currInputProcessed);	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	140	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr]    +    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	108	1	replace
129	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr]    +    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	108	1	replace
130	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr]    +    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	108	None	replace
131	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	replace
132	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	replace
133	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	79	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  +  _inputPtr;	  _tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	172	1	replace
135	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  _inputPtr;	  _tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	172	1	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputBuffer.length;	  _tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	172	1	replace
137	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _inputBuffer.length;	  _tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	172	1	replace
138	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr);    	non-compiled	[CE]  ';'  expected	45	None	replace
139	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr);    	non-compiled	[CE]  ';'  expected	45	None	replace
140	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputBuffer.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
141	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputBuffer.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
142	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
143	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
144	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputStart;  [CE]  cannot  find  symbol  _inputStart  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputStart;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputStart;	  	non-compiled	[CE]  cannot  find  symbol  _inputStart	33	None	add
145	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputEnd;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputEnd;	  	non-compiled	[CE]  <identifier>  expected	33	None	add
146	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	33	None	add
147	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputEnd  +  1;	          _inputPtr    =    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
148	[BUG]  [BUGGY]  _inputPtr  =  _inputEnd  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputEnd  +  1;	          _inputPtr    =    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	132	1	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputEnd  -  1;	          _inputPtr    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	132	1	replace
150	[BUG]  [BUGGY]  _inputPtr  =  _inputEnd  -  1;  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputEnd  -  1;	          _inputPtr    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	132	1	replace
151	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	150	None	replace
152	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	150	None	replace
153	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _input  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _input	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	150	None	replace
154	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	150	None	replace
155	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
156	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
157	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
158	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
159	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x  [CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr);    	non-compiled	[CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit	26	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputTotal  =  _inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    1;    _tokenInputTotal  =  _inputPtr  +  1;	  	compilable	  [FE]  AssertionFailedError  	179	1	add
161	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputTotal  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputTotal  =  _inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    1;    _tokenInputTotal  =  _inputPtr  +  1;	  	compilable	  [FE]  AssertionFailedError  	179	1	add
162	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _inputPtr  =  _inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    1;    _inputPtr  =  _inputPtr  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	179	1	add
163	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _inputPtr  =  _inputPtr  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _inputPtr  =  _inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    1;    _inputPtr  =  _inputPtr  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	179	1	add
164	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  int  _inputPtr  =  _inputPtr  +  1;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  int  _inputPtr  =  _inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    1;    int  _inputPtr  =  _inputPtr  +  1;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	179	None	add
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputTotal  =  _inputPtr  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    1;    _tokenInputTotal  =  _inputPtr  +  2;	  	compilable	  [FE]  AssertionFailedError  	179	1	add
166	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputTotal  =  _inputPtr  +  2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputTotal  =  _inputPtr  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    1;    _tokenInputTotal  =  _inputPtr  +  2;	  	compilable	  [FE]  AssertionFailedError  	179	1	add
167	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input	  	non-compiled	[CE]  ';'  expected	22	None	add
168	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _in  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _in	  	non-compiled	[CE]  ';'  expected	22	None	add
169	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [CE]  unexpected  type  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &	  	non-compiled	[CE]  unexpected  type	22	None	add
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
171	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
172	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _	  	non-compiled	[CE]  ';'  expected	22	None	add
173	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
174	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
175	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
176	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputState  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputState	53	None	replace
177	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputPro  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputPro  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputPro	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	53	None	replace
178	[BUG]  [BUGGY]  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	127	None	replace
179	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	127	None	replace
180	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	127	None	replace
181	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]                  AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	127	None	replace
182	[BUG]  [BUGGY]  _tokenInputTotal  =  _currToken[_inputPtr++]  +  _inputBuffer;  [CE]  array  required,  but  JsonToken  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currToken[_inputPtr++]  +  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currToken[_inputPtr++]  +  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currToken;    	non-compiled	[CE]  array  required,  but  JsonToken  found	21	None	replace
183	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currToken;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currToken;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currToken;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currToken;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	21	None	replace
184	[BUG]  [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  +  _currToken;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  +  _currToken;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _binaryValue[_inputPtr++]  +  _currToken;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currToken;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
185	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
186	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
187	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	3	None	add
188	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
189	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
190	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xf;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
191	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xf;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xf;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
192	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	170	None	replace
193	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	170	None	replace
194	[BUG]  [BUGGY]  _startInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _startInputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _startInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	161	None	replace
195	[BUG]  [BUGGY]  _startInputTotal  =  _inputBuffer.length  +  _currInputProcessed.length;  [CE]  cannot  find  symbol  _startInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startInputTotal  =  _inputBuffer.length  +  _currInputProcessed.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startInputTotal  =  _inputBuffer.length  +  _currInputProcessed.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _startInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	161	None	replace
196	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  +=  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  +=  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    +    1    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	156	1	replace
197	[BUG]  [BUGGY]  _inputPtr  +=  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  +=  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  +=  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    +    1    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	156	1	replace
198	[BUG]  [BUGGY]  _inputPtr  +=  1  =  _inputBuffer[_inputPtr  +  1];  [CE]  unexpected  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  +=  1  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  +=  1  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    +    1    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  unexpected  type	156	None	replace
199	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _currInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _inputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _currInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _currInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	88	None	replace
200	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	88	None	replace
201	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  possible  loss  of  precision	109	None	replace
202	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
203	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _input  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _input	  	non-compiled	[CE]  ';'  expected	100	None	add
204	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	100	1	add
205	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	100	1	add
206	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _in  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _in	  	non-compiled	[CE]  ';'  expected	100	None	add
207	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputP  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputP  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputP	  	non-compiled	[CE]  ';'  expected	100	None	add
208	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  [CE]  unexpected  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &	  	non-compiled	[CE]  unexpected  type	100	None	add
209	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  	compilable	  [FE]  ArithmeticException  	152	1	add
210	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [FE]  ArithmeticException  [FE]    ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  	compilable	  [FE]  ArithmeticException  	152	1	add
211	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currentProcessed;  [CE]  cannot  find  symbol  _currentProcessed  [FE]      ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currentProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currentProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	152	None	add
212	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	152	None	add
213	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProceding;  [CE]  cannot  find  symbol  _currInputProceding  [FE]          ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProceding;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProceding;	  	non-compiled	[CE]  cannot  find  symbol  _currInputProceding	152	None	add
214	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
215	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
216	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
217	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  _inputProcessed;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  _inputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
218	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputSize;  [CE]  cannot  find  symbol  _inputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputSize;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  &  _inputSize;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputProperty;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	27	None	replace
219	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputProperty;  [CE]  cannot  find  symbol  _inputProperty  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputProperty;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  _inputProperty;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputProperty;    	non-compiled	[CE]  cannot  find  symbol  _inputProperty	27	None	replace
220	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]                  AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputProperty;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	27	None	replace
221	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	151	None	replace
222	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  +  _input  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  +  _input	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	151	None	replace
223	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
224	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
225	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
226	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  incompatible  types	14	None	add
227	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _binaryValue  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _binaryValue  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _binaryValue  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  incompatible  types	14	None	add
228	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	14	None	add
229	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	1	add
230	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	1	add
231	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0	  	non-compiled	[CE]  ';'  expected	169	None	add
232	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF	  	non-compiled	[CE]  ';'  expected	169	None	add
233	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1)];    	non-compiled	[CE]  ']'  expected	124	None	replace
234	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1)];    	non-compiled	[CE]  ']'  expected	124	None	replace
235	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1)];    	non-compiled	[CE]  ']'  expected	124	None	replace
236	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  inputEnd)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  inputEnd)  {  return  _startToken();  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  inputEnd)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
237	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	add
238	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	add
239	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	add
240	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	add
241	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _inputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	69	None	add
242	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	add
243	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	add
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  *  2;	  _tokenInputTotal    =    _currInputProcessed    +    2;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
245	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  *  2;	  _tokenInputTotal    =    _currInputProcessed    +    2;    	compilable	  [FE]  AssertionFailedError  	38	1	replace
246	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    	compilable	  [FE]  NullPointerException  	112	1	replace
247	[BUG]  [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xF;  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    	compilable	  [FE]  NullPointerException  	112	1	replace
248	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputInputTotal    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	75	None	replace
249	[BUG]  [BUGGY]  _inputInputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _inputInputTotal  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputInputTotal  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputInputTotal    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  cannot  find  symbol  _inputInputTotal	75	None	replace
250	[BUG]  [BUGGY]  _startInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _startInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _startInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	175	None	replace
251	[BUG]  [BUGGY]  _startInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [CE]  cannot  find  symbol  _startInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startInputTotal  =  _inputBuffer[_inputPtr++]  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _startInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	175	None	replace
252	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	          int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	130	None	replace
253	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	          int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  possible  loss  of  precision	130	None	replace
254	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
255	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
256	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _input	  	non-compiled	[CE]  ';'  expected	146	None	add
257	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputP  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputP  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputP	  	non-compiled	[CE]  ';'  expected	146	None	add
258	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _in  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _in	  	non-compiled	[CE]  ';'  expected	146	None	add
259	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	177	1	replace
260	[BUG]  [BUGGY]  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	177	1	replace
261	[BUG]  [BUGGY]  _inputProcessed  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  [CE]  cannot  find  symbol  _inputProcessed  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputProcessed  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputProcessed  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputProcessed	177	None	replace
262	[BUG]  [BUGGY]  _inputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputProcessed  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputProcessed	177	None	replace
263	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
264	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
265	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input	  	non-compiled	[CE]  ';'  expected	41	None	add
266	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
267	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
268	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input	  	non-compiled	[CE]  ';'  expected	41	None	add
269	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	41	None	add
270	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer.length  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	105	None	replace
271	[BUG]  [BUGGY]  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	105	None	replace
272	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	105	None	replace
273	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_binaryValue  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  incompatible  types	119	None	replace
274	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_binaryValue  =  _inputBuffer[_inputPtr]  &  0xFF;	  _inputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  incompatible  types	11	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
276	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
277	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _currInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _currInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    2;    _currInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	86	None	add
278	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    2;    _inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	86	None	add
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  3;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  3;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
280	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  3;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  3;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  3;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
281	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _inputTotal  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	77	None	replace
282	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  2];  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  2];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	77	None	replace
283	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
284	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
285	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
286	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	73	1	add
287	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	73	None	add
288	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _inputInputTotal  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _inputInputTotal	73	None	add
289	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  incompatible  types	73	None	add
290	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  &  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr++]  &  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	19	None	replace
291	[BUG]  [BUGGY]  _tokenInputTotal  =  _currBuffer[_inputPtr++]  &  _currInputProcessed;  [CE]  cannot  find  symbol  _currBuffer  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currBuffer[_inputPtr++]  &  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currBuffer	19	None	replace
292	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  &  _inputProcessed;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  &  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr++]  &  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	19	None	replace
293	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	96	1	replace
294	[BUG]  [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xFF;  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _binaryValue[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	96	1	replace
295	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _binaryValue;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _binaryValue;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _binaryValue;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _input;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	113	None	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
297	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	106	1	add
298	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	106	None	add
299	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _tokenInputTotal  =  _outputBuffer[_inputPtr]  -  _currInputProcessed;  [CE]  cannot  find  symbol  _outputBuffer  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _tokenInputTotal  =  _outputBuffer[_inputPtr]  -  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    _tokenInputTotal  =  _outputBuffer[_inputPtr]  -  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _outputBuffer	106	None	add
300	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currentProcessed;  [CE]  cannot  find  symbol  _currentProcessed  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currentProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currentProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	106	None	add
301	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _startPtr  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _startPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	166	None	replace
302	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	non-compiled	[CE]  ';'  expected	82	None	replace
303	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	non-compiled	[CE]  ';'  expected	82	None	replace
304	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	82	None	replace
305	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
306	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
307	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	178	None	replace
308	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _input	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	178	None	replace
309	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currToken;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentToken;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currToken;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentToken;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currToken;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentToken;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentProcessed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	51	None	replace
310	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;  [CE]  cannot  find  symbol  _currentState  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentState	51	None	replace
311	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentNode;  [CE]  cannot  find  symbol  _currentNode  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentNode;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentNode;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentNode	51	None	replace
312	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  NR_UNKNOWN;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	129	1	replace
313	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  NR_UNKNOWN;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  NR_UNKNOWN;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	129	1	replace
314	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input	  	non-compiled	[CE]  ';'  expected	89	None	add
315	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	add
316	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	add
317	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _in  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _in	  	non-compiled	[CE]  ';'  expected	89	None	add
318	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input	  	non-compiled	[CE]  ';'  expected	89	None	add
319	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input	  	non-compiled	[CE]  ';'  expected	89	None	add
320	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;  [CE]  cannot  find  symbol  _currentState  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentState	54	None	replace
321	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentNode;  [CE]  cannot  find  symbol  _currentNode  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentNode;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentNode;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentNode	54	None	replace
322	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentProcessed;  [CE]  cannot  find  symbol  _currentProcessed  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	54	None	replace
323	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	1	replace
324	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	1	replace
325	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	1	replace
326	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	44	1	replace
327	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	44	None	replace
328	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr]  &  _inputBuffer[_inputPtr];  [CE]  array  required,  but  long  found  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr]  &  _inputBuffer[_inputPtr];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed[_inputPtr]  &  _inputBuffer[_inputPtr];	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    	non-compiled	[CE]  array  required,  but  long  found	63	None	replace
329	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  &  _inputProcessed;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  &  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  &  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	63	None	replace
330	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  &  _inputBuffer[_inputPtr];  [CE]  cannot  find  symbol  _currInputBuffer  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  &  _inputBuffer[_inputPtr];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  &  _inputBuffer[_inputPtr];	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	63	None	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
332	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
333	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _inputInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [CE]  cannot  find  symbol  _inputInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _inputInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    _inputInputTotal  =  _inputBuffer[_inputPtr]  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _inputInputTotal	66	None	add
334	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _inputPtr  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    _inputPtr  =  _inputBuffer[_inputPtr]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	1	add
335	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _inputPtr  =  _inputBuffer[_inputPtr]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _inputPtr  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    _inputPtr  =  _inputBuffer[_inputPtr]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	66	1	add
336	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  int  _inputPtr  =  _inputBuffer[_inputPtr]  +  1;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  int  _inputPtr  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    int  _inputPtr  =  _inputBuffer[_inputPtr]  +  1;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	66	None	add
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
338	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
339	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	7	None	add
340	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xW;  [CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xW;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xW;	  	non-compiled	[CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit	7	None	add
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
342	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  +  4;	  _tokenInputTotal    =    _currInputProcessed    +    1L;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
344	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  +  4;	  _tokenInputTotal    =    _currInputProcessed    +    1L;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	116	1	add
346	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;	  	compilable	  [FE]  AssertionFailedError  	116	1	add
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  2;	  	compilable	  [FE]  AssertionFailedError  	116	1	add
348	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  2;	  	compilable	  [FE]  AssertionFailedError  	116	1	add
349	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _inputProcessed  +  _inputBuffer.length  -  1;  [CE]  cannot  find  symbol  _inputProcessed  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _inputProcessed  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _tokenInputTotal  =  _inputProcessed  +  _inputBuffer.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  _inputProcessed	116	None	add
350	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _currentProcessed  +  _inputBuffer.length  -  1;  [CE]  cannot  find  symbol  _currentProcessed  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _tokenInputTotal  =  _currentProcessed  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _tokenInputTotal  =  _currentProcessed  +  _inputBuffer.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	116	None	add
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputEnd  -  _inputBuffer.length;	          _inputPtr    =    _inputEnd    -    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	163	1	replace
352	[BUG]  [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputEnd  -  _inputBuffer.length;	          _inputPtr    =    _inputEnd    -    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	163	1	replace
353	[BUG]  [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBufferLength;  [CE]  cannot  find  symbol  _inputBufferLength  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBufferLength;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputEnd  -  _inputBufferLength;	          _inputPtr    =    _inputEnd    -    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputBufferLength	163	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
355	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
356	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed);	  	non-compiled	[CE]  ';'  expected	28	None	add
357	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _outputBuffer.length  +  _currInputProcessed;  [CE]  cannot  find  symbol  _outputBuffer  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _outputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _tokenInputTotal  =  _outputBuffer.length  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _outputBuffer	28	None	add
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _currInputProcessed        +        1;        _currInputProcessed    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;	  	compilable	  [FE]  AssertionFailedError  	173	1	add
359	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _currInputProcessed    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;	  	compilable	  [FE]  AssertionFailedError  	173	1	add
360	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _currProcessed  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _currInputProcessed    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _currProcessed	173	None	add
361	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
362	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr];  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
363	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
364	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
365	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
366	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
367	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _binaryValue[_inputPtr++];	  _tokenInputTotal    =    _inputBuffer[_inputPtr++];    	compilable	  [FE]  NullPointerException  	72	1	replace
368	[BUG]  [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++];  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _binaryValue[_inputPtr++];	  _tokenInputTotal    =    _inputBuffer[_inputPtr++];    	compilable	  [FE]  NullPointerException  	72	1	replace
369	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _binaryValue[_inputPtr++]  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  NullPointerException  	144	1	replace
370	[BUG]  [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  +  1;  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _binaryValue[_inputPtr++]  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  NullPointerException  	144	1	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	81	1	replace
372	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	81	1	replace
373	[BUG]  [BUGGY]  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	81	None	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	158	1	add
375	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	158	1	add
376	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	158	1	add
377	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	158	1	add
378	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    _inputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	158	None	add
379	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    	compilable	  [FE]  NullPointerException  	70	1	replace
380	[BUG]  [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xFF;  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _binaryValue[_inputPtr  +  1]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    	compilable	  [FE]  NullPointerException  	70	1	replace
381	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1xFF;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    	non-compiled	[CE]  ';'  expected	137	None	replace
382	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	120	None	replace
383	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  _input;  [CE]  cannot  find  symbol  _inputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  &  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	120	None	replace
384	[BUG]  [BUGGY]  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    int    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	60	None	replace
385	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    int    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	60	None	replace
386	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	49	None	replace
387	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
388	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	replace
389	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _input;  [CE]  cannot  find  symbol  _input  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _input	101	None	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  AssertionFailedError  	56	1	add
391	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  AssertionFailedError  	56	1	add
392	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0	  	non-compiled	[CE]  ';'  expected	56	None	add
393	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF	  	non-compiled	[CE]  ';'  expected	56	None	add
394	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x  [CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x	  	non-compiled	[CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit	56	None	add
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  /  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  /  1;	  _tokenInputTotal    =    _currInputProcessed    *    1;    	compilable	  [FE]  AssertionFailedError  	40	1	replace
396	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  /  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  /  1;	  _tokenInputTotal    =    _currInputProcessed    *    1;    	compilable	  [FE]  AssertionFailedError  	40	1	replace
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  *  4;	  _tokenInputTotal    =    _currInputProcessed    *    1;    	compilable	  [FE]  AssertionFailedError  	40	1	replace
398	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  4;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  *  4;	  _tokenInputTotal    =    _currInputProcessed    *    1;    	compilable	  [FE]  AssertionFailedError  	40	1	replace
399	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [CE]  cannot  find  symbol  _inputTotal  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  &  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _input;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	94	None	replace
400	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr    =    _inputBuffer[_inputPtr++];    _inputPtr  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
401	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _inputPtr  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++];    _inputPtr  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
402	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  int  _inputPtr  =  _inputBuffer[_inputPtr++];  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  int  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++];    int  _inputPtr  =  _inputBuffer[_inputPtr++];	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	5	None	add
403	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _inputPtr  =  _inputBuffer[_inputPtr++].;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _inputPtr  =  _inputBuffer[_inputPtr++].;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++];    _inputPtr  =  _inputBuffer[_inputPtr++].;	  	non-compiled	[CE]  <identifier>  expected	5	None	add
404	[BUG]  [BUGGY]  _inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	84	None	replace
405	[BUG]  [BUGGY]  _currTokenInputTotal  =  _currTokenInputProcessed  +  1;  [CE]  cannot  find  symbol  _currTokenInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currTokenInputTotal  =  _currTokenInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currTokenInputTotal  =  _currTokenInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currTokenInputTotal	84	None	replace
406	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	replace
407	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	replace
408	[BUG]  [BUGGY]  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	13	None	replace
409	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInput  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInput	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	13	None	replace
410	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	replace
411	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	replace
412	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr++]    +    _inputBuffer;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	145	None	replace
413	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer;  [CE]  cannot  find  symbol  _inputTotal  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr++]    +    _inputBuffer;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	145	None	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
415	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
416	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _inputInputTotal  =  _inputBuffer[_inputPtr]  &  1;  [CE]  cannot  find  symbol  _inputInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _inputInputTotal  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _inputInputTotal  =  _inputBuffer[_inputPtr]  &  1;	  	non-compiled	[CE]  cannot  find  symbol  _inputInputTotal	167	None	add
417	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1);	  	non-compiled	[CE]  ';'  expected	167	None	add
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
419	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
420	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
421	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
422	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
423	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
424	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
425	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
426	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	43	None	add
427	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
428	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
429	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputBuffer;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	107	None	replace
430	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputBuffer[_inputPtr];  [CE]  cannot  find  symbol  _currInputBuffer  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputBuffer[_inputPtr];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputBuffer[_inputPtr];	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	107	None	replace
431	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr]  -  _inputBuffer[_inputPtr];  [CE]  array  required,  but  long  found  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr]  -  _inputBuffer[_inputPtr];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed[_inputPtr]  -  _inputBuffer[_inputPtr];	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    	non-compiled	[CE]  array  required,  but  long  found	107	None	replace
432	[BUG]  [BUGGY]  int  _tokenInputTotal  =  _currInputProcessed  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	int  _tokenInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    int    _tokenInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
433	[BUG]  [BUGGY]  char  _currInputTotal  =  _currInputProcessed  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  char  _currInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	char  _currInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    int    _tokenInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
434	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _inputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	99	None	replace
435	[BUG]  [BUGGY]  _tokenInputTotal  =  _currToken[_inputPtr]  +  _inputBuffer;  [CE]  array  required,  but  JsonToken  found  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currToken[_inputPtr]  +  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currToken[_inputPtr]  +  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currToken;    	non-compiled	[CE]  array  required,  but  JsonToken  found	68	None	replace
436	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _binaryValue;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _binaryValue;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _binaryValue;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currToken;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	68	None	replace
437	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentToken;  [CE]  cannot  find  symbol  _currentToken  [FE]                  AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentToken;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentToken;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currToken;    	non-compiled	[CE]  cannot  find  symbol  _currentToken	68	None	replace
438	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	114	1	add
439	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	114	1	add
440	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;  [CE]  cannot  find  symbol  _inputStart  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;	  	non-compiled	[CE]  cannot  find  symbol  _inputStart	114	None	add
441	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd);	  	non-compiled	[CE]  ';'  expected	114	None	add
442	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  inputEnd;  [CE]  cannot  find  symbol  inputEnd  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  inputEnd	114	None	add
443	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
444	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	48	None	replace
445	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputType;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputType  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputType;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputType;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputType	48	None	replace
446	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInput  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInput	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	48	None	replace
447	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  [CE]  cannot  find  symbol  _currInputDescriptor  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputDescriptor	48	None	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  +  1;	  _tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
449	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  1;	  _tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  -  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  -  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
451	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  -  _currInputProcessed;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  -  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  -  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
452	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _currInputProcessed.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	104	None	replace
453	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputBuffer.length  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	104	None	replace
454	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputBuffer.length  +  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputBuffer.length  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputBuffer.length  +  _inputPtr;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	104	None	replace
455	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentState;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	149	1	replace
456	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypesValid;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentState;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	149	1	replace
457	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binaryState;  [CE]  cannot  find  symbol  _binaryState  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binaryState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binaryState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentState;    	non-compiled	[CE]  cannot  find  symbol  _binaryState	149	None	replace
458	[BUG]  [BUGGY]  _startPtr  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _startPtr    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	160	None	replace
459	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _startPtr    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	160	None	replace
460	[BUG]  [BUGGY]  _inputPtr  =  _inputPtr  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _startPtr    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  possible  loss  of  precision	160	None	replace
461	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  /  _inputBuffer;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]    ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  /  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  /  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	153	None	replace
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  2;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	153	1	replace
463	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  2;  [FE]  AssertionFailedError  [FE]      ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  2;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	153	1	replace
464	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInput[_inputPtr]  /  _inputBuffer;  [CE]  cannot  find  symbol  _currInput  [FE]        ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInput[_inputPtr]  /  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInput[_inputPtr]  /  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInput	153	None	replace
465	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr]  /  _inputBuffer;  [CE]  array  required,  but  long  found  [FE]          ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr]  /  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed[_inputPtr]  /  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	non-compiled	[CE]  array  required,  but  long  found	153	None	replace
466	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  *  _inputBuffer;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  *  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  *  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	155	None	replace
467	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _binaryValue;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _binaryValue;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _binaryValue;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	155	None	replace
468	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currentState;  [CE]  cannot  find  symbol  _currentState  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentState	133	None	replace
469	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputDescriptor;  [CE]  cannot  find  symbol  _currInputDescriptor  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputDescriptor;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputDescriptor;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputDescriptor	133	None	replace
470	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed);    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	55	None	replace
471	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed);    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	55	None	replace
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
473	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
474	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _inputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputProcessed  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _inputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _inputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _inputProcessed	80	None	add
475	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	80	None	add
476	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currentProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currentProcessed  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currentProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currentProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	80	None	add
477	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
478	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
479	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length);	  	non-compiled	[CE]  ';'  expected	31	None	add
480	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	31	None	add
481	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr]  +  _inputBuffer.length;  [CE]  array  required,  but  long  found  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed[_inputPtr]  +  _inputBuffer.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed.length;    	non-compiled	[CE]  array  required,  but  long  found	118	None	replace
482	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState.length;  [CE]  cannot  find  symbol  _currentState  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed.length;    	non-compiled	[CE]  cannot  find  symbol  _currentState	118	None	replace
483	[BUG]  [BUGGY]  _currInputTotal  =  _inputPtr  +  _inputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputPtr  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputPtr  +  _inputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	126	None	replace
484	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	126	None	replace
485	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _tokenInputTotal  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	add
486	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _tokenInputTotal  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	add
487	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++].;  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++].;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _tokenInputTotal  =  _inputBuffer[_inputPtr++].;	  	non-compiled	[CE]  <identifier>  expected	71	None	add
488	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr++]);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _tokenInputTotal  =  _inputBuffer[_inputPtr++]);	  	non-compiled	[CE]  ';'  expected	71	None	add
489	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _inputTotal  =  _inputBuffer[_inputPtr++];  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _inputTotal  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _inputTotal  =  _inputBuffer[_inputPtr++];	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	71	None	add
490	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	replace
491	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	replace
492	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	replace
493	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	replace
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	65	1	replace
495	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _numTypesValid;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	65	1	replace
496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  NR_UNKNOWN;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	65	1	replace
497	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  NR_UNKNOWN;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  NR_UNKNOWN;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	65	1	replace
498	[BUG]  [BUGGY]  _tokenInputTotal  =  _numTypesValid[_inputPtr]  +  _inputBuffer[_inputPtr];  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _numTypesValid[_inputPtr]  +  _inputBuffer[_inputPtr];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _numTypesValid[_inputPtr]  +  _inputBuffer[_inputPtr];	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	non-compiled	[CE]  array  required,  but  int  found	65	None	replace
499	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++].    &    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
500	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++].  &  _input;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++].  &  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++].  &  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++].    &    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
501	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++].  &  _inputEnd;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++].  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++].  &  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++].    &    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
502	[BUG]  [BUGGY]  int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    int    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	148	None	replace
503	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    int    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	148	None	replace
504	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
505	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
506	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  incompatible  types	47	None	add
507	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	47	None	add
508	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	47	None	add
509	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currIn  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currIn  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currIn	  	non-compiled	[CE]  ';'  expected	47	None	add
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	171	1	add
511	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	171	1	add
512	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBufferPtr  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBufferPtr  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _tokenInputTotal  =  _inputBufferPtr  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	171	None	add
513	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer.length  +  _inputPtr.length;  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer.length  +  _inputPtr.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _tokenInputTotal  =  _inputBuffer.length  +  _inputPtr.length;	  	non-compiled	[CE]  int  cannot  be  dereferenced	171	None	add
514	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _inputPtr  =  _inputPtr  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _inputPtr  =  _inputPtr  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	171	1	add
515	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _inputPtr  =  _inputPtr  +  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _inputPtr  =  _inputPtr  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _inputPtr  =  _inputPtr  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	171	1	add
516	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	compilable	  [FE]  AssertionFailedError  	24	1	add
517	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	compilable	  [FE]  AssertionFailedError  	24	1	add
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	compilable	  [FE]  AssertionFailedError  	24	1	add
519	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	compilable	  [FE]  AssertionFailedError  	24	1	add
520	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [CE]  cannot  find  symbol  _input  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _input	24	None	add
521	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _in  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _in	  	non-compiled	[CE]  ';'  expected	24	None	add
522	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [CE]  unexpected  type  [FE]            AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &	  	non-compiled	[CE]  unexpected  type	24	None	add
523	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
524	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
525	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
526	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
527	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	76	None	add
528	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	add
529	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	add
530	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	91	None	add
531	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	add
532	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	add
533	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	add
534	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	add
535	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _binaryValue  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _binaryValue  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _binaryValue  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	non-compiled	[CE]  incompatible  types	91	None	add
536	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	1	add
537	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	1	add
538	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  1;  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  1;	  	non-compiled	[CE]  <identifier>  expected	136	None	add
539	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1);	  	non-compiled	[CE]  ';'  expected	136	None	add
540	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	1	add
541	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	1	add
542	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
543	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
544	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0	  	non-compiled	[CE]  ';'  expected	58	None	add
545	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x  [CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0x	  	non-compiled	[CE]  hexadecimal  numbers  must  contain  at  least  one  hexadecimal  digit	58	None	add
546	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
547	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
549	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
550	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	12	None	add
551	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	add
552	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	add
553	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
554	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
555	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	1	None	add
556	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
557	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
558	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xFF;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
559	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	102	None	replace
560	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd;  _inputPtr  =  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	                _inputPtr    =    _inputEnd;    _inputPtr  =  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	131	1	add
561	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd;  _inputPtr  =  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd;  _inputPtr  =  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd;    _inputPtr  =  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	131	1	add
562	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd;  _inputPtr  =  _inputStart;  [CE]  cannot  find  symbol  _inputStart  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd;  _inputPtr  =  _inputStart;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd;    _inputPtr  =  _inputStart;	  	non-compiled	[CE]  cannot  find  symbol  _inputStart	131	None	add
563	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd;  int  _inputPtr  =  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	                _inputPtr    =    _inputEnd;    int  _inputPtr  =  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	131	1	add
564	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd;  int  _inputPtr  =  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd;  int  _inputPtr  =  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd;    int  _inputPtr  =  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	131	1	add
565	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd;  (_inputPtr  =  _inputEnd);  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd;  (_inputPtr  =  _inputEnd);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd;    (_inputPtr  =  _inputEnd);	  	non-compiled	[CE]  not  a  statement	131	None	add
566	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1;  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	141	None	replace
567	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
568	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
569	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
570	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
571	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _inputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	78	None	add
572	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _binaryValue  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _binaryValue  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _binaryValue  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	non-compiled	[CE]  incompatible  types	78	None	add
573	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	non-compiled	[CE]  incompatible  types	78	None	add
574	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [CE]  cannot  find  symbol  _inputIndex  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputIndex;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputIndex;    	non-compiled	[CE]  cannot  find  symbol  _inputIndex	46	None	replace
575	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [CE]  cannot  find  symbol  _inputTotal  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputIndex;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	46	None	replace
576	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [CE]  cannot  find  symbol  _inputTotal  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputIndex;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	46	None	replace
577	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [CE]  cannot  find  symbol  _inputIndex  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputIndex;    	non-compiled	[CE]  cannot  find  symbol  _inputIndex	46	None	replace
578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	159	1	replace
579	[BUG]  [BUGGY]  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	159	1	replace
580	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	159	None	replace
581	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInput  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInput	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	159	None	replace
582	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr++]  +  _inputBuffer.length;  [CE]  array  required,  but  long  found  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed[_inputPtr++]  +  _inputBuffer.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed.length;    	non-compiled	[CE]  array  required,  but  long  found	30	None	replace
583	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _currInputProcessed.length;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _currInputProcessed.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _currInputProcessed.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	30	None	replace
584	[BUG]  [BUGGY]  _tokenInputTotal  =  _currToken  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currToken  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currToken  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	142	None	replace
585	[BUG]  [BUGGY]  _currTokenInputTotal  =  _currTokenInputProcessed  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;  [CE]  cannot  find  symbol  _currTokenInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currTokenInputTotal  =  _currTokenInputProcessed  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currTokenInputTotal  =  _currTokenInputProcessed  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currTokenInputTotal	142	None	replace
586	[BUG]  [BUGGY]  _currTokenInputTotal  =  _currTokenInput  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;  [CE]  cannot  find  symbol  _currTokenInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currTokenInputTotal  =  _currTokenInput  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currTokenInputTotal  =  _currTokenInput  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currTokenInputTotal	142	None	replace
587	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
588	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
589	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	62	None	add
590	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcesed;  [CE]  cannot  find  symbol  _currInputProcesed  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcesed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcesed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputProcesed	62	None	add
591	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed);	  	non-compiled	[CE]  ';'  expected	62	None	add
592	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
593	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
594	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
595	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
596	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
597	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
598	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _inputTotal  =  _inputBuffer[_inputPtr++]  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	143	None	add
599	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  	compilable	  [FE]  AssertionFailedError  	64	1	add
600	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  	compilable	  [FE]  AssertionFailedError  	64	1	add
601	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid);	  	non-compiled	[CE]  ';'  expected	64	None	add
602	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numtypesValid;  [CE]  cannot  find  symbol  _numtypesValid  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numtypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numtypesValid;	  	non-compiled	[CE]  cannot  find  symbol  _numtypesValid	64	None	add
603	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]          AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	64	None	add
604	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputPtr    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
605	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputPtr    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
606	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	2	1	replace
607	[BUG]  [BUGGY]  _inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;  [FE]  NullPointerException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _binaryValue[_inputPtr++]  &  0xFF;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	2	1	replace
608	[BUG]  [BUGGY]  int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    int    _inputPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  possible  loss  of  precision	135	None	replace
609	[BUG]  [BUGGY]  Integer  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  Integer  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	Integer  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    int    _inputPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  incompatible  types	135	None	replace
610	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputDescriptor  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputDescriptor	48	None	replace
611	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputState  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputState	48	None	replace
612	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _majorState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _majorState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	1	replace
613	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _majorState;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _majorState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _majorState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	1	replace
614	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [CE]  cannot  find  symbol  _currentState  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentState	48	None	replace
615	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input;  [CE]  cannot  find  symbol  _input  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _input	42	None	replace
616	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  ';'  expected	42	None	replace
617	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _in  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _in	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  ';'  expected	42	None	replace
618	[BUG]  [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBufferLen;  [CE]  cannot  find  symbol  _inputBufferLen  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBufferLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputEnd  -  _inputBufferLen;	          _inputPtr    =    _inputEnd    -    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputBufferLen	163	None	replace
619	[BUG]  [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBuffer;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputEnd  -  _inputBuffer;	          _inputPtr    =    _inputEnd    -    _inputPtr;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	163	None	replace
620	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	49	None	replace
621	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputState;  [CE]  cannot  find  symbol  _inputTotal  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	49	None	replace
622	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _in  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _in	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  ';'  expected	147	None	replace
623	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xf;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xf;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
624	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xf;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xf;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xf;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
625	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _inputBuffer.length);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _inputBuffer.length);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  _inputBuffer.length);	  _tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    	non-compiled	[CE]  ']'  expected	172	None	replace
626	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext.getChars(0,  _inputPtr);  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext.getChars(0,  _inputPtr);  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext.getChars(0,  _inputPtr);  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	177	None	replace
627	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	177	None	replace
628	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++].    &    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
629	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++].    &    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
630	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr].  &  0xFF;  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr].  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr].  &  0xFF;	  	non-compiled	[CE]  <identifier>  expected	9	None	add
631	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputP  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputP  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputP	  	non-compiled	[CE]  ';'  expected	22	None	add
632	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr]  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	88	None	replace
633	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
634	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;	  _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
635	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;	  _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
636	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _currInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _currInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _currInputProcessed    =    _currInputProcessed    +    1;    _currInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	173	None	add
637	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _inputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _inputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _currInputProcessed    =    _currInputProcessed    +    1;    _inputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	173	None	add
638	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
639	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd;  int  inputPtr  =  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	                _inputPtr    =    _inputEnd;    int  inputPtr  =  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	131	1	add
640	[BUG]  [BUGGY]          _inputPtr  =  _inputEnd;  int  inputPtr  =  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]          _inputPtr  =  _inputEnd;  int  inputPtr  =  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	                _inputPtr    =    _inputEnd;    int  inputPtr  =  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	131	1	add
641	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  <  <  _currInputProcessed;  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  <  <  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  <  <  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    	non-compiled	[CE]  >  expected	63	None	replace
642	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
643	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _cur  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _cur  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _cur	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	133	None	replace
644	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	12	None	add
645	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputPtr  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
646	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _startPtr  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	12	None	add
647	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentIndex;  [CE]  cannot  find  symbol  _currentIndex  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentIndex;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentIndex;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentIndex	54	None	replace
648	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentElement;  [CE]  cannot  find  symbol  _currentElement  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentElement;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentElement;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentElement	54	None	replace
649	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	47	None	add
650	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currTokenInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currTokenInputTotal	47	None	add
651	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	95	None	add
652	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  [CE]  cannot  find  symbol  _inputProcessed  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputProcessed	20	None	replace
653	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _bufferLen;  [CE]  cannot  find  symbol  _bufferLen  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _bufferLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _bufferLen;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _bufferLen	20	None	replace
654	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
655	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	add
656	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _startToken  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [CE]  cannot  find  symbol  _startToken  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _startToken  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _startToken  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	non-compiled	[CE]  cannot  find  symbol  _startToken	78	None	add
657	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr]  +  _currentState;  [CE]  cannot  find  symbol  _startPtr  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	151	None	replace
658	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr]  +  _currentProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr]  +  _currentProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr]  +  _currentProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	151	None	replace
659	[BUG]  [BUGGY]  _inputPtr  =  _inputStart;  [CE]  cannot  find  symbol  _inputStart  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputStart;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputStart;	          _inputPtr    =    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputStart	132	None	replace
660	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
661	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
662	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	add
663	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startToken  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _startToken  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startToken  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _startToken  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _startToken	41	None	add
664	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputPtr  +  2;	  _tokenInputTotal    =    _inputPtr    +    1;    	compilable	  [FE]  AssertionFailedError  	180	1	replace
665	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputPtr  +  2;	  _tokenInputTotal    =    _inputPtr    +    1;    	compilable	  [FE]  AssertionFailedError  	180	1	replace
666	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
667	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
668	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
669	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	1	add
670	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];  }  [CE]  unexpected  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    +    1    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  unexpected  type	156	None	replace
671	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +=  1  =  _inputBuffer[_inputPtr  +  1];  [CE]  unexpected  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +=  1  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +=  1  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    +    1    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  unexpected  type	156	None	replace
672	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];  }  else  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];  }  else  {  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];  }  else  {	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    +    1    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
673	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _inputPtr  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _inputPtr  =  _inputBuffer[_inputPtr]  &  1;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
674	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _inputPtr  =  _inputBuffer[_inputPtr]  &  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _inputPtr  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _inputPtr  =  _inputBuffer[_inputPtr]  &  1;	  	compilable	  [FE]  AssertionFailedError  	167	1	add
675	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  1;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    int  _inputPtr  =  _inputBuffer[_inputPtr]  &  1;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	167	None	add
676	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  <  <  NR_UNKNOWN;  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  <  <  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  <  <  NR_UNKNOWN;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    	non-compiled	[CE]  >  expected	129	None	replace
677	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputBuffer;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputBuffer;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr++]    +    _inputBuffer;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	145	None	replace
678	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	replace
679	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	replace
680	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	replace
681	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	replace
682	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++];  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	replace
683	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++];  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	replace
684	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	58	None	add
685	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	169	None	add
686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	65	1	replace
687	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _numTypesValid;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	compilable	  [FE]  AssertionFailedError  	65	1	replace
688	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	114	1	add
689	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	114	1	add
690	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	114	None	add
691	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	1	add
692	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	136	1	add
693	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	136	None	add
694	[BUG]  [BUGGY]  _startInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [CE]  cannot  find  symbol  _startInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startInputTotal  =  _inputBuffer[_inputPtr]  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _startInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	175	None	replace
695	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	106	None	add
696	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	106	None	add
697	[BUG]  [BUGGY]  _currTotal  =  _currToken  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;  [CE]  cannot  find  symbol  _currTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currTotal  =  _currToken  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currTotal  =  _currToken  +  1;  _tokenInputProcessed  =  _currTokenInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currTotal	142	None	replace
698	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _tokenInputProcessed  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputPtr  +  1;  _tokenInputProcessed  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _tokenInputProcessed	142	None	replace
699	[BUG]  [BUGGY]  _currInputTotal  =  _currInputProcessed  +  1;  _tokenInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _currInputProcessed  +  1;  _tokenInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _currInputProcessed  +  1;  _tokenInputProcessed  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	142	None	replace
700	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [CE]  cannot  find  symbol  _startPtr  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr++]  +  _inputIndex;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _startPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	166	None	replace
701	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor.length;  [CE]  cannot  find  symbol  _currInputDescriptor  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputDescriptor	30	None	replace
702	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _inputBuffer.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	30	None	replace
703	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	non-compiled	[CE]  ';'  expected	82	None	replace
704	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  }	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
705	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  }	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	compilable	  [FE]  AssertionFailedError  	82	1	replace
706	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
707	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
708	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputProcessed);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputProcessed);	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	140	None	replace
709	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputEnd);  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputEnd);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputEnd);	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	140	None	replace
710	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
711	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
712	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF);    	non-compiled	[CE]  ';'  expected	61	None	replace
713	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF);    	non-compiled	[CE]  ';'  expected	61	None	replace
714	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    _inputPtr  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	64	1	add
715	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    _inputPtr  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	64	1	add
716	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  4;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
718	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _tokenInputTotal  =  _currInputProcessed  +  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    2;    _tokenInputTotal  =  _currInputProcessed  +  4;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
719	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  |  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  |  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
720	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  |  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  |  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  |  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
721	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  AssertionFailedError  	74	1	replace
722	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  }  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  AssertionFailedError  	74	1	replace
723	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	80	None	add
724	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	105	None	replace
725	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	105	None	replace
726	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	126	None	replace
727	[BUG]  [BUGGY]  _inputTotal  =  _inputPtr  +  _inputProcessed;  _currInputTotal  =  _inputPtr  +  _inputBufferLen;  [CE]  cannot  find  symbol  _inputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputPtr  +  _inputProcessed;  _currInputTotal  =  _inputPtr  +  _inputBufferLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputPtr  +  _inputProcessed;  _currInputTotal  =  _inputPtr  +  _inputBufferLen;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	126	None	replace
728	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInput  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInput	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	126	None	replace
729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  AssertionFailedError  	77	1	replace
730	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  }  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  AssertionFailedError  	77	1	replace
731	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  }  else  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  }  else  {  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  }  else  {	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
732	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
733	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd)    {    return    _startToken();    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
734	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentIndex;  [CE]  cannot  find  symbol  _currentIndex  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentIndex;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentIndex;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentIndex	51	None	replace
735	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _current;  [CE]  cannot  find  symbol  _current  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _current;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _current;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _current	51	None	replace
736	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	28	None	add
737	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	28	None	add
738	[BUG]  [BUGGY]  _startInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startInputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startInputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _startInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	161	None	replace
739	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputState;  [CE]  cannot  find  symbol  _currInputState  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputState	53	None	replace
740	[BUG]  [BUGGY]  int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  variable  _inputTotal  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  variable  _inputTotal  is  already  defined  in  method  nextToken()	119	None	replace
741	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	1	replace
742	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	1	replace
743	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
744	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	25	1	replace
745	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	100	1	add
746	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	100	1	add
747	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	100	None	add
748	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _inputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	116	None	add
749	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	116	None	add
750	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	add
751	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	69	1	add
752	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	69	None	add
753	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)]  &  0xFF;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)]  &  0xFF;	  	non-compiled	[CE]  ']'  expected	69	None	add
754	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	110	None	replace
755	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputLen;  [CE]  cannot  find  symbol  _inputTotal  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputLen;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	110	None	replace
756	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	144	1	replace
757	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	144	1	replace
758	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	144	1	replace
759	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  2;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	144	1	replace
760	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _currInputTotal  =  _currInputProcessed  +  1L;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _currInputTotal  =  _currInputProcessed  +  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1L;    _currInputTotal  =  _currInputProcessed  +  1L;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	138	None	add
761	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	76	None	add
762	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
763	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	76	1	add
764	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
765	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _inputPtr  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	add
766	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _inputPtr  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _inputPtr  =  _inputBuffer[_inputPtr++];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	add
767	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _startTokenInputTotal  =  _inputBuffer[_inputPtr++];  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _startTokenInputTotal  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _startTokenInputTotal  =  _inputBuffer[_inputPtr++];	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	71	None	add
768	[BUG]  [BUGGY]  Integer  _tokenInputTotal  =  _currInputProcessed  +  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  Integer  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	Integer  _tokenInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    int    _tokenInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  incompatible  types	85	None	replace
769	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
770	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
771	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	146	None	add
772	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	146	None	add
773	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  *  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  *  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
774	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  *  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  *  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  *  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
775	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	171	None	add
776	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _tokenInputTotal  =  _inputBuffer.length  +  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	171	1	add
777	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _tokenInputTotal  =  _inputBuffer.length  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _tokenInputTotal  =  _inputBuffer.length  +  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	171	1	add
778	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	56	None	add
779	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputProcessed;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	107	None	replace
780	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _binaryValue;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _binaryValue;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _binaryValue;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	107	None	replace
781	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _input;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  -  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	107	None	replace
782	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  ch;  [CE]  cannot  find  symbol  ch  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  ch;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  ch;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentState;    	non-compiled	[CE]  cannot  find  symbol  ch	149	None	replace
783	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypes;  [CE]  cannot  find  symbol  _numTypes  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypes;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _numTypes;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentState;    	non-compiled	[CE]  cannot  find  symbol  _numTypes	149	None	replace
784	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _binary;  [CE]  cannot  find  symbol  _binary  [FE]    ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _binary;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _binary;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _binary	153	None	replace
785	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _binaryValue;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]      ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _binaryValue;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _binaryValue;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	153	None	replace
786	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
787	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binary;  [CE]  cannot  find  symbol  _binary  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binary;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binary;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currProcessed;    	non-compiled	[CE]  cannot  find  symbol  _binary	50	None	replace
788	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._currentSecond;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._currentSecond;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._currentSecond;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currProcessed;    	non-compiled	[CE]  ';'  expected	50	None	replace
789	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._currentSecond;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._currentSecond;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._currentSecond;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _ioContext._	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currProcessed;    	non-compiled	[CE]  ';'  expected	50	None	replace
790	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	62	None	add
791	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr],  _currInputProcessed;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr],  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr],  _currInputProcessed;	  	non-compiled	[CE]  ';'  expected	62	None	add
792	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  3;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  +  3;	  _tokenInputTotal    =    _currInputProcessed    +    1L;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
793	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  3;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  +  3;	  _tokenInputTotal    =    _currInputProcessed    +    1L;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
794	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
795	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  2;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
796	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  2;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
797	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  _inputProcessed);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr  +  _inputProcessed);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr  +  _inputProcessed);	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	17	None	replace
798	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;  [CE]  cannot  find  symbol  _inputStart  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	non-compiled	[CE]  cannot  find  symbol  _inputStart	115	None	replace
799	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;  [CE]  cannot  find  symbol  _currInputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	150	None	replace
800	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	add
801	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	97	1	add
802	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	97	None	add
803	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;  [CE]  cannot  find  symbol  _inputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	134	None	replace
804	[BUG]  [BUGGY]  Integer  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  Integer  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	Integer  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    int    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	60	None	replace
805	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	152	None	add
806	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  int  _inputPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]      ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  int  _inputPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    int  _inputPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	152	None	add
807	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _currInputTotal  =  _currInputProcessed  *  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _currInputTotal  =  _currInputProcessed  *  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    *    1;    _currInputTotal  =  _currInputProcessed  *  1;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	39	None	add
808	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
809	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++];  _tokenInputTotal  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
810	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputDescriptor;  [CE]  cannot  find  symbol  _currInputDescriptor  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputDescriptor;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputDescriptor;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed);    	non-compiled	[CE]  cannot  find  symbol  _currInputDescriptor	55	None	replace
811	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
812	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  *  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    	compilable	  [FE]  AssertionFailedError  	67	1	replace
813	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  *  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    	compilable	  [FE]  AssertionFailedError  	67	1	replace
814	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputP  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputP  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputP	  	non-compiled	[CE]  ';'  expected	122	None	add
815	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputEnd;  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	141	None	replace
816	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputProcessed;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr  +  _inputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	141	None	replace
817	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer  +  _currInputProcessed.length  -  1;  [CE]  long  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer  +  _currInputProcessed.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer  +  _currInputProcessed.length  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	117	None	replace
818	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [CE]  cannot  find  symbol  _input  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _input;    	non-compiled	[CE]  cannot  find  symbol  _input	94	None	replace
819	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [CE]  cannot  find  symbol  _inputTotal  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _input;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	94	None	replace
820	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _inputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _inputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    _inputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	128	None	add
821	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	143	None	add
822	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	add
823	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	add
824	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _in  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _in	  	non-compiled	[CE]  ';'  expected	89	None	add
825	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	127	None	replace
826	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currentState;  [CE]  cannot  find  symbol  _startPtr  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr++]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	178	None	replace
827	[BUG]  [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	178	None	replace
828	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputPtr  =  _inputPtr  +  1;  [CE]  cannot  find  symbol  _tokenInputPtr  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _tokenInputPtr  =  _inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    1;    _tokenInputPtr  =  _inputPtr  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _tokenInputPtr	179	None	add
829	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputProcessed  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  [CE]  cannot  find  symbol  _inputProcessed  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputProcessed  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputProcessed  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputPtr    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputProcessed	125	None	replace
830	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    _currInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	158	None	add
831	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    _inputPtr  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	158	None	add
832	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	add
833	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	add
834	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _startToken  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [CE]  cannot  find  symbol  _startToken  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _startToken  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _startToken  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _startToken	91	None	add
835	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	44	1	replace
836	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  }  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	44	1	replace
837	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _input	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	non-compiled	[CE]  ';'  expected	44	None	replace
838	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [CE]  cannot  find  symbol  _inputIndex  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputIndex;    	non-compiled	[CE]  cannot  find  symbol  _inputIndex	46	None	replace
839	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	18	None	add
840	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	18	None	add
841	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	18	None	add
842	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  }  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1)];    	non-compiled	[CE]  ']'  expected	124	None	replace
843	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1)];    	non-compiled	[CE]  ']'  expected	124	None	replace
844	[BUG]  [BUGGY]  _tokenInputTotal  =  _curr[_inputPtr++]  +  _inputBuffer;  [CE]  cannot  find  symbol  _curr  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _curr[_inputPtr++]  +  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _curr[_inputPtr++]  +  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currToken;    	non-compiled	[CE]  cannot  find  symbol  _curr	21	None	replace
845	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  4;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    2;    	compilable	  [FE]  AssertionFailedError  	87	1	replace
846	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  4;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    2;    	compilable	  [FE]  AssertionFailedError  	87	1	replace
847	[BUG]  [BUGGY]  _tokenInputTotal  =  _currToken  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currToken  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currToken  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	174	None	replace
848	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _startToken  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _startToken  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _startToken  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _startToken  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _startToken	73	None	add
849	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed	  	non-compiled	[CE]  ';'  expected	52	None	add
850	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
851	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
852	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
853	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
854	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xF;  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr++].  &  0xF;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
855	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	176	None	add
856	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	176	None	add
857	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _binaryValue  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  incompatible  types	176	None	add
858	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
859	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	add
860	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _inputBuffer  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _inputBuffer  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    _inputBuffer  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  	non-compiled	[CE]  incompatible  types	31	None	add
861	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  +  _inputBuffer.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	118	None	replace
862	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	154	None	add
863	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	154	None	add
864	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
865	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	57	1	replace
866	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	24	None	add
867	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputProperty;  [CE]  cannot  find  symbol  _inputState  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputProperty;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputState;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputProperty;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputProperty;    	non-compiled	[CE]  cannot  find  symbol  _inputState	27	None	replace
868	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputState;  [CE]  cannot  find  symbol  _inputState  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  _inputState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputProperty;    	non-compiled	[CE]  cannot  find  symbol  _inputState	27	None	replace
869	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  ch;  [CE]  cannot  find  symbol  ch  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  ch;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  ch;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    int    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  ch	148	None	replace
870	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
871	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	add
872	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _startTokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	111	None	add
873	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    	compilable	  [FE]  AssertionFailedError  	79	1	replace
874	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  }  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    	compilable	  [FE]  AssertionFailedError  	79	1	replace
875	[BUG]  [BUGGY]  _tokenInputTotal  =  _curr[_inputPtr]  +  _inputBuffer;  [CE]  cannot  find  symbol  _curr  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _curr[_inputPtr]  +  _inputBuffer;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _curr[_inputPtr]  +  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currToken;    	non-compiled	[CE]  cannot  find  symbol  _curr	68	None	replace
876	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currToken;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currToken;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currToken;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currToken;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	68	None	replace
877	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_binaryValue  ==  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
878	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  ';'  expected	170	None	replace
879	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
880	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	170	1	replace
881	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	1	replace
882	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	1	replace
883	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  _inputProcessed;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr  +  _inputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
884	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	13	None	replace
885	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
886	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
887	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _startPtr  =  _inputPtr  +  1;  [CE]  cannot  find  symbol  _startPtr  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _startPtr  =  _inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    1;    _startPtr  =  _inputPtr  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	179	None	add
888	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _itemInputTotal  =  _inputPtr  +  1;  [CE]  cannot  find  symbol  _itemInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  _itemInputTotal  =  _inputPtr  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    1;    _itemInputTotal  =  _inputPtr  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _itemInputTotal	179	None	add
889	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  [CE]  unexpected  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &	  	non-compiled	[CE]  unexpected  type	89	None	add
890	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_binaryValue!=  null)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
891	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  ';'  expected	57	None	replace
892	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	146	None	add
893	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
894	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
895	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _cur  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _cur  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _cur	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
896	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [CE]  cannot  find  symbol  _inputInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _inputInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _inputInputTotal	24	None	add
897	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	add
898	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	add
899	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputBuffer  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _inputBuffer  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    _inputBuffer  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	non-compiled	[CE]  incompatible  types	24	None	add
900	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _inputBuffer  =  _inputBuffer[_inputPtr++];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  _inputBuffer  =  _inputBuffer[_inputPtr++];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++];    _inputBuffer  =  _inputBuffer[_inputPtr++];	  	non-compiled	[CE]  incompatible  types	71	None	add
901	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputBuffer  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputBuffer  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputBuffer  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	non-compiled	[CE]  incompatible  types	33	None	add
902	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binaryValue;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binaryValue;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _binaryValue;	  _tokenInputTotal    =    _currInputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	20	None	replace
903	[BUG]  [BUGGY]  _startPtr  =  _inputBufferPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startPtr  =  _inputBufferPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startPtr  =  _inputBufferPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _startPtr    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _startPtr	160	None	replace
904	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState.length;  [CE]  cannot  find  symbol  _currentState  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed.length;    	non-compiled	[CE]  cannot  find  symbol  _currentState	30	None	replace
905	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed.length;  [CE]  cannot  find  symbol  _currentProcessed  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed.length;    	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	30	None	replace
906	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [CE]  cannot  find  symbol  _inputStart  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputStart;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _inputStart	43	None	add
907	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	104	None	replace
908	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	104	None	replace
909	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _startPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  _startPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xF;    _startPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	111	None	add
910	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	92	1	replace
911	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  }	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	92	1	replace
912	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  cannot  find  symbol  _startTokenInputTotal  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xF;    _startTokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol  _startTokenInputTotal	97	None	add
913	[BUG]  [BUGGY]  _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputBuffer  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputInputTotal    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  incompatible  types	75	None	replace
914	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _startInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    1;    _startInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	83	None	add
915	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _startInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    1;    _startInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	83	None	add
916	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _currInputProcessed        +        1;        _currInputProcessed    =    _currInputProcessed    +    1;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _currInputProcessed  =  _currInputProcessed  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	173	1	add
917	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _currInputProcessed  =  _currInputProcessed  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _currInputProcessed    =    _currInputProcessed    +    1;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _currInputProcessed  =  _currInputProcessed  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	173	1	add
918	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _in  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _in  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _in	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	non-compiled	[CE]  ';'  expected	44	None	replace
919	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  }	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
920	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  }	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
921	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _inputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	7	None	add
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  +  2;	  _tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
923	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  2;	  _tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
924	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
925	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currIn  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currIn  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currIn	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	53	None	replace
926	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currentNode;  [CE]  cannot  find  symbol  _inputTotal  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currentNode;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  +  _currentNode;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	49	None	replace
927	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _inputInputTotal	80	None	add
928	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
929	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        _inputBuffer.length;        _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	80	1	add
930	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _currInputProcessed;    _startPtr  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	18	None	add
931	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  *  1L;	  _tokenInputTotal    =    _currInputProcessed    +    1L;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
932	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  *  1L;	  _tokenInputTotal    =    _currInputProcessed    +    1L;    	compilable	  [FE]  AssertionFailedError  	139	1	replace
933	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer.length  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _inputPtr  =  _inputBuffer.length  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	171	1	add
934	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer.length  +  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _inputPtr  =  _inputBuffer.length  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _inputPtr  =  _inputBuffer.length  +  _inputBuffer.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	171	1	add
935	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _startPtr  =  _inputPtr  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _startPtr  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  _startPtr  =  _inputPtr  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    _startPtr  =  _inputPtr  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	171	None	add
936	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer.length  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
937	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer.length  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer.length  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	28	1	add
938	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputBuffer  =  _inputBuffer.length  +  _currInputProcessed;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _inputBuffer  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer.length    +    _currInputProcessed;    _inputBuffer  =  _inputBuffer.length  +  _currInputProcessed;	  	non-compiled	[CE]  incompatible  types	28	None	add
939	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _currInputProcessed  =  _currInputProcessed  +  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    1L;    _currInputProcessed  =  _currInputProcessed  +  1L;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
940	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _currInputProcessed  =  _currInputProcessed  +  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _currInputProcessed  =  _currInputProcessed  +  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1L;    _currInputProcessed  =  _currInputProcessed  +  1L;	  	compilable	  [FE]  AssertionFailedError  	138	1	add
941	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _startInputTotal  =  _currInputProcessed  +  1L;  [CE]  cannot  find  symbol  _startInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  _startInputTotal  =  _currInputProcessed  +  1L;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1L;    _startInputTotal  =  _currInputProcessed  +  1L;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	138	None	add
942	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	152	None	add
943	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]      ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    _startPtr  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	152	None	add
944	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	compilable	  [FE]  ArithmeticException  	65	1	replace
945	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _numTypesValid;  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    	compilable	  [FE]  ArithmeticException  	65	1	replace
946	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputLen;  [CE]  cannot  find  symbol  _inputLen  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputLen;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputProperty;    	non-compiled	[CE]  cannot  find  symbol  _inputLen	27	None	replace
947	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputProperty;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
948	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputProperty;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
949	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	105	None	replace
950	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	105	None	replace
951	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _startInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [CE]  cannot  find  symbol  _startInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  _startInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    _startInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	116	None	add
952	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	154	None	add
953	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    *    _currInputProcessed;    _startPtr  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	154	None	add
954	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  }	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	84	1	replace
955	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  }	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	84	1	replace
956	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  }  else  {  _  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  }  else  {  _  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  }  else  {  _	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
957	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
958	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
959	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
960	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _inputEnd;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    -    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	107	1	replace
961	[BUG]  [BUGGY]  char  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  char  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	char  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    int    _inputPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  possible  loss  of  precision	135	None	replace
962	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr);    	non-compiled	[CE]  ';'  expected	45	None	replace
963	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
964	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInput  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInput	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	48	None	replace
965	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    	compilable	  [FE]  AssertionFailedError  	168	1	replace
966	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  2;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    	compilable	  [FE]  AssertionFailedError  	168	1	replace
967	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  inputPtr;  [CE]  cannot  find  symbol  inputPtr  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  inputPtr;	  _tokenInputTotal    =    _inputPtr    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  inputPtr	172	None	replace
968	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer.length  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer.length  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer.length  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	88	None	replace
969	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr  +  1]  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr  +  1]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr  +  1]  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	88	None	replace
970	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  4;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	153	1	replace
971	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  4;  [FE]  AssertionFailedError  [FE]    ArithmeticException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  4;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  4;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    /    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	153	1	replace
972	[BUG]  [BUGGY]  Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    int    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	148	None	replace
973	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _startPtr  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	12	None	add
974	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
975	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
976	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  }	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
977	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  }	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
978	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    	compilable	  [FE]  AssertionFailedError  	67	1	replace
979	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    	compilable	  [FE]  AssertionFailedError  	67	1	replace
980	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr],  &  0xFF;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr],  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr],  &  0xFF;	  	non-compiled	[CE]  ';'  expected	9	None	add
981	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  2);	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	140	None	replace
982	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _cur  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _cur  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _cur	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	109	None	replace
983	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _startPtr  =  _inputBuffer[_inputPtr++]  +  1;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  _startPtr  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    _startPtr  =  _inputBuffer[_inputPtr++]  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	143	None	add
984	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    2];    _startPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	78	None	add
985	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
986	[BUG]  [BUGGY]  int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	int  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	119	1	replace
987	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _nameInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [CE]  cannot  find  symbol  _nameInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _nameInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    _nameInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  	non-compiled	[CE]  cannot  find  symbol  _nameInputTotal	64	None	add
988	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _startInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [CE]  cannot  find  symbol  _startInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  _startInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _numTypesValid;    _startInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	64	None	add
989	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _inputBuffer  =  _inputBuffer[_inputPtr]  &  1;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  _inputBuffer  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    1;    _inputBuffer  =  _inputBuffer[_inputPtr]  &  1;	  	non-compiled	[CE]  incompatible  types	167	None	add
990	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _startPtr  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	73	None	add
991	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_binaryValue  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	non-compiled	[CE]  incompatible  types	74	None	replace
992	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _startPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  _startPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1]    &    0xFF;    _startPtr  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	69	None	add
993	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputLen;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  +  _inputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _inputLen;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	150	None	replace
994	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
995	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
996	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	47	None	add
997	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	1	add
998	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	169	1	add
999	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currIn  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currIn  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currIn	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	17	None	replace
1000	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInput  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInput	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr    +    _currInputProcessed);    	non-compiled	[CE]  ']'  expected	17	None	replace
1001	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	176	None	add
1002	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	176	None	add
1003	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _currInputProcessed;        _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed	  	non-compiled	[CE]  ';'  expected	176	None	add
1004	[BUG]  [BUGGY]  _tokenInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _tokenInputProcessed  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputProcessed  =  _currInputProcessed  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputProcessed    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _tokenInputProcessed	142	None	replace
1005	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  }	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    2;    	compilable	  [FE]  AssertionFailedError  	87	1	replace
1006	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  }	  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal    =    _currInputProcessed    +    2;    	compilable	  [FE]  AssertionFailedError  	87	1	replace
1007	[BUG]  [BUGGY]  _inputBuffer  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputBuffer  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputBuffer  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _inputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	99	None	replace
1008	[BUG]  [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBufferPtr;  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputEnd  -  _inputBufferPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputEnd  -  _inputBufferPtr;	          _inputPtr    =    _inputEnd    -    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	163	None	replace
1009	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _inputBuffer  =  _inputBuffer[_inputPtr++]  &  1;  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  _inputBuffer  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    1;    _inputBuffer  =  _inputBuffer[_inputPtr++]  &  1;	  	non-compiled	[CE]  incompatible  types	136	None	add
1010	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _input  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _input	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  ';'  expected	147	None	replace
1011	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currIn  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currIn  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currIn	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	177	None	replace
1012	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInput	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  ';'  expected	177	None	replace
1013	[BUG]  [BUGGY]  _parserFeatures  =  _parserFeatures;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _parserFeatures  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _parserFeatures  =  _parserFeatures;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_parserFeatures  =  _parserFeatures;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _parserFeatures	177	None	replace
1014	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);	  	non-compiled	[CE]  ';'  expected	1	None	add
1015	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _currInputProcessed  =  _currInputProcessed  *  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    *    1;    _currInputProcessed  =  _currInputProcessed  *  1;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1016	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _currInputProcessed  =  _currInputProcessed  *  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  _currInputProcessed  =  _currInputProcessed  *  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    *    1;    _currInputProcessed  =  _currInputProcessed  *  1;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1017	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  _inputBuffer.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
1018	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  _inputBuffer.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
1019	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    _startPtr  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	158	None	add
1020	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  else  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  else  {  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  }  else  {	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputPtr    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
1021	[BUG]  [BUGGY]  _inputPtr  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
1022	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer.length  +  _currInputProcessed;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length);    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
1023	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	114	None	add
1024	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputBuffer  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  _inputBuffer  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    _inputBuffer  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	non-compiled	[CE]  incompatible  types	114	None	add
1025	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  (_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF);  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  (_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xF;    (_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF);	  	non-compiled	[CE]  not  a  statement	3	None	add
1026	[BUG]  [BUGGY]  _currInputProcessed  =  _inputPtr  +  _inputProcessed;  [CE]  cannot  find  symbol  _inputProcessed  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _inputPtr  +  _inputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputProcessed  =  _inputPtr  +  _inputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputProcessed	159	None	replace
1027	[BUG]  [BUGGY]  _currInputProcessed  =  _inputPtr  +  _currentState;  [CE]  cannot  find  symbol  _currentState  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _inputPtr  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputProcessed  =  _inputPtr  +  _currentState;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentState	159	None	replace
1028	[BUG]  [BUGGY]  _currInputProcessed  =  _inputPtr  +  _itemInput;  [CE]  cannot  find  symbol  _itemInput  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputProcessed  =  _inputPtr  +  _itemInput;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputProcessed  =  _inputPtr  +  _itemInput;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _itemInput	159	None	replace
1029	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  -  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
1030	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd  -  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputEnd;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
1031	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr    =    _inputBuffer[_inputPtr]    &    0xFF;    	non-compiled	[CE]  ';'  expected	170	None	replace
1032	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _inputBuffer  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  incompatible  types	76	None	add
1033	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _startPtr  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr        +        1];        _inputPtr    =    _inputBuffer[_inputPtr    +    1];    _startPtr  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	76	None	add
1034	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputBuffer.length;    _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	31	None	add
1035	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _startInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  2;  [CE]  cannot  find  symbol  _startInputTotal  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _startInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    2;    _startInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  2;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	86	None	add
1036	[BUG]  [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _startInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [CE]  cannot  find  symbol  _startInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;  _startInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _currInputProcessed        +        1;        _tokenInputTotal    =    _currInputProcessed    +    2;    _startInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	86	None	add
1037	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputBuffer  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _inputBuffer  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _inputBuffer  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	non-compiled	[CE]  incompatible  types	91	None	add
1038	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputEnd;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd	  	non-compiled	[CE]  ';'  expected	91	None	add
1039	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
1040	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	52	None	add
1041	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputBuffer  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputBuffer  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputBuffer  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  incompatible  types	52	None	add
1042	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF);	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr);    	non-compiled	[CE]  ';'  expected	93	None	replace
1043	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _inputBuffer  =  _inputBuffer[_inputPtr]  +  1;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  _inputBuffer  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    1;    _inputBuffer  =  _inputBuffer[_inputPtr]  +  1;	  	non-compiled	[CE]  incompatible  types	66	None	add
1044	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _inputPtr  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    _inputPtr  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;	  	compilable	  [FE]  AssertionFailedError  	128	1	add
1045	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _inputPtr  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  _inputPtr  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    NR_UNKNOWN;    _inputPtr  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;	  	compilable	  [FE]  AssertionFailedError  	128	1	add
1046	[BUG]  [BUGGY]  _startInputTotal  =  _currInputProcessed  +  _inputBufferLen;  [CE]  cannot  find  symbol  _startInputTotal  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startInputTotal  =  _currInputProcessed  +  _inputBufferLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startInputTotal  =  _currInputProcessed  +  _inputBufferLen;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _startInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	161	None	replace
1047	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	62	None	add
1048	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	62	None	add
1049	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
1050	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputEnd;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
1051	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	110	None	replace
1052	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _id;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _id;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer[_inputPtr++]  +  _id;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	110	None	replace
1053	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
1054	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
1055	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _input	  	non-compiled	[CE]  ';'  expected	22	None	add
1056	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  <  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputPtr    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1057	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _currInputProcessed  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    2;    _currInputProcessed  =  _currInputProcessed  +  2;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1058	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _currInputProcessed  =  _currInputProcessed  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _currInputProcessed  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    2;    _currInputProcessed  =  _currInputProcessed  +  2;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1059	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _startInputTotal  =  _currInputProcessed  +  2;  [CE]  cannot  find  symbol  _startInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  _startInputTotal  =  _currInputProcessed  +  2;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    2;    _startInputTotal  =  _currInputProcessed  +  2;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	37	None	add
1060	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        +        _inputPtr;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	41	None	add
1061	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	144	1	replace
1062	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  -  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	144	1	replace
1063	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _cur  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _cur  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _cur	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed);    	non-compiled	[CE]  ';'  expected	55	None	replace
1064	[BUG]  [BUGGY]  _currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	126	None	replace
1065	[BUG]  [BUGGY]  _currInputTotal  =  _inputBufferPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _currInputTotal  =  _inputBufferPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_currInputTotal  =  _inputBufferPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	126	None	replace
1066	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	58	1	add
1067	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	58	1	add
1068	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [CE]  cannot  find  symbol  _inputInputTotal  [FE]      AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  _inputInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr]        &        0xFF;        _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xF;    _inputInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol  _inputInputTotal	58	None	add
1069	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputPtr  +  _inputBuffer.length  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    	compilable	  [FE]  AssertionFailedError  	117	1	replace
1070	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length  -  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputPtr  +  _inputBuffer.length  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length    -    1;    	compilable	  [FE]  AssertionFailedError  	117	1	replace
1071	[BUG]  [BUGGY]  _startInputTotal  =  _inputBuffer[_inputPtr  +  1]  +  1;  [CE]  cannot  find  symbol  _startInputTotal  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _startInputTotal  =  _inputBuffer[_inputPtr  +  1]  +  1;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_startInputTotal  =  _inputBuffer[_inputPtr  +  1]  +  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    _startInputTotal    =    _currInputProcessed    +    1;    	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	175	None	replace
1072	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  _inputPtr  =  _inputBuffer[_inputPtr++]  &	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
1073	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  0;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  0;	          _inputPtr    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	132	1	replace
1074	[BUG]  [BUGGY]  _inputPtr  =  0;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputPtr  =  0;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  0;	          _inputPtr    =    _inputEnd;    	compilable	  [FE]  AssertionFailedError  	132	1	replace
1075	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  }	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	174	1	replace
1076	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  }  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  }	  _tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	174	1	replace
1077	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _input  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _input  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _input	  	non-compiled	[CE]  ';'  expected	100	None	add
1078	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  [CE]  unexpected  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputBuffer[_inputPtr++]        &        _inputPtr;        _inputPtr    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &	  	non-compiled	[CE]  unexpected  type	100	None	add
1079	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputLen;  [CE]  cannot  find  symbol  _inputLen  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputLen;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputIndex;    	non-compiled	[CE]  cannot  find  symbol  _inputLen	46	None	replace
1080	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentLen;  [CE]  cannot  find  symbol  _currentLen  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentLen;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentLen;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currentProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentLen	51	None	replace
1081	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++].    &    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1082	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	if(_inputPtr  >=  _inputEnd)  {  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal    =    _inputBuffer[_inputPtr++].    &    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
1083	[BUG]  [BUGGY]  _inputTotal  =  _inputBufferPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]            AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _inputTotal  =  _inputBufferPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBufferPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	127	None	replace
1084	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _ioContext.length;  [CE]  cannot  find  symbol  length  [FE]          AssertionFailedError      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _ioContext.length;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _ioContext.length;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed.length;    	non-compiled	[CE]  cannot  find  symbol  length	118	None	replace
1085	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	95	1	add
1086	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	95	1	add
1087	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	95	None	add
1088	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
1089	[BUG]  [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal        =        _inputPtr        +        _currInputProcessed;        _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
1090	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputDescriptor  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;      [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]        _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputDescriptor;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _startPtr    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputDescriptor	178	None	replace
