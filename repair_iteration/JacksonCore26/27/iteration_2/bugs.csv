bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
2	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
4	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr++];	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
6	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++];	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
8	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
10	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
11	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	20	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
13	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
15	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
16	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  ']'  expected	15	None	add
17	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);	  	non-compiled	[CE]  ']'  expected	15	None	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
19	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
20	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	2	None	replace
21	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currToken;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currToken;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currToken;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
23	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
25	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputEnd;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
26	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr);  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr);	  	non-compiled	[CE]  ';'  expected	19	None	add
27	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputProperty;  [CE]  cannot  find  symbol  _inputProperty  [FE]          AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputProperty;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputProperty;	  	non-compiled	[CE]  cannot  find  symbol  _inputProperty	19	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
29	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer.length  +  _currInputProcessed;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
30	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed.length;  [CE]  long  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	12	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
32	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
34	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
35	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputVolume;  [CE]  cannot  find  symbol  _inputVolume  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputVolume;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputVolume;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputVolume	22	None	replace
36	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputTop;  [CE]  cannot  find  symbol  _inputTop  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputTop;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputTop;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputTop	22	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  +  2;	  _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
38	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  +  2;	  _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  *  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
40	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  *  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  *  1;	  _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
41	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	add
42	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	add
43	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	add
44	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	add
45	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr);	  	non-compiled	[CE]  ';'  expected	21	None	add
46	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [CE]  cannot  find  symbol  _inputIndex  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputIndex;	  	non-compiled	[CE]  cannot  find  symbol  _inputIndex	21	None	add
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
48	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
49	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	1	None	add
50	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;  [CE]  cannot  find  symbol  _currProcessed  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currProcessed	1	None	add
51	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;  [CE]  cannot  find  symbol  _currentProcessed  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	1	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
53	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	3	1	add
54	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentProcessed;  [CE]  cannot  find  symbol  _currentProcessed  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currentProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currentProcessed	3	None	add
55	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed);  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed);	  	non-compiled	[CE]  ';'  expected	3	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
57	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
59	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xF;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
60	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    int  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	5	None	add
61	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF);  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF);	  	non-compiled	[CE]  ';'  expected	5	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
63	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
65	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _numTypesValid;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
67	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
68	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currToken;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currToken;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currToken;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
69	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
70	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
71	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
72	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++];	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
74	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
75	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputInputTotal  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _inputInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputInputTotal  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _inputInputTotal	13	None	add
76	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
77	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  =  _inputBuffer[_inputPtr  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
78	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
79	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
81	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
82	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length);	  	non-compiled	[CE]  ';'  expected	11	None	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
84	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  1;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
85	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  int  _tokenInputTotal  =  _currInputProcessed  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  int  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1;    int  _tokenInputTotal  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	7	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
87	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputTotal  =  _currInputProcessed  +  2;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputTotal  =  _currInputProcessed  +  2;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
88	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _currInputTotal  [FE]          AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputTotal  =  _currInputProcessed  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1;    _currInputTotal  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	7	None	add
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
90	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
91	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
92	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
93	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr);  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr);	  	non-compiled	[CE]  ';'  expected	17	None	add
94	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [CE]  cannot  find  symbol  _input  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;	  	non-compiled	[CE]  cannot  find  symbol  _input	17	None	add
95	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
96	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
97	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
98	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
99	[BUG]  [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_inputTotal  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _inputTotal	18	None	replace
100	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
101	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
102	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _inputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	17	None	add
103	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputPtr;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    _tokenInputTotal  =  _inputBuffer[_inputPtr++].  &  _inputPtr;	  	non-compiled	[CE]  <identifier>  expected	17	None	add
104	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _inputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	11	None	add
105	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _currInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	11	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
107	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  -  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
108	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  +  _inputEnd;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr]  +  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	4	None	replace
109	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
110	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	1	None	add
111	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
112	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1]  &  0xF;	  _tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
113	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [CE]  cannot  find  symbol  _input  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _input;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  _input	22	None	replace
114	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
115	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputEnd;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
117	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length  -  1;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
118	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed.length;  [CE]  long  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	12	None	replace
119	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	5	None	add
120	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [CE]  cannot  find  symbol  _inputTotal  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	19	None	add
121	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    int  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	19	None	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
123	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr]  &  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	19	1	add
124	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1)];	  	non-compiled	[CE]  ']'  expected	13	None	add
125	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputPtr  =  _inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputPtr  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	15	None	add
126	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputTotal  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	15	None	add
127	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _inputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _inputTotal  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	15	None	add
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
129	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  NR_UNKNOWN;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
130	[BUG]  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	        int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	9	None	add
131	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]      _inputPtr  =  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	        _inputPtr  =  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
132	[BUG]  [BUGGY]      _inputPtr  =  _inputEnd;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]      _inputPtr  =  _inputEnd;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	        _inputPtr  =  _inputEnd;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	add
133	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
134	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _inputTotal  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _inputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _inputTotal	3	None	add
135	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    int  _inputPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  possible  loss  of  precision	3	None	add
136	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
137	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    &    _inputPtr;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  +  1L;	  _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
139	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1L;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  +  1L;	  _tokenInputTotal    =    _currInputProcessed    +    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
140	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed);	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
141	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  _currInputProcessed;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	non-compiled	[CE]  ']'  expected	16	None	replace
142	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputProcessed  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _tokenInputProcessed  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _tokenInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1;    _tokenInputProcessed  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _tokenInputProcessed	7	None	add
143	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
144	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
145	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _inputBuffer;  [CE]  cannot  find  symbol  _currInputBuffer  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _inputBuffer;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputBuffer[_inputPtr++]  +  _inputBuffer;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currInputBuffer	2	None	replace
146	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	add
147	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	add
148	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    int  _inputPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	21	None	add
149	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [CE]  cannot  find  symbol  _currentState  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currentState;	  _tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    	non-compiled	[CE]  cannot  find  symbol  _currentState	2	None	replace
150	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _currInputTotal  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _currInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _currInputTotal	3	None	add
151	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    _startPtr  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	3	None	add
152	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  ArithmeticException  	4	1	replace
153	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [FE]  ArithmeticException  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  /  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  ArithmeticException  	4	1	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
155	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  *  _currInputProcessed;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	4	1	replace
156	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];  [CE]  unexpected  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _inputPtr  +  1  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  unexpected  type	13	None	add
157	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  [CE]  cannot  find  symbol  _startPtr  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  _startPtr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr    +    1];    _startPtr  =  _inputBuffer[_inputPtr  +  1];	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	13	None	add
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
159	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _currInputProcessed  =  _inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _currInputProcessed  =  _inputPtr  +  _currInputProcessed;	  	compilable	  [FE]  AssertionFailedError  	15	1	add
160	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  _startPtr  =  _inputPtr  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    _startPtr  =  _inputPtr  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	15	None	add
161	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _startInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [CE]  cannot  find  symbol  _startInputTotal  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  _startInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    _startInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	11	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]      _inputPtr  =  _inputEnd  -  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	        _inputPtr  =  _inputEnd  -  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
163	[BUG]  [BUGGY]      _inputPtr  =  _inputEnd  -  _inputPtr;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]      _inputPtr  =  _inputEnd  -  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	        _inputPtr  =  _inputEnd  -  _inputPtr;	  	compilable	  [FE]  AssertionFailedError  	9	1	add
164	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  return  _finishToken();  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
165	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startToken();  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
166	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [CE]  cannot  find  symbol  _startPtr  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _inputPtr;    _startPtr  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	21	None	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
168	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  1;	  _tokenInputTotal    =    _inputBuffer[_inputPtr]    &    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	20	1	replace
169	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
170	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
172	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputPtr  +  _inputBuffer.length;	  _tokenInputTotal    =    _currInputProcessed    +    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
174	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _currInputProcessed  =  _currInputProcessed  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1;    _currInputProcessed  =  _currInputProcessed  +  1;	  	compilable	  [FE]  AssertionFailedError  	7	1	add
175	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;  [CE]  cannot  find  symbol  _startInputTotal  [FE]      AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  _startInputTotal  =  _currInputProcessed  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _currInputProcessed    +    1;    _startInputTotal  =  _currInputProcessed  +  1;	  	non-compiled	[CE]  cannot  find  symbol  _startInputTotal	7	None	add
176	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
177	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _currInputProcessed  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
178	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [CE]  cannot  find  symbol  _startPtr  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal    =    _inputBuffer[_inputPtr++]    +    _currInputProcessed;    _startPtr  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	  	non-compiled	[CE]  cannot  find  symbol  _startPtr	1	None	add
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputPtr  +  1;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
180	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;    [BUGGY]  _tokenInputTotal  =  _inputPtr  +  1;  [BUGGY]      _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputPtr  +  1;	  _tokenInputTotal    =    _inputPtr    +    _currInputProcessed;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
