bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
2	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _currInputProcessed;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
4	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  +  _currInputProcessed;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
6	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  0xFF;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  +  1;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
8	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  1;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  +  1;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]    [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	  	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
10	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]    [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	  	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
12	[BUG]  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _currInputProcessed  +  _inputBuffer.length;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
14	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr  +  1];	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
16	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputPtr  +  _currInputProcessed;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputPtr  +  _currInputProcessed;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
17	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
18	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  &  _inputPtr;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
20	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr]  &  _inputPtr;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  AssertionFailedError  	53	1	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
22	[BUG]  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError  [CONTEXT]  }  return  JsonToken.NOT_AVAILABLE;  }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  [BUGGY]  _tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  [BUGGY]    _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	_tokenInputTotal  =  _inputBuffer[_inputPtr++]  +  _inputPtr;	_tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	53	1	replace
