bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
2	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
4	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
6	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
7	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }	      	non-compiled	[CE]  incompatible  types	6	None	replace
8	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }	      	non-compiled	[CE]  incompatible  types	6	None	replace
10	[BUG]  [BUGGY]  ch  =  _skipWords(ch);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  ch  =  _skipWords(ch);  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	ch  =  _skipWords(ch);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(ch  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0)  {  if(ch  ==  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0)    {    if(ch  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(ch  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0)  {  if(ch  >=  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0)    {    if(ch  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
13	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(ch!=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0)  {  if(ch!=  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0)    {    if(ch!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
14	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(ch  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0)  {  if(ch  >>  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0)    {    if(ch  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
15	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
16	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
17	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >>  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >>  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  >>  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
19	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  =  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    <    =    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  =  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0)  {	  if(ch    <    =    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  INT_QUOTE)  {	  if(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	3	1	replace
22	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {	  if(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	3	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  0)  {	  if(ch    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
24	[BUG]  [BUGGY]  if(ch  <  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0)  {	  if(ch    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0x0020)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x0020)  {	  if(ch    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
26	[BUG]  [BUGGY]  if(ch  ==  0x0020)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0x0020)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x0020)  {	  if(ch    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
27	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
28	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
29	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
30	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
31	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch!=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE)    {    if(ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
32	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE)    {    if(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
33	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  >>  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  >>  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE)    {    if(ch  >>  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
34	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
35	[BUG]  [BUGGY]  if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MIN_VALUE_LEADING_ZEROS  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE_LEADING_ZEROS	9	None	replace
36	[BUG]  [BUGGY]  if(ch  ==  MINOR_VALUE_LEADING_ZEROS  ||  ch  ==  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  MINOR_VALUE_LEADING_ZEROS  ||  ch  ==  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MINOR_VALUE_LEADING_ZEROS  ||  ch  ==  MINOR_VALUE_LEADING_ZEROS)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	9	None	replace
37	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]            AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTES)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTES)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	9	None	replace
38	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  {  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  {  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  {  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  ')'  expected	7	None	add
39	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(ch  {  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0)  {  if(ch  {  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0)    {    if(ch  {  0)  {	  	non-compiled	[CE]  ')'  expected	4	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch!=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
45	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch!=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch!=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
47	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch!=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
48	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  {  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  {  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  {  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0x800)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x800)  {	  if(ch    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
50	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0x800)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x800)  {	  if(ch    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
51	[BUG]  [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_SINGLE_QUOTES  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTES)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTES)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_SINGLE_QUOTES	9	None	replace
52	[BUG]  [BUGGY]  if(ch  ==  INT_STRING  ||  ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_STRING  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_STRING  ||  ch  ==  INT_QUOTES)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_STRING  ||  ch  ==  INT_QUOTES)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_STRING	9	None	replace
53	[BUG]  [BUGGY]  if(ch  <  =  0x0020)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  =  0x0020)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020)  {	  if(ch    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  if(ch  ==  0)  {  If(ch  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  0)  {  If(ch  ==  0)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0)    {    If(ch  ==  0)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
55	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	      	non-compiled	[CE]  incompatible  types	6	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	      	compilable	  [FE]  AssertionFailedError  	6	1	replace
57	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	      	compilable	  [FE]  AssertionFailedError  	6	1	replace
58	[BUG]  [BUGGY]  _finishString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  _finishString();  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	_finishString();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  <  =  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch!=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
61	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch!=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
62	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
63	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTE)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();    [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTE)  {  [BUGGY]    return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	9	None	replace
