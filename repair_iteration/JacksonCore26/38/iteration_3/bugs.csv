bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0  ||  ch  ==  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0  ||  ch  ==  0)  {	  if(ch    ==    INT_QUOTES    ||    ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
2	[BUG]  [BUGGY]  if(ch  ==  0  ||  ch  ==  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0  ||  ch  ==  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0  ||  ch  ==  0)  {	  if(ch    ==    INT_QUOTES    ||    ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
3	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
4	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
5	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  >>  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  >>  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch  >>  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
6	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch  >=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
7	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  0x0020)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
9	[BUG]  [BUGGY]  if(ch  <  0x0020)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  0x0020  ||  ch  >  0x7F)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
11	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7F)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
12	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
13	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
14	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
15	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
16	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
17	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >>  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >>  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  >>  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
18	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  >=  INT_QUOTE)  {	  if(ch    <    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
20	[BUG]  [BUGGY]  if(ch  >=  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  >=  INT_QUOTE)  {	  if(ch    <    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
21	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch!=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
22	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch!=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
23	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch!=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
24	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch!=    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
25	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
26	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
27	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  0x800)  {	  if(ch    ==    0x800)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
29	[BUG]  [BUGGY]  if(ch  <  0x800)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x800)  {	  if(ch    ==    0x800)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
30	[BUG]  [BUGGY]  if(ch  <  =  0x800)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x800)  {	  if(ch    ==    0x800)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  >=  0x800)  {	  if(ch    ==    0x800)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
32	[BUG]  [BUGGY]  if(ch  >=  0x800)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  >=  0x800)  {	  if(ch    ==    0x800)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
33	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    =    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
34	[BUG]  [BUGGY]  if(ch  <  =  0x20  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x20  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x20  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    =    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7f)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  >=  0x80)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  >=  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  >=  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7f)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	9	None	replace
37	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7f)  {  if(ch  <  =  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7f)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  if(ch  <  0  ||  ch  >  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0  ||  ch  >  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0  ||  ch  >  MINOR_VALUE_LEADING_ZEROS)  {	  if(ch    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	24	None	replace
39	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  MINOR_VALUE_LEADING_ZEROS)  {	  if(ch    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	24	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch!=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
41	[BUG]  [BUGGY]  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch!=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
42	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
43	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  If(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  If(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    If(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
44	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
45	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
46	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
47	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  >>  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  >>  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  >>  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
48	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
49	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  >=  0x80)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  >=  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(ch  >=  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	7	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  >=  0)  {	  if(ch    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
52	[BUG]  [BUGGY]  if(ch  >=  0)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  >=  0)  {	  if(ch    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
53	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
54	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
55	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >>  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
56	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
57	[BUG]  [BUGGY]  if(ch  ==  '#'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '#'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '#'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	55	None	replace
58	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	55	None	replace
59	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch    <    =    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
60	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch    <    =    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
61	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7FF)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	40	None	replace
62	[BUG]  [BUGGY]  if(ch  ==  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7FF)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	40	None	replace
63	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7FF)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	40	None	replace
64	[BUG]  [BUGGY]  ch  =  _skipWords(ch,  _minorState);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  ch  =  _skipWords(ch,  _minorState);  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	ch  =  _skipWords(ch,  _minorState);	  ch    =    _skipWords(ch);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
65	[BUG]  [BUGGY]  ch  =  _skipWords(ch  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  ch  =  _skipWords(ch  +  1);  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	ch  =  _skipWords(ch  +  1);	  ch    =    _skipWords(ch);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  ch  =  _skipWords(ch,  _currToken);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  ch  =  _skipWords(ch,  _currToken);  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	ch  =  _skipWords(ch,  _currToken);	  ch    =    _skipWords(ch);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    INT_QUOTE)    {    if(ch  <  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
68	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  If(ch  <  INT_QUOTE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  If(ch  <  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    INT_QUOTE)    {    If(ch  <  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
69	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    INT_QUOTE)    {    if(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
70	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '#')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '#')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '.')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  '.')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
72	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '.')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '.')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
73	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
74	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
75	[BUG]  [BUGGY]  if(ch  ==  MINOR_VALUE_STRING_ZEROS  ||  ch  ==  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MINOR_VALUE_STRING_ZEROS  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  MINOR_VALUE_STRING_ZEROS  ||  ch  ==  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MINOR_VALUE_STRING_ZEROS  ||  ch  ==  MINOR_VALUE_LEADING_ZEROS)  {	  if(ch    ==    MINOR_VALUE_LEADING_ZEROS    ||    ch    ==    MINOR_VALUE_LEADING_ZEROS)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_STRING_ZEROS	36	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
77	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
79	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
80	[BUG]  [BUGGY]  if(ch  ==  0  ||  ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0  ||  ch  ==  INT_QUOTES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0  ||  ch  ==  INT_QUOTES)  {	  if(ch    ==    INT_STRING    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	52	None	replace
81	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {  If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    If(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
83	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
84	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
85	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  ';')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  ';')  {	  if(ch    ==    0)    {    If(ch    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
87	[BUG]  [BUGGY]  if(ch  ==  ';')  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  ';')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  ';')  {	  if(ch    ==    0)    {    If(ch    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
88	[BUG]  [BUGGY]  if(ch  ==  0x0020)  {  if(ch  ==  0x0020)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x0020)  {  if(ch  ==  0x0020)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x0020)    {    if(ch  ==  0x0020)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
89	[BUG]  [BUGGY]  if(ch  ==  0x0020)  {  if(ch  >=  0x0020)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x0020)  {  if(ch  >=  0x0020)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x0020)    {    if(ch  >=  0x0020)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
90	[BUG]  [BUGGY]  if(ch  ==  0x0020)  {  if(ch!=  0x0020)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x0020)  {  if(ch!=  0x0020)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x0020)    {    if(ch!=  0x0020)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
91	[BUG]  [BUGGY]  if(ch  ==  0x0020)  {  if(ch  >>  0x0020)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x0020)  {  if(ch  >>  0x0020)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x0020)    {    if(ch  >>  0x0020)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch    >=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
93	[BUG]  [BUGGY]  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch    >=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
94	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0)  {  if(ch  <  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    0)    {    if(ch  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
95	[BUG]  [BUGGY]  if(ch  <  0)  {  If(ch  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0)  {  If(ch  <  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    0)    {    If(ch  <  0)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
96	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0)  {  if(ch  >=  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    <    0)    {    if(ch  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
97	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	39	None	replace
98	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
99	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	39	None	replace
100	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	_finishSlashComment(MINOR_VALUE_LEADING_ZEROS);	  _finishString();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
101	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_WS);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_WS);  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	_finishSlashComment(MINOR_VALUE_LEADING_WS);	  _finishString();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
102	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_KEY);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_KEY);  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	_finishSlashComment(MINOR_VALUE_LEADING_KEY);	  _finishString();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
103	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	42	None	replace
104	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  <  =  0x0020  ||  ch  >  0x7F)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
105	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >=  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
106	[BUG]  [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7f)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x0020  ||  ch  >  0x7f)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x0020  ||  ch  >  0x7f)  {	  if(ch    ==    0)    {    if(ch    {    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
107	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  ==  0x800)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x800)  {  if(ch  ==  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x800)    {    if(ch  ==  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
108	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  >=  0x800)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x800)  {  if(ch  >=  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x800)    {    if(ch  >=  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
109	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch!=  0x800)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x800)  {  if(ch!=  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x800)    {    if(ch!=  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
110	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  >>  0x800)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x800)  {  if(ch  >>  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x800)    {    if(ch  >>  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
111	[BUG]  [BUGGY]  if(ch  ==  MIN_VALUE_STRING_ZEROS  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MIN_VALUE_STRING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  MIN_VALUE_STRING_ZEROS  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MIN_VALUE_STRING_ZEROS  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {	  if(ch    ==    MIN_VALUE_LEADING_ZEROS    ||    ch    ==    MIN_VALUE_LEADING_ZEROS)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE_STRING_ZEROS	35	None	replace
112	[BUG]  [BUGGY]  if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  >=  MIN_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MIN_VALUE_LEADING_ZEROS  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  >=  MIN_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  >=  MIN_VALUE_LEADING_ZEROS)  {	  if(ch    ==    MIN_VALUE_LEADING_ZEROS    ||    ch    ==    MIN_VALUE_LEADING_ZEROS)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE_LEADING_ZEROS	35	None	replace
113	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
114	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  ==  'n'  ||  ch!=  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  ==  'n'  ||  ch!=  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    if(ch  ==  'n'  ||  ch!=  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
115	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    if(ch!=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
116	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  >=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  >=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    if(ch  >=  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
117	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7FF)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	40	None	replace
118	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
119	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_RBRACKET)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  INT_RBRACKET)  {	  if(ch!=    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
121	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_RBRACKET)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_RBRACKET)  {	  if(ch!=    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_PLUS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  INT_PLUS)  {	  if(ch!=    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
123	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_PLUS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_PLUS)  {	  if(ch!=    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
124	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_MISSING)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_MISSING)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_MISSING)  {	  if(ch    ==    INT_STRING    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	52	None	replace
125	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_RANGE)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_RANGE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES  ||  ch  ==  INT_RANGE)  {	  if(ch    ==    INT_STRING    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	52	None	replace
126	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES)  {	  if(ch    ==    INT_STRING    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	52	None	replace
127	[BUG]  [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_SINGLE_QUOTES)  {  [CE]  cannot  find  symbol  INT_SINGLE_QUOTES  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_SINGLE_QUOTES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_SINGLE_QUOTES)  {	  if(ch    ==    INT_SINGLE_QUOTES    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_SINGLE_QUOTES	51	None	replace
128	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  >=  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  >=  INT_QUOTES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES  ||  ch  >=  INT_QUOTES)  {	  if(ch    ==    INT_SINGLE_QUOTES    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	51	None	replace
129	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString()  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString()  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString()	  	non-compiled	[CE]  ';'  expected	56	None	add
130	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x20  ||  ch  >  0x7F)  {  if(ch  <  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	7	None	replace
131	[BUG]  [BUGGY]  _finishString(ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  _finishString(ch);  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	_finishString(ch);	  _finishString();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
132	[BUG]  [BUGGY]  _finishSlash();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  _finishSlash();  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	_finishSlash();	  _finishString();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    <    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
134	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    <    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    <    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
136	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    <    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
138	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
140	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '#')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  '#')  {	  if(ch    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
142	[BUG]  [BUGGY]  if(ch  ==  '#')  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '#')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '#')  {	  if(ch    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  &&  ch!=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  INT_QUOTE  &&  ch!=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch!=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
144	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  &&  ch!=  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  &&  ch!=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTE  &&  ch!=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch!=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
145	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	42	None	replace
146	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	42	None	replace
147	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  {  0x800)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x800)  {  if(ch  {  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x800)    {    if(ch  {  0x800)  {	  	non-compiled	[CE]  ')'  expected	49	None	add
148	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  If(ch  ==  0x800)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x800)  {  If(ch  ==  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x800)    {    If(ch  ==  0x800)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch!=  0)  {	  if(ch    <    0)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
150	[BUG]  [BUGGY]  if(ch!=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  0)  {	  if(ch    <    0)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
151	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n')  {  if(ch!=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  'n')  {  if(ch!=  INT_QUOTE)  {	  if(ch!=    INT_QUOTE)    {    if(ch!=    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
152	[BUG]  [BUGGY]  if(ch  ==  MINOR_VALUE_LEADING_ZEROS  ||  ch  ==  MAXOR_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  MINOR_VALUE_LEADING_ZEROS  ||  ch  ==  MAXOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MINOR_VALUE_LEADING_ZEROS  ||  ch  ==  MAXOR_VALUE_LEADING_ZEROS)  {	  if(ch    ==    MINOR_VALUE_LEADING_ZEROS    ||    ch    ==    MINOR_VALUE_LEADING_ZEROS)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	36	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  ')')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  ')')  {	  if(ch    ==    0)    {    if(ch    {    0)    {    	compilable	  [FE]  AssertionFailedError  	43	1	replace
154	[BUG]  [BUGGY]  if(ch  ==  ')')  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  ')')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  ')')  {	  if(ch    ==    0)    {    if(ch    {    0)    {    	compilable	  [FE]  AssertionFailedError  	43	1	replace
155	[BUG]  [BUGGY]  if(ch  =='<  ')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  unclosed  character  literal  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  =='<  ')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  =='<  ')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	non-compiled	[CE]  unclosed  character  literal	57	None	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '#')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  '#')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
157	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '#')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '#')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '>')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  '>')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
159	[BUG]  [BUGGY]  if(ch  ==  '>')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '>')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '>')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
160	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
161	[BUG]  [BUGGY]  if(ch  ==  MIN_VALUE_STRING  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MIN_VALUE_STRING  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  MIN_VALUE_STRING  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MIN_VALUE_STRING  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {	  if(ch    ==    MIN_VALUE_LEADING_ZEROS    ||    ch    ==    MIN_VALUE_LEADING_ZEROS)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE_STRING	35	None	replace
162	[BUG]  [BUGGY]  if(ch  ==  MIN_VALUE_STRING_KEY  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MIN_VALUE_STRING_KEY  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  MIN_VALUE_STRING_KEY  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MIN_VALUE_STRING_KEY  ||  ch  ==  MIN_VALUE_LEADING_ZEROS)  {	  if(ch    ==    MIN_VALUE_LEADING_ZEROS    ||    ch    ==    MIN_VALUE_LEADING_ZEROS)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE_STRING_KEY	35	None	replace
163	[BUG]  [BUGGY]  if(ch  ==  0x0020)  {  if(ch  {  0x0020)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x0020)  {  if(ch  {  0x0020)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x0020)    {    if(ch  {  0x0020)  {	  	non-compiled	[CE]  ')'  expected	25	None	add
164	[BUG]  [BUGGY]  if(ch  ==  0x0020)  {  If(ch  ==  0x0020)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x0020)  {  If(ch  ==  0x0020)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    0x0020)    {    If(ch  ==  0x0020)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
165	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  'e'  ||  ch  ==  'E')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	55	None	replace
166	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	55	None	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x80)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x80)  {	  if(ch    <    =    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
168	[BUG]  [BUGGY]  if(ch  ==  0x80)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x80)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x80)  {	  if(ch    <    =    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x7F)  {	  if(ch    <    =    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
170	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x7F)  {	  if(ch    <    =    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x8000)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x8000)  {	  if(ch    ==    0x800)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
172	[BUG]  [BUGGY]  if(ch  ==  0x8000)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x8000)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x8000)  {	  if(ch    ==    0x800)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
173	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
174	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  >=  INT_QUOTE)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES  ||  ch  >=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTES    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	63	None	replace
175	[BUG]  [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTE)  {  [CE]  cannot  find  symbol  INT_SINGLE_QUOTES  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_QUOTES    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_SINGLE_QUOTES	63	None	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x20)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x20)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
177	[BUG]  [BUGGY]  if(ch  ==  0x20)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x20)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x20)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x20  ||  ch  >  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x20  ||  ch  >  0x7F)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
179	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  >  0x7F)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x20  ||  ch  >  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x20  ||  ch  >  0x7F)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
180	[BUG]  [BUGGY]  if(ch!=  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  INT_QUOTES)  {	  if(ch!=    INT_QUOTE)    {    if(ch    >=    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	32	None	replace
181	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken  >>  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken  >>  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_currToken  >>  JsonToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
183	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  ':')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  ':')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
185	[BUG]  [BUGGY]  if(ch  ==  ':')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  ':')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  ':')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	57	1	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
187	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	41	1	replace
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  >  0)  {	  if(ch    ==    0)    {    if(ch    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
189	[BUG]  [BUGGY]  if(ch  >  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  >  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  >  0)  {	  if(ch    ==    0)    {    if(ch    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
190	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch  {  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  if(ch  {  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch!=    INT_QUOTE)    {    if(ch  {  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch!=  INT_QUOTE  &&  ch  >=  INT_QUOTE)  {	  if(ch!=    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
192	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  >=  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  INT_QUOTE  &&  ch  >=  INT_QUOTE)  {	  if(ch!=    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
193	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTES)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch!=    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	28	None	replace
194	[BUG]  [BUGGY]  if(ch  ==  '@'  ||  ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '@'  ||  ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '@'  ||  ch  ==  '@')  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	55	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch!=  INT_QUOTE  &&  ch  ==  INT_QUOTE)  {	  if(ch!=    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
196	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  ==  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  INT_QUOTE  &&  ch  ==  INT_QUOTE)  {	  if(ch!=    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
197	[BUG]  [BUGGY]  if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  >  MIN_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MIN_VALUE_LEADING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  >  MIN_VALUE_LEADING_ZEROS)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  MIN_VALUE_LEADING_ZEROS  ||  ch  >  MIN_VALUE_LEADING_ZEROS)  {	  if(ch    ==    MIN_VALUE_LEADING_ZEROS    ||    ch    ==    MIN_VALUE_LEADING_ZEROS)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE_LEADING_ZEROS	35	None	replace
198	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x20  ||  ch  >  0x7f)  {  if(ch  <  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7f)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	9	None	replace
199	[BUG]  [BUGGY]  if(ch  <  0x80)  {  if(ch  <  0x0020  ||  ch  >  0x7f)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x80)  {  if(ch  <  0x0020  ||  ch  >  0x7f)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x80)  {  if(ch  <  0x0020  ||  ch  >  0x7f)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7f)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	9	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7F  ||  ch  ==  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  0x7F  ||  ch  ==  0)  {	  if(ch    ==    MINOR_VALUE_LEADING_ZEROS    ||    ch    ==    MINOR_VALUE_LEADING_ZEROS)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
201	[BUG]  [BUGGY]  if(ch  ==  0x7F  ||  ch  ==  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  0x7F  ||  ch  ==  0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  0x7F  ||  ch  ==  0)  {	  if(ch    ==    MINOR_VALUE_LEADING_ZEROS    ||    ch    ==    MINOR_VALUE_LEADING_ZEROS)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch!=  INT_QUOTE  &&  ch  >  INT_QUOTE)  {	  if(ch!=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
203	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  >  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  INT_QUOTE  &&  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  INT_QUOTE  &&  ch  >  INT_QUOTE)  {	  if(ch!=    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
204	[BUG]  [BUGGY]  if(ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES  ||  ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES)  {  [CE]  cannot  find  symbol  INT_MASK_ALLOW_UNQUOTED_NAMES  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES  ||  ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES  ||  ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES)  {	  if(ch    ==    INT_SINGLE_QUOTES    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_MASK_ALLOW_UNQUOTED_NAMES	51	None	replace
205	[BUG]  [BUGGY]  if(ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES  ||  ch  ==  INT_MASK_ALLOW_MISSING)  {  [CE]  cannot  find  symbol  INT_MASK_ALLOW_UNQUOTED_NAMES  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES  ||  ch  ==  INT_MASK_ALLOW_MISSING)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_MASK_ALLOW_UNQUOTED_NAMES  ||  ch  ==  INT_MASK_ALLOW_MISSING)  {	  if(ch    ==    INT_SINGLE_QUOTES    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_MASK_ALLOW_UNQUOTED_NAMES	51	None	replace
206	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x20  ||  ch  >  0x7F)  {  if(ch  <  =  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    =    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
207	[BUG]  [BUGGY]  if(ch  <  0x80)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x80)  {  if(ch  <  =  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x80)  {  if(ch  <  =  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    =    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
208	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7FF)  {  if(ch  <  0x80)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7FF)  {  if(ch  <  0x80)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x0020  ||  ch  >  0x7FF)  {  if(ch  <  0x80)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	7	None	replace
209	[BUG]  [BUGGY]  if(ch  <  0x80)  {  if(ch  <  0x0020  ||  ch  >  0x7F)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x80)  {  if(ch  <  0x0020  ||  ch  >  0x7F)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x80)  {  if(ch  <  0x0020  ||  ch  >  0x7F)  {  return  _finishString();  }	  if(ch    <    0x0020    ||    ch    >    0x7F)    {    if(ch    <    0x80)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	7	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    <    =    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
211	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    <    =    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
212	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  =  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  =  0x7F)  {	  if(ch    ==    0)    {    if(ch    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
213	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  _finishString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  _finishString();  }	  _finishString();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
214	[BUG]  [BUGGY]  if(ch  ==  '#')  {  _finishString();  }  else  {  _finishString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '#')  {  _finishString();  }  else  {  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '#')  {  _finishString();  }  else  {  _finishString();  }	  _finishString();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
215	[BUG]  [BUGGY]  if(ch  ==  '#')  {  _finishString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  '#')  {  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  '#')  {  _finishString();  }	  _finishString();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
216	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	42	None	replace
217	[BUG]  [BUGGY]  if(ch  <  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x7F)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	42	None	replace
218	[BUG]  [BUGGY]  if(ch  <  0)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	42	None	replace
219	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x20  ||  ch  >  0x7FF)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7FF)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	40	None	replace
220	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch    {    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  0x20  ||  ch  >  0x7F)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
222	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x20  ||  ch  >  0x7F)  {	  if(ch    ==    0x0020)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
223	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTES)  {	  if(ch    <    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	22	None	replace
224	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_SINGLE_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_SINGLE_QUOTES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES  ||  ch  ==  INT_MASK_ALLOW_SINGLE_QUOTES)  {	  if(ch    ==    INT_STRING    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	52	None	replace
225	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  If(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_QUOTE)  {  If(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_QUOTE)  {  If(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    If(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  <  INT_0  ||  ch  >  INT_9)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
227	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
228	[BUG]  [BUGGY]  if(ch  ==  INT_BRIDGE  ||  ch  ==  INT_BRIDGE)  {  [CE]  cannot  find  symbol  INT_BRIDGE  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_BRIDGE  ||  ch  ==  INT_BRIDGE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_BRIDGE  ||  ch  ==  INT_BRIDGE)  {	  if(ch    ==    INT_QUOTES    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_BRIDGE	37	None	replace
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch  ==  INT_0)  {	  if(ch    ==    0)    {    if(ch!=    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
230	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_0)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_0)  {	  if(ch    ==    0)    {    if(ch!=    0)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
231	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  {  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  if(ch  {  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >=    INT_QUOTE)    {    if(ch  {  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
232	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  ==  INT_QUOTES)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  ==  INT_QUOTES)  {	  if(ch!=    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	34	None	replace
233	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch  <  0x20  ||  ch  >  0x7F)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(ch    <    =    0x0020    ||    ch    >    0x7F)    {    if(_currToken!=    JsonToken.VALUE_STRING)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	39	None	replace
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	if(ch!=  0x800)  {	  if(ch    ==    0x800)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
235	[BUG]  [BUGGY]  if(ch!=  0x800)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();      [BUGGY]  if(ch!=  0x800)  {  [BUGGY]      return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	if(ch!=  0x800)  {	  if(ch    ==    0x800)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
