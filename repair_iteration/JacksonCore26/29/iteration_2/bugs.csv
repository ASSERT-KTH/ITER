bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	7	None	add
2	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	7	None	add
3	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
4	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);	  	non-compiled	[CE]  ';'  expected	7	None	add
5	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	4	None	add
6	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	4	None	add
7	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	4	None	add
8	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	4	None	add
9	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
10	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	10	1	replace
11	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	10	1	replace
12	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneTree();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  _binaryValue  =  _binaryValue.cloneTree();  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.cloneTree();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
13	[BUG]  [BUGGY]  _binaryValue  =  null;  [CE]  cannot  find  symbol  ch  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  _binaryValue  =  null;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  null;	      	non-compiled	[CE]  cannot  find  symbol  ch	6	None	replace
14	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.next();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  _binaryValue  =  _binaryValue.next();  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.next();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
15	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  [CE]  cannot  find  symbol  ch  [FE]                    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  _binaryValue  =  _binaryValue.clone();  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.clone();	      	non-compiled	[CE]  cannot  find  symbol  ch	6	None	replace
16	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  possible  loss  of  precision  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
17	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	8	1	replace
18	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	8	1	replace
19	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xf;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	8	1	replace
20	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xf;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	8	1	replace
21	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xFF;  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xFF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  1xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  ';'  expected	8	None	replace
22	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  possible  loss  of  precision  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
23	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	5	1	replace
24	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	5	1	replace
25	[BUG]  [BUGGY]  int  ch  =  buf[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  buf  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  buf[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  buf[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol  buf	5	None	replace
26	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	9	None	add
27	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	9	None	add
28	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	9	None	add
29	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
30	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	1	None	add
31	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	1	None	add
32	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	1	None	add
33	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  [CE]  <identifier>  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
34	[BUG]  [BUGGY]  String  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  String  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	String  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	3	None	replace
35	[BUG]  [BUGGY]  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	byte  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
36	[BUG]  [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
37	[BUG]  [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	3	None	replace
38	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  cannot  find  symbol  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
39	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	1	None	add
40	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  [CE]  cannot  find  symbol  ch  [FE]              AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  _binaryValue  =  _binaryValue;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue;	      	non-compiled	[CE]  cannot  find  symbol  ch	6	None	replace
41	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  _binaryValue  =  _binaryValue.getValue();  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.getValue();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
42	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	8	1	replace
43	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	8	1	replace
44	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
45	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1xf;  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1xf;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  1xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  ';'  expected	5	None	replace
46	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	9	None	add
47	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    int  ch  =  _binaryValue[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	7	None	add
48	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	10	1	replace
49	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	10	1	replace
50	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1xff;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  1xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
51	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.toString();  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  _binaryValue  =  _binaryValue.toString();  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.toString();	      	non-compiled	[CE]  incompatible  types	6	None	replace
52	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.toByteArray();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  _binaryValue  =  _binaryValue.toByteArray();  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.toByteArray();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
53	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue);  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue);  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  ';'  expected	2	None	replace
54	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xff;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	8	1	replace
55	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xff;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	8	1	replace
56	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  ';'  expected	5	None	replace
57	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	5	1	replace
58	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	5	1	replace
59	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;    [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue);  [BUGGY]      switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  ';'  expected	10	None	replace
