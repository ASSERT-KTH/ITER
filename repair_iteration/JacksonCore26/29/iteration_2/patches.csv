bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch);  [CE]  cannot  find  symbol  ch  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue(ch);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue(ch);	  _binaryValue    =    null;    	non-compiled	[CE]  cannot  find  symbol  ch	13	None	replace
2	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  JsonToken.VALUE_STRING;	  _binaryValue    =    null;    	non-compiled	[CE]  incompatible  types	13	None	replace
3	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  10.0;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  10.0;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  10.0;	  int    ch    =    _binaryValue[_inputPtr++]    &    1xFF;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	21	None	replace
4	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xF;  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  1xF;	  int    ch    =    _binaryValue[_inputPtr++]    &    1xFF;    	non-compiled	[CE]  ';'  expected	21	None	replace
5	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF,  _inputBuffer[_inputPtr++]);  [CE]  ']'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF,  _inputBuffer[_inputPtr++]);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xF,  _inputBuffer[_inputPtr++]);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF,    _binaryValue);    	non-compiled	[CE]  ']'  expected	53	None	replace
6	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _numTypesValid);  [CE]  ';'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _numTypesValid);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _numTypesValid);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF,    _binaryValue);    	non-compiled	[CE]  ';'  expected	53	None	replace
7	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue);  [CE]  ';'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF,    _binaryValue);    	non-compiled	[CE]  ';'  expected	53	None	replace
8	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _tokenInputTotal);  [CE]  ';'  expected  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _tokenInputTotal);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _tokenInputTotal);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF,    _binaryValue);    	non-compiled	[CE]  ';'  expected	53	None	replace
9	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xF;    int  ch  =  _binaryValue[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	17	None	add
10	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xF;    Integer  ch  =  _binaryValue[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	17	None	add
11	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xF;    ch  =  _binaryValue[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	17	None	add
12	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xF;    Int  ch  =  _binaryValue[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
13	[BUG]  [BUGGY]  String  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  String  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	String  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  incompatible  types	9	None	replace
14	[BUG]  [BUGGY]  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	byte  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
15	[BUG]  [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
16	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  cannot  find  symbol  ch  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  cannot  find  symbol  ch	32	None	replace
17	[BUG]  [BUGGY]  null  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  not  a  statement  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  null  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	null  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  not  a  statement	32	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
19	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
20	[BUG]  [BUGGY]  String  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  incompatible  types  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  String  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	String  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  incompatible  types	16	None	replace
21	[BUG]  [BUGGY]  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  possible  loss  of  precision  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	byte  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
22	[BUG]  [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  cannot  find  symbol  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
23	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Integer    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	2	1	replace
24	[BUG]  [BUGGY]  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Integer    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  NullPointerException  	2	1	replace
25	[BUG]  [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  ch  [FE]            NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Integer    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol  ch	2	None	replace
26	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	57	None	add
27	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	57	None	add
28	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  char[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  char[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    char[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	57	None	add
29	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  byte[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  byte[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    byte[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	57	None	add
30	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	57	None	add
31	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    int  ch  =  _binaryValue[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	19	None	add
32	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    Integer  ch  =  _binaryValue[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	19	None	add
33	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    ch  =  _binaryValue[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	19	None	add
34	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    Int  ch  =  _binaryValue[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
35	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  cannot  find  symbol  ch  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  ch	26	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	compilable	  [FE]  AssertionFailedError  	26	1	replace
37	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	compilable	  [FE]  AssertionFailedError  	26	1	replace
38	[BUG]  [BUGGY]  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    Int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
39	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [CE]  possible  loss  of  precision  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff    +    1;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
40	[BUG]  [BUGGY]  int  ch  =  buf[_inputPtr++]  &  0xff  +  1;  [CE]  cannot  find  symbol  buf  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  buf[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  buf[_inputPtr++]  &  0xff  +  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff    +    1;    	non-compiled	[CE]  cannot  find  symbol  buf	49	None	replace
41	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	39	None	replace
42	[BUG]  [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  incompatible  types  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Character  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  incompatible  types	39	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0x7f;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0x7f;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
44	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0x7f;  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0x7f;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0x7f;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
45	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    1;    int  ch  =  _inputBuffer[_inputPtr++]  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	10	None	add
46	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    1;    Integer  ch  =  _inputBuffer[_inputPtr++]  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	10	None	add
47	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  ch  =  _inputBuffer[_inputPtr++]  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  ch  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    1;    ch  =  _inputBuffer[_inputPtr++]  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	10	None	add
48	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  char  ch  =  _inputBuffer[_inputPtr++]  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  char  ch  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    1;    char  ch  =  _inputBuffer[_inputPtr++]  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	10	None	add
49	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	23	None	add
50	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  char[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  char[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    char[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	23	None	add
51	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;	  	non-compiled	[CE]  ';'  expected	23	None	add
52	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  byte[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  byte[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    byte[]  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	23	None	add
53	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);  [CE]  ';'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);	  	non-compiled	[CE]  ';'  expected	23	None	add
54	[BUG]  [BUGGY]  Char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  Char    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
55	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  [CE]  <identifier>  expected  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int    ch    =    _inputBuffer[_inputPtr++].    &    0xF;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
56	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  [CE]  <identifier>  expected  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _inputBuffer[_inputPtr++].  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int    ch    =    _inputBuffer[_inputPtr++].    &    0xF;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
57	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  10.0;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  10.0;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  10.0;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1xff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	50	None	replace
58	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    Integer    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	31	1	replace
59	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    Integer    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	31	1	replace
60	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [CE]  possible  loss  of  precision  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
61	[BUG]  [BUGGY]  int  ch  =  buf[_inputPtr++]  &  0xf  &  1;  [CE]  cannot  find  symbol  buf  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  buf[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  buf[_inputPtr++]  &  0xf  &  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    	non-compiled	[CE]  cannot  find  symbol  buf	58	None	replace
62	[BUG]  [BUGGY]  double  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  double  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	double  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  byte    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	35	None	replace
63	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  possible  loss  of  precision  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    Int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  possible  loss  of  precision	38	None	replace
64	[BUG]  [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  cannot  find  symbol  ch  [FE]        NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _binaryValue[_inputPtr++]  &  0xF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    int    ch    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  cannot  find  symbol  ch	47	None	replace
65	[BUG]  [BUGGY]  int  ch  =  _buffer[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  _buffer  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _buffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _buffer[_inputPtr++]  &  0xf;	  int    ch    =    buf[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol  _buffer	25	None	replace
66	[BUG]  [BUGGY]  int  buf  =  _binaryValue[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  ch  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  buf  =  _binaryValue[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  buf  =  _binaryValue[_inputPtr++]  &  0xf;	  int    ch    =    buf[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol  ch	25	None	replace
67	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    	compilable	  [FE]  NullPointerException  	55	1	replace
68	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    	compilable	  [FE]  NullPointerException  	55	1	replace
69	[BUG]  [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [CE]  cannot  find  symbol  ch  [FE]      NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _binaryValue[_inputPtr++]  &  0xff;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  ch	55	None	replace
70	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff    +    1;    int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	48	None	add
71	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff    +    1;    Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	48	None	add
72	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff    +    1;    ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	48	None	add
73	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff    +    1;    char  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	48	None	add
74	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]            NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	3	None	replace
75	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    Integer    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	6	1	replace
76	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    Integer    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	6	1	replace
77	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  ch  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    Integer    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol  ch	6	None	replace
78	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    int    ch    =    _binaryValue[_inputPtr++]    &    0xFF);    	non-compiled	[CE]  ';'  expected	4	None	replace
79	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xf  +  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    	compilable	  [FE]  NullPointerException  	20	1	replace
80	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  +  1;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xf  +  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    	compilable	  [FE]  NullPointerException  	20	1	replace
81	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xf;  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  1xf;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    	non-compiled	[CE]  ';'  expected	20	None	replace
82	[BUG]  [BUGGY]  null  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  null  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	null  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  not  a  statement	28	None	replace
83	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.copyCurrentStructure(ch);  [CE]  cannot  find  symbol  ch  [FE]                  AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue.copyCurrentStructure(ch);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.copyCurrentStructure(ch);	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  ch	12	None	replace
84	[BUG]  [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue;	  Character    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	37	None	replace
85	[BUG]  [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Character  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  Character    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	37	None	replace
86	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  1xf;  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  1xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  1xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1xf;    	non-compiled	[CE]  ';'  expected	45	None	replace
87	[BUG]  [BUGGY]  char  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [CE]  possible  loss  of  precision  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
88	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
89	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [FE]  ArrayIndexOutOfBoundsException  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
90	[BUG]  [BUGGY]  null  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  not  a  statement  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  null  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	null  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  not  a  statement	7	None	replace
91	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.toByteArray(ch);  [CE]  cannot  find  symbol  ch  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue.toByteArray(ch);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.toByteArray(ch);	  _binaryValue    =    _binaryValue.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  ch	52	None	replace
92	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [CE]  possible  loss  of  precision  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
93	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf,  _inputBuffer[_inputPtr++];  [CE]  ']'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf,  _inputBuffer[_inputPtr++];  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xf,  _inputBuffer[_inputPtr++];	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    	non-compiled	[CE]  ']'  expected	24	None	replace
94	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _tokenInputTotal;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _tokenInputTotal;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	24	1	replace
95	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _tokenInputTotal;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _tokenInputTotal;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _tokenInputTotal;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	24	1	replace
96	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff,  _inputBuffer[_inputPtr++]);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff,  _inputBuffer[_inputPtr++]);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xff,  _inputBuffer[_inputPtr++]);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff,    _binaryValue);    	non-compiled	[CE]  ']'  expected	59	None	replace
97	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _numTypesValid);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _numTypesValid);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _numTypesValid);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff,    _binaryValue);    	non-compiled	[CE]  ';'  expected	59	None	replace
98	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff,    _binaryValue);    	non-compiled	[CE]  ';'  expected	59	None	replace
99	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _tokenInputTotal);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _tokenInputTotal);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _tokenInputTotal);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff,    _binaryValue);    	non-compiled	[CE]  ';'  expected	59	None	replace
100	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	46	None	replace
101	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf,  _inputBuffer[_inputPtr++]);  [CE]  ']'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf,  _inputBuffer[_inputPtr++]);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xf,  _inputBuffer[_inputPtr++]);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue);    	non-compiled	[CE]  ']'  expected	56	None	replace
102	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _numTypesValid);  [CE]  ';'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _numTypesValid);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _numTypesValid);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue);    	non-compiled	[CE]  ';'  expected	56	None	replace
103	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);  [CE]  ';'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue);    	non-compiled	[CE]  ';'  expected	56	None	replace
104	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _tokenInputTotal);  [CE]  ';'  expected  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _tokenInputTotal);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _tokenInputTotal);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue);    	non-compiled	[CE]  ';'  expected	56	None	replace
105	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getValue(ch);  [CE]  cannot  find  symbol  ch  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue.getValue(ch);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.getValue(ch);	  _binaryValue    =    _binaryValue.getValue();    	non-compiled	[CE]  cannot  find  symbol  ch	41	None	replace
106	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	42	None	add
107	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    Integer  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	42	None	add
108	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  2;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  2;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  2;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	42	None	add
109	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  int  ch  =  _binaryValue[_inputPtr++]  &  0xF  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  int  ch  =  _binaryValue[_inputPtr++]  &  0xF  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    int  ch  =  _binaryValue[_inputPtr++]  &  0xF  +  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	42	None	add
110	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    int  ch  =  _binaryValue[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	54	None	add
111	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  Integer  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    Integer  ch  =  _binaryValue[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	54	None	add
112	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  int  ch  =  _binaryValue[_inputPtr++]  &  0xff);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  int  ch  =  _binaryValue[_inputPtr++]  &  0xff);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    int  ch  =  _binaryValue[_inputPtr++]  &  0xff);	  	non-compiled	[CE]  ';'  expected	54	None	add
113	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    ch  =  _binaryValue[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	54	None	add
114	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  String  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	8	None	replace
115	[BUG]  [BUGGY]  String  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  incompatible  types  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  String  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	String  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  incompatible  types	22	None	replace
116	[BUG]  [BUGGY]  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  possible  loss  of  precision  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	byte  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
117	[BUG]  [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  char    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
118	[BUG]  [BUGGY]  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
119	[BUG]  [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  ch  [FE]              NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _binaryValue[_inputPtr++]  &  0xFF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol  ch	3	None	replace
120	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue  +  1;	  _binaryValue    =    _binaryValue;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	40	None	replace
121	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue  +  _inputPtr;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue  +  _inputPtr;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue  +  _inputPtr;	  _binaryValue    =    _binaryValue;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	40	None	replace
122	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  2;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  2;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    	compilable	  [FE]  NullPointerException  	43	1	replace
123	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  2;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  2;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  2;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    	compilable	  [FE]  NullPointerException  	43	1	replace
124	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  possible  loss  of  precision  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
125	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	30	None	replace
126	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
127	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  }  [CE]  cannot  find  symbol  ch  [FE]              AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  }  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  }	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  cannot  find  symbol  ch	28	None	replace
128	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF,  _inputBuffer);  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF,  _inputBuffer);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xF,  _inputBuffer);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF,    _binaryValue);    	non-compiled	[CE]  ';'  expected	53	None	replace
129	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    Int  ch  =  _binaryValue[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
130	[BUG]  [BUGGY]  char  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  possible  loss  of  precision  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _binaryValue[_inputPtr++]  &  0xF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
131	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  char  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf;  char  ch  =  _binaryValue[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    char  ch  =  _binaryValue[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	19	None	add
132	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    Int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
133	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  0xf;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    	compilable	  [FE]  NullPointerException  	20	1	replace
134	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  0xf;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  0xf;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    	compilable	  [FE]  NullPointerException  	20	1	replace
135	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
136	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xff  +  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    	compilable	  [FE]  NullPointerException  	55	1	replace
137	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff  +  1;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xff  +  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    	compilable	  [FE]  NullPointerException  	55	1	replace
138	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xff;  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  1xff;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    	non-compiled	[CE]  ';'  expected	55	None	replace
139	[BUG]  [BUGGY]  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    Int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
140	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  possible  loss  of  precision  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    Int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
141	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xFF  +  1;  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  1xFF  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  1xFF  +  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    1xFF;    	non-compiled	[CE]  ';'  expected	21	None	replace
142	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  2xFF;  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  2xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  2xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    1xFF;    	non-compiled	[CE]  ';'  expected	21	None	replace
143	[BUG]  [BUGGY]  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  cannot  find  symbol  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    Int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
144	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	11	1	replace
145	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	11	1	replace
146	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  2;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  2;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	11	1	replace
147	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  2;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  2;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	11	1	replace
148	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  possible  loss  of  precision  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
149	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	5	None	replace
150	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  Int  ch  =  _inputBuffer[_inputPtr++]  &  1;  [CE]  cannot  find  symbol  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  1;  Int  ch  =  _inputBuffer[_inputPtr++]  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    1;    Int  ch  =  _inputBuffer[_inputPtr++]  &  1;	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
151	[BUG]  [BUGGY]  int  ch  =  _tokenInputBuffer[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  _tokenInputBuffer  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _tokenInputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _tokenInputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    buf[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol  _tokenInputBuffer	25	None	replace
152	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.trim();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue.trim();  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.trim();	  _binaryValue    =    _binaryValue.toString();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
153	[BUG]  [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    int    ch    =    _binaryValue[_inputPtr++]    &    0xFF);    	non-compiled	[CE]  ';'  expected	4	None	replace
154	[BUG]  [BUGGY]  char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF);	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    int    ch    =    _binaryValue[_inputPtr++]    &    0xFF);    	non-compiled	[CE]  ';'  expected	4	None	replace
155	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  possible  loss  of  precision  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
156	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  }  [CE]  cannot  find  symbol  ch  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  }  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  }	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  cannot  find  symbol  ch	32	None	replace
157	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneBlock();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue.cloneBlock();  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.cloneBlock();	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
158	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  2;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  2;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    char  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  2;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	57	None	add
159	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  possible  loss  of  precision  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
160	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  }  [CE]  cannot  find  symbol  ch  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  }  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  }	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol  ch	7	None	replace
161	[BUG]  [BUGGY]  Char  ch  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  &  0xFF  :  _inputBuffer[_inputPtr++];  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Char  ch  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  &  0xFF  :  _inputBuffer[_inputPtr++];  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Char  ch  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  &  0xFF  :  _inputBuffer[_inputPtr++];	  Char    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
162	[BUG]  [BUGGY]  Char  ch  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  &  0xFF  :  _binaryValue;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Char  ch  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  &  0xFF  :  _binaryValue;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Char  ch  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  &  0xFF  :  _binaryValue;	  Char    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
163	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	26	None	replace
164	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
165	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue  +  1;  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue  +  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    	non-compiled	[CE]  ';'  expected	24	None	replace
166	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [CE]  cannot  find  symbol  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xff    +    1;    Int  ch  =  _inputBuffer[_inputPtr++]  &  0xff  +  1;	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
167	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue  +  1);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue  +  1);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue  +  1);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff,    _binaryValue);    	non-compiled	[CE]  ';'  expected	59	None	replace
168	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff,  _inputBuffer);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff,  _inputBuffer);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xff,  _inputBuffer);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff,    _binaryValue);    	non-compiled	[CE]  ';'  expected	59	None	replace
169	[BUG]  [BUGGY]  Character  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Character  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Character  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  Character    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	37	None	replace
170	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    char  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	23	None	add
171	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	23	None	add
172	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  2xff;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  2xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  2xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1xff;    	non-compiled	[CE]  ';'  expected	50	None	replace
173	[BUG]  [BUGGY]  byte  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  byte  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	byte  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  byte    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
174	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  2;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  2;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	58	1	replace
175	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  2;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  2;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	58	1	replace
176	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  }  [CE]  <identifier>  expected  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  }  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++].  &  0xF;  }	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int    ch    =    _inputBuffer[_inputPtr++].    &    0xF;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
177	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++].  &  0  [CE]  <identifier>  expected  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++].  &  0  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  int  ch  =  _inputBuffer[_inputPtr++].  &  0	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int    ch    =    _inputBuffer[_inputPtr++].    &    0xF;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
178	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue();  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue();	  _binaryValue    =    null;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
179	[BUG]  [BUGGY]  _binaryValue  =  _binaryValid;  [CE]  cannot  find  symbol  _binaryValid  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValid;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValid;	  _binaryValue    =    null;    	non-compiled	[CE]  cannot  find  symbol  _binaryValid	13	None	replace
180	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	39	None	replace
181	[BUG]  [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  incompatible  types  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Character  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  incompatible  types	39	None	replace
182	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	46	None	replace
183	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xff;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xff;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	46	None	replace
184	[BUG]  [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  incompatible  types  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Character  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  incompatible  types	8	None	replace
185	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	8	None	replace
186	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _currentState);  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _currentState);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _currentState);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue);    	non-compiled	[CE]  ';'  expected	56	None	replace
187	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _index);  [CE]  ';'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _index);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _index);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue);    	non-compiled	[CE]  ';'  expected	56	None	replace
188	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _inputBuffer[_inputPtr++]  +  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	39	None	replace
189	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _outputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _outputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  char  ch  =  _outputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	39	None	replace
190	[BUG]  [BUGGY]  int  buf  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  cannot  find  symbol  ch  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  buf  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  buf  =  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    buf[_inputPtr++]    &    0xf;    	non-compiled	[CE]  cannot  find  symbol  ch	25	None	replace
191	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _index);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _index);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _index);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff,    _binaryValue);    	non-compiled	[CE]  ';'  expected	59	None	replace
192	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _currentState);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _currentState);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff,  _binaryValue,  _currentState);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xff,    _binaryValue);    	non-compiled	[CE]  ';'  expected	59	None	replace
193	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =(_inputPtr  <  1)?  _inputBuffer[_inputPtr++]  &  0xf  :  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =(_inputPtr  <  1)?  _inputBuffer[_inputPtr++]  &  0xf  :  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	5	1	replace
194	[BUG]  [BUGGY]  int  ch  =(_inputPtr  <  1)?  _inputBuffer[_inputPtr++]  &  0xf  :  _inputBuffer[_inputPtr++]  &  0xf;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =(_inputPtr  <  1)?  _inputBuffer[_inputPtr++]  &  0xf  :  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =(_inputPtr  <  1)?  _inputBuffer[_inputPtr++]  &  0xf  :  _inputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	5	1	replace
195	[BUG]  [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue);	  Char    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  ';'  expected	36	None	replace
196	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue;  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
197	[BUG]  [BUGGY]  boolean  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  incompatible  types  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  boolean  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	boolean  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  incompatible  types	32	None	replace
198	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _outputBuffer[_inputPtr++]  &  0xf;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _outputBuffer[_inputPtr++]  &  0xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  char  ch  =  _outputBuffer[_inputPtr++]  &  0xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    char    ch    =    _inputBuffer[_inputPtr++]    &    0xf;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	8	None	replace
199	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  Int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    Int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
200	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++].&  0xF;  [CE]  <identifier>  expected  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++].&  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++].&  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int    ch    =    _inputBuffer[_inputPtr++].    &    0xF;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
201	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++].&  0xF;  int  ch  =  _inputBuffer[_inputPtr++].&  0xF;  [CE]  <identifier>  expected  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++].&  0xF;  int  ch  =  _inputBuffer[_inputPtr++].&  0xF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++].&  0xF;  int  ch  =  _inputBuffer[_inputPtr++].&  0xF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    int    ch    =    _inputBuffer[_inputPtr++].    &    0xF;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
202	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _index);  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _index);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _index);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF,    _binaryValue);    	non-compiled	[CE]  ';'  expected	53	None	replace
203	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _currentState);  [CE]  ';'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _currentState);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF,  _binaryValue,  _currentState);	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xF,    _binaryValue);    	non-compiled	[CE]  ';'  expected	53	None	replace
204	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	57	None	add
205	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
206	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  byte  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _inputBuffer[_inputPtr++]    &    0xf    &    1;    byte  ch  =  _inputBuffer[_inputPtr++]  &  0xf  &  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	57	None	add
207	[BUG]  [BUGGY]  _binaryValue  =  _startValue(ch);  [CE]  cannot  find  symbol  ch  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _startValue(ch);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _startValue(ch);	  _binaryValue    =    null;    	non-compiled	[CE]  cannot  find  symbol  ch	13	None	replace
208	[BUG]  [BUGGY]  _binaryValue  =  _nextToken();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _nextToken();  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _nextToken();	  _binaryValue    =    null;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
209	[BUG]  [BUGGY]  char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  possible  loss  of  precision  [FE]              NullPointerException      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    int    ch    =    _binaryValue[_inputPtr++]    &    0xFF);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
210	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  char  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xff;  char  ch  =  _binaryValue[_inputPtr++]  &  0xff;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xff;    char  ch  =  _binaryValue[_inputPtr++]  &  0xff;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	54	None	add
211	[BUG]  [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue);  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	Character  ch  =  _inputBuffer[_inputPtr++]  &  0xFF,  _binaryValue);	  Character    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  ';'  expected	37	None	replace
212	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  char  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  char  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int    ch    =    _binaryValue[_inputPtr++]    &    0xFF    +    1;    char  ch  =  _binaryValue[_inputPtr++]  &  0xFF  +  1;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	42	None	add
213	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    	compilable	  [FE]  NullPointerException  	20	1	replace
214	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  1;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  1;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  1;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    	compilable	  [FE]  NullPointerException  	20	1	replace
215	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  10.0;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      NullPointerException    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  10.0;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xf  &  10.0;	  int    ch    =    _binaryValue[_inputPtr++]    &    0xf;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	20	None	replace
216	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  2xf;  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  2xf;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  2xf;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1xf;    	non-compiled	[CE]  ';'  expected	45	None	replace
217	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneByte();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  _binaryValue  =  _binaryValue.cloneByte();  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	_binaryValue  =  _binaryValue.cloneByte();	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0x7F;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0x7F;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
219	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0x7F;  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0x7F;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0x7F;	  int    ch    =    _inputBuffer[_inputPtr++]    &    1;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
220	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _currentState;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _currentState;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	24	1	replace
221	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _currentState;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]        if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _currentState;  [BUGGY]        switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf,  _binaryValue,  _currentState;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xf,    _binaryValue;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	24	1	replace
