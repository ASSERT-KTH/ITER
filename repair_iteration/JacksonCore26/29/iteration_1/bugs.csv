bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	57	1	replace
2	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	57	1	replace
3	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
4	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	57	1	replace
5	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xf;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	57	1	replace
6	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  ch  [FE]          AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]    [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	  	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	non-compiled	[CE]  cannot  find  symbol  ch	57	None	replace
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	compilable	  [FE]  NullPointerException  	57	1	replace
8	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [FE]  NullPointerException  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	compilable	  [FE]  NullPointerException  	57	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	compilable	  [FE]  AssertionFailedError  	57	1	replace
10	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]    switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xff;	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  	compilable	  [FE]  AssertionFailedError  	57	1	replace
