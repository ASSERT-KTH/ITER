bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
2	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.END_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
5	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _inputPtr);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _inputPtr);	  return    _endOfInput(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
6	[BUG]  [BUGGY]  return  _endOfInput(JsonToken.VALUE_EMBEDDED_OBJECT,  ch);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(JsonToken.VALUE_EMBEDDED_OBJECT,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(JsonToken.VALUE_EMBEDDED_OBJECT,  ch);	  return    _endOfInput(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
7	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _origBufferLen);	  return    _endOfInput(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
8	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _origBufferPtr);  [CE]  cannot  find  symbol  _origBufferPtr  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _origBufferPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _origBufferPtr);	  return    _endOfInput(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  _origBufferPtr	69	None	replace
9	[BUG]  [BUGGY]  if(ch  ==  '   "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  if(ch  ==' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  '   "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  if(ch  ==' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    if(ch  ==' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  	non-compiled	[CE]  unclosed  character  literal	66	None	add
10	[BUG]  [BUGGY]  if(ch  ==  '   "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  if(ch  ==  ', "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  '   "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  if(ch  ==  ', "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    if(ch  ==  ', "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  	non-compiled	[CE]  unclosed  character  literal	66	None	add
11	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
12	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
13	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  missing  return  statement  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  missing  return  statement	78	None	replace
14	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
15	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.START_OBJECT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.START_OBJECT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  nu  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  nu  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  nu	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.START_OBJECT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.START_OBJECT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	50	None	replace
19	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  JsonToken.VALUE_NULL,  ch);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  JsonToken.VALUE_NULL,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  JsonToken.VALUE_NULL,  ch);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _origBufferLen);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	82	None	replace
20	[BUG]  [BUGGY]  return  _startValue(_origBuffer,  JsonToken.VALUE_NULL,  ch);  [CE]  cannot  find  symbol  _origBuffer  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_origBuffer,  JsonToken.VALUE_NULL,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_origBuffer,  JsonToken.VALUE_NULL,  ch);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _origBufferLen);    	non-compiled	[CE]  cannot  find  symbol  _origBuffer	82	None	replace
21	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL,  _origBufferLen);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _origBufferLen);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	82	None	replace
22	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _origBufferLen,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _origBufferLen,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  ch,  _origBufferLen,  _inputPtr);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _origBufferLen);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	82	None	replace
23	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    break;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	8	None	replace
26	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	9	None	replace
28	[BUG]  [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
29	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _inputBuffer[_inputPtr++];  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _inputBuffer[_inputPtr++];  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _inputBuffer[_inputPtr++];  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	19	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _inputBuffer[_inputPtr++]  &  0xFF;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _inputBuffer[_inputPtr++]  &  0xFF;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	19	None	replace
31	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _origBuffer[_inputPtr++];  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _origBuffer[_inputPtr++];  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _origBuffer[_inputPtr++];  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	19	None	replace
32	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	11	None	replace
33	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr]);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr]);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr]);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	11	None	replace
34	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr  +  1);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr  +  1);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr  +  1);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	11	None	replace
35	[BUG]  [BUGGY]  if(ch!=  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    '   "')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
36	[BUG]  [BUGGY]  ||(ch  ==  ' "'  &&  _inputPtr  >=  _inputEnd))  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ||(ch  ==  ' "'  &&  _inputPtr  >=  _inputEnd))  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	||(ch  ==  ' "'  &&  _inputPtr  >=  _inputEnd))  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    '   "')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
37	[BUG]  [BUGGY]  ||  ch  ==  ' "')  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ||  ch  ==  ' "')  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	||  ch  ==  ' "')  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    '   "')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
38	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
39	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
40	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
41	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
42	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL);	  return    _startValue(ch,    _inputBuffer,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	26	None	replace
43	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);	  return    _startValue(ch,    _inputBuffer,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	26	None	replace
44	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer);	  return    _startValue(ch,    _inputBuffer,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	26	None	replace
45	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_STRING,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_STRING,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_STRING,  _inputPtr);	  return    _endOfInput(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
46	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_STRING,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_STRING,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_STRING,  _origBufferLen);	  return    _endOfInput(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
47	[BUG]  [BUGGY]  return  _endOfInput(JsonToken.VALUE_STRING,  ch);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(JsonToken.VALUE_STRING,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(JsonToken.VALUE_STRING,  ch);	  return    _endOfInput(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
48	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_NUMBER_INT);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_NUMBER_INT);	  return    _endOfInput(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
49	[BUG]  [BUGGY]  if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  unclosed  character  literal  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  unclosed  character  literal	87	None	replace
50	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  '.')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
51	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	18	None	replace
52	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	18	None	replace
53	[BUG]  [BUGGY]  _startDocument(ch);  [CE]  missing  return  statement  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startDocument(ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startDocument(ch);	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  missing  return  statement	33	None	replace
54	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
55	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _startDocument(ch);  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
56	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  return  _startDocument(ch);  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0xFF)  {  return  _startDocument(ch);  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0xFF)  {  return  _startDocument(ch);  _startDocument(ch);  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
57	[BUG]  [BUGGY]  return  _eofAsNextToken(JsonToken.FIELD_NAME,  ch);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken(JsonToken.FIELD_NAME,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(JsonToken.FIELD_NAME,  ch);	  return    _eofAsNextToken(ch);    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	46	None	replace
58	[BUG]  [BUGGY]  return  _eofAsNextToken(JsonToken.START_OBJECT,  ch);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken(JsonToken.START_OBJECT,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(JsonToken.START_OBJECT,  ch);	  return    _eofAsNextToken(ch);    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	46	None	replace
59	[BUG]  [BUGGY]  return  _eofAsNextToken(JsonToken.VALUE_STRING,  ch);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken(JsonToken.VALUE_STRING,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(JsonToken.VALUE_STRING,  ch);	  return    _eofAsNextToken(ch);    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	46	None	replace
60	[BUG]  [BUGGY]  return  _eofAsNextToken(JsonToken.END_OBJECT,  ch);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken(JsonToken.END_OBJECT,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(JsonToken.END_OBJECT,  ch);	  return    _eofAsNextToken(ch);    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	46	None	replace
61	[BUG]  [BUGGY]  ch  =  _startDocument(ch);  [CE]  incompatible  types  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ch  =  _startDocument(ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	ch  =  _startDocument(ch);	  return    _startDocument(ch);    ch    =    _startDocument(ch);    	non-compiled	[CE]  incompatible  types	34	None	replace
62	[BUG]  [BUGGY]  ch  =  _startDocument(ch,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ch  =  _startDocument(ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	ch  =  _startDocument(ch,  _inputPtr);	  return    _startDocument(ch);    ch    =    _startDocument(ch);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	34	None	replace
63	[BUG]  [BUGGY]  _eofAsNextToken();  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _eofAsNextToken();  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_eofAsNextToken();	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  missing  return  statement	28	None	replace
64	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  _eofAsNextToken();  }	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	28	None	replace
65	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  _eofAsNextToken();  }	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	28	None	replace
66	[BUG]  [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.START_OBJECT)  {  return  _eofAsNextToken();  _eofAsNextToken();  }	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	28	None	replace
67	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
68	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
69	[BUG]  [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
70	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
71	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
72	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
73	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }	  if(ch!=    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	64	None	replace
74	[BUG]  [BUGGY]  return  _nextToken().ch;  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _nextToken().ch;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _nextToken().ch;	  return    _nextToken();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
75	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	2	None	replace
76	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _inputPtr);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	83	None	replace
77	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  JsonToken.VALUE_NULL,  ch,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  JsonToken.VALUE_NULL,  ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  JsonToken.VALUE_NULL,  ch,  _inputPtr);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	83	None	replace
78	[BUG]  [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  _inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	83	None	replace
79	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(JsonToken.VALUE_NULL,  ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(JsonToken.VALUE_NULL,  ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(JsonToken.VALUE_NULL,  ch);  }	  return    _startValue(JsonToken.VALUE_NULL,    ch);    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	24	None	replace
80	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  ch,  _origBufferLen);	  return    _startValue(JsonToken.VALUE_NULL,    ch);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	24	None	replace
81	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	17	None	replace
82	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	76	None	replace
83	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	76	None	replace
84	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	76	None	replace
85	[BUG]  [BUGGY]  return  _startDocument(JsonToken.VALUE_NULL,  ch);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(JsonToken.VALUE_NULL,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(JsonToken.VALUE_NULL,  ch);	  return    _startDocument(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	55	None	replace
86	[BUG]  [BUGGY]  return  _startDocument(ch,  JsonToken.VALUE_NULL,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(ch,  JsonToken.VALUE_NULL,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(ch,  JsonToken.VALUE_NULL,  _inputPtr);	  return    _startDocument(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	55	None	replace
87	[BUG]  [BUGGY]  return  _startDocument(jsonToken,  ch,  JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  jsonToken  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(jsonToken,  ch,  JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(jsonToken,  ch,  JsonToken.VALUE_NULL);	  return    _startDocument(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol  jsonToken	55	None	replace
88	[BUG]  [BUGGY]  return  _startDocument(jp,  ch,  JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  jp  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(jp,  ch,  JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(jp,  ch,  JsonToken.VALUE_NULL);	  return    _startDocument(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol  jp	55	None	replace
89	[BUG]  [BUGGY]  if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  unclosed  character  literal  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  unclosed  character  literal	84	None	replace
90	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
91	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _endOfInput);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _endOfInput);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _endOfInput);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	27	None	replace
92	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _endOfInput);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _endOfInput);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _endOfInput);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	27	None	replace
93	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL,  _endOfInput);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL,  _endOfInput);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _endOfInput);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	27	None	replace
94	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  _endOfInput);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  _endOfInput);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _endOfInput);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	27	None	replace
95	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
96	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
97	[BUG]  [BUGGY]  null  =  JsonNull.createJsonNull();  [CE]  unexpected  type  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  null  =  JsonNull.createJsonNull();  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	null  =  JsonNull.createJsonNull();	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  unexpected  type	72	None	replace
98	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	1	None	replace
99	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	1	None	replace
100	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	1	None	replace
101	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }	  return    JsonToken.FIELD_NAME;    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	49	None	replace
102	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME  +  1;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  JsonToken.FIELD_NAME  +  1;	  return    JsonToken.FIELD_NAME;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	49	None	replace
103	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME,  ch;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME,  ch;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  JsonToken.FIELD_NAME,  ch;	  return    JsonToken.FIELD_NAME;    	non-compiled	[CE]  ';'  expected	49	None	replace
104	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  JsonToken.VALUE_STRING;  }  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  JsonToken.VALUE_STRING;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  missing  return  statement	65	None	replace
105	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  JsonToken.FIELD_NAME;  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  missing  return  statement	65	None	replace
106	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  JsonToken.END_OBJECT;  }  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  JsonToken.END_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  missing  return  statement	65	None	replace
107	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
108	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
109	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
110	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
111	[BUG]  [BUGGY]  if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.FIELD_NAME)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
112	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.FIELD_NAME)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
113	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.FIELD_NAME)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
114	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.FIELD_NAME)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
115	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch    ==    JsonToken.VALUE_NULL)    {    if(ch!=    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
116	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch!=  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch!=  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch!=  JsonToken.VALUE_STRING)  {  return  null;  }	  return    _startDocument(ch);    if(ch    ==    JsonToken.VALUE_NULL)    {    if(ch!=    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
117	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch    ==    JsonToken.VALUE_NULL)    {    if(ch!=    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
118	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch!=  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch!=  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  if(ch!=  JsonToken.VALUE_STRING)  {  return  null;  }	  return    _startDocument(ch);    if(ch    ==    JsonToken.VALUE_NULL)    {    if(ch!=    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
119	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(JsonToken.VALUE_STRING);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(JsonToken.VALUE_STRING);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(JsonToken.VALUE_STRING);  }	  return    _endOfInput(JsonToken.VALUE_STRING);    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	23	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.VALUE_STRING;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	return  JsonToken.VALUE_STRING;	  return    _endOfInput(JsonToken.VALUE_STRING);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
121	[BUG]  [BUGGY]  return  JsonToken.VALUE_STRING;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.VALUE_STRING;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  JsonToken.VALUE_STRING;	  return    _endOfInput(JsonToken.VALUE_STRING);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
122	[BUG]  [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
123	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	29	None	replace
124	[BUG]  [BUGGY]  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	29	None	replace
125	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  return  null;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	29	None	replace
126	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.NOT_IMPLEMENTED;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
127	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.NOT_IMPLEMENTED;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
128	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(!_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(!_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(!_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.NOT_IMPLEMENTED;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
129	[BUG]  [BUGGY]  return  _startOfInput();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startOfInput();  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startOfInput();	  return    _endOfInput();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
130	[BUG]  [BUGGY]  return  _startOfDocument();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startOfDocument();  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startOfDocument();	  return    _endOfInput();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
131	[BUG]  [BUGGY]  return  _endOfInput(ch,  _inputBuffer[_inputPtr]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  _inputBuffer[_inputPtr]);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  _inputBuffer[_inputPtr]);	  return    _endOfInput(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
132	[BUG]  [BUGGY]  return  _endOfInput(ch,  _inputBuffer.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  _inputBuffer.length);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  _inputBuffer.length);	  return    _endOfInput(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
133	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr]);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr]);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr]);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	4	None	replace
134	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	4	None	replace
135	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	15	None	replace
136	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	15	None	replace
137	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startDocument(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	15	None	replace
138	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	15	None	replace
139	[BUG]  [BUGGY]  return  _startDocument(_inputBuffer,  ch,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(_inputBuffer,  ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(_inputBuffer,  ch,  _inputPtr);	  return    _startDocument(ch,    _inputPtr);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	12	None	replace
140	[BUG]  [BUGGY]  return  _startDocument(ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(ch,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(ch,  _inputBuffer,  _inputPtr);	  return    _startDocument(ch,    _inputPtr);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	12	None	replace
141	[BUG]  [BUGGY]  _startDocument(ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startDocument(ch,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startDocument(ch,  _inputBuffer,  _inputPtr);	  return    _startDocument(ch,    _inputPtr);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	12	None	replace
142	[BUG]  [BUGGY]  return  _startDocument(JsonToken.VALUE_STRING,  ch,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(JsonToken.VALUE_STRING,  ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(JsonToken.VALUE_STRING,  ch,  _inputPtr);	  return    _startDocument(ch,    _inputPtr);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	12	None	replace
143	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	14	None	replace
144	[BUG]  [BUGGY]  return  _startToken(_inputBuffer,  ch);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startToken(_inputBuffer,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startToken(_inputBuffer,  ch);	  return    _startToken(ch);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
145	[BUG]  [BUGGY]  return  _startToken(JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startToken(JsonToken.VALUE_STRING);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startToken(JsonToken.VALUE_STRING);	  return    _startToken(ch);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
146	[BUG]  [BUGGY]  return  _startToken(JsonToken.FIELD_NAME,  ch);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startToken(JsonToken.FIELD_NAME,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startToken(JsonToken.FIELD_NAME,  ch);	  return    _startToken(ch);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
147	[BUG]  [BUGGY]  return  _startToken(JsonToken.FIELD_NAME);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startToken(JsonToken.FIELD_NAME);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startToken(JsonToken.FIELD_NAME);	  return    _startToken(ch);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
148	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.START_OBJECT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
149	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.START_OBJECT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
150	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.START_OBJECT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
151	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.START_OBJECT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
152	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    ch;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
153	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    ch;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
154	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    ch;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
155	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    ch;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	6	None	replace
156	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  JsonToken.FIELD_NAME;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  JsonToken.FIELD_NAME;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    JsonToken.FIELD_NAME;	  	non-compiled	[CE]  not  a  statement	48	None	add
157	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
158	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  ||  ch  ==  JsonToken.FIELD_NAME;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  ||  ch  ==  JsonToken.FIELD_NAME;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    ||  ch  ==  JsonToken.FIELD_NAME;	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
159	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch!=  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch!=  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch!=  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
160	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
161	[BUG]  [BUGGY]  return  _endOfInput(_inputBuffer,  _inputPtr,  ch);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(_inputBuffer,  _inputPtr,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(_inputBuffer,  _inputPtr,  ch);	  return    _endOfInput(_inputBuffer,    ch);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
162	[BUG]  [BUGGY]  return  _endOfInput(ch,  _inputBuffer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  _inputBuffer);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  _inputBuffer);	  return    _endOfInput(_inputBuffer,    ch);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
163	[BUG]  [BUGGY]  return  _endOfInput(_inputBuffer,  ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(_inputBuffer,  ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(_inputBuffer,  ch,  _inputPtr);	  return    _endOfInput(_inputBuffer,    ch);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
164	[BUG]  [BUGGY]  return  _endOfInput(_inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(_inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(_inputBuffer,  _inputPtr);	  return    _endOfInput(_inputBuffer,    ch);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
165	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer,  _inputPtr);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	25	None	replace
166	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT,  _inputPtr);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.START_OBJECT,  _inputPtr);	  return    _endOfInput(ch,    JsonToken.START_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
167	[BUG]  [BUGGY]  return  _endOfInput(JsonToken.START_OBJECT,  ch);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(JsonToken.START_OBJECT,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(JsonToken.START_OBJECT,  ch);	  return    _endOfInput(ch,    JsonToken.START_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
168	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.START_OBJECT,  _origBufferLen);	  return    _endOfInput(ch,    JsonToken.START_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
169	[BUG]  [BUGGY]  return  _endOfInput(_inputBuffer,  ch,  JsonToken.START_OBJECT);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(_inputBuffer,  ch,  JsonToken.START_OBJECT);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(_inputBuffer,  ch,  JsonToken.START_OBJECT);	  return    _endOfInput(ch,    JsonToken.START_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
170	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	57	None	replace
171	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	57	None	replace
172	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	57	None	replace
173	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startOfInput(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startOfInput(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startOfInput(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _endOfInput(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	63	None	replace
174	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _endOfInput(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	63	None	replace
175	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
176	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
177	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch!=  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.START_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	56	None	replace
178	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.START_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	56	None	replace
179	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_STRING,  ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_STRING,  ch,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_STRING,  ch,  _inputBuffer,  _inputPtr);	  return    _startValue(JsonToken.VALUE_STRING,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	41	None	replace
180	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_STRING,  _inputBuffer,  ch,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_STRING,  _inputBuffer,  ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_STRING,  _inputBuffer,  ch,  _inputPtr);	  return    _startValue(JsonToken.VALUE_STRING,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	41	None	replace
181	[BUG]  [BUGGY]  _startValue(JsonToken.VALUE_STRING,  ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(JsonToken.VALUE_STRING,  ch,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(JsonToken.VALUE_STRING,  ch,  _inputBuffer,  _inputPtr);	  return    _startValue(JsonToken.VALUE_STRING,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	41	None	replace
182	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_STRING,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_STRING,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_STRING,  _inputPtr);	  return    _startValue(JsonToken.VALUE_STRING,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	41	None	replace
183	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
184	[BUG]  [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
185	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	5	None	replace
186	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
187	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
188	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >>  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >>  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >>  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
189	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
190	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
191	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
192	[BUG]  [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);	  _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	40	None	replace
193	[BUG]  [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);	  _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	40	None	replace
194	[BUG]  [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _endOfInput);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  _inputBuffer,  _inputPtr,  _endOfInput);	  _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	40	None	replace
195	[BUG]  [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);  [CE]  cannot  find  symbol  _inputLen  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);	  _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputLen	40	None	replace
196	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
197	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
198	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	7	None	replace
199	[BUG]  [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
200	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
201	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
202	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);	  return    _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	39	None	replace
203	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _endOfInput);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  _inputPtr,  _endOfInput);	  return    _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	39	None	replace
204	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);	  return    _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	39	None	replace
205	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
206	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
207	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
208	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
209	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.EMPTY;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
210	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.EMPTY;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.EMPTY;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_startDocument)  {  return  JsonToken.EMPTY;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.EMPTY;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
211	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.EMPTY;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
212	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [CE]  unclosed  character  literal  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.EMPTY;    }    	non-compiled	[CE]  unclosed  character  literal	71	None	replace
213	[BUG]  [BUGGY]  return  _endOfInput(ch,  _inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  _inputBuffer,  _inputPtr);	  return    _endOfInput(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
214	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _endOfInput(ch,  _inputPtr);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _endOfInput(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _endOfInput(ch,  _inputPtr);  }	  return    _endOfInput(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
215	[BUG]  [BUGGY]  _endOfInput  =  false;  [CE]  missing  return  statement  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _endOfInput  =  false;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_endOfInput  =  false;	  return    _eofAsNextToken();    _endOfInput    =    false;    	non-compiled	[CE]  missing  return  statement	32	None	replace
216	[BUG]  [BUGGY]  if(ch  ==  0)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  0)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  0)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }	  return    _eofAsNextToken();    _endOfInput    =    false;    	non-compiled	[CE]  unreachable  statement	32	None	replace
217	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }	  return    _eofAsNextToken();    _endOfInput    =    false;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
218	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0xFF)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0xFF)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }	  return    _eofAsNextToken();    _endOfInput    =    false;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
219	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  _inputBuffer,  ch,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  _inputBuffer,  ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  _inputBuffer,  ch,  _inputPtr);	  return    _startValue(JsonToken.VALUE_NULL,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	42	None	replace
220	[BUG]  [BUGGY]  _startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(JsonToken.VALUE_NULL,  ch,  _inputBuffer,  _inputPtr);	  return    _startValue(JsonToken.VALUE_NULL,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	42	None	replace
221	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	16	None	replace
222	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	16	None	replace
223	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  _inputPtr,  ch);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  _inputPtr,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  _inputPtr,  ch);	  return    _startValue(_inputBuffer,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	38	None	replace
224	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  ch,  _inputPtr,  _inputEnd);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  ch,  _inputPtr,  _inputEnd);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  ch,  _inputPtr,  _inputEnd);	  return    _startValue(_inputBuffer,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	38	None	replace
225	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  ch,  _inputPtr,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  ch,  _inputPtr,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  ch,  _inputPtr,  _origBufferLen);	  return    _startValue(_inputBuffer,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	38	None	replace
226	[BUG]  [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
227	[BUG]  [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch!=  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch!=  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.START_OBJECT)  {  if(ch!=  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  ']')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	if(ch  ==  ' "'  ||  ch  ==  ']')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
229	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  ']')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  ']')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  ']')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
230	[BUG]  [BUGGY]  ||  ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ||  ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	||  ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.END_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
232	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.END_OBJECT;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.END_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
233	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL    ||    ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
234	[BUG]  [BUGGY]  if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='{  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  unclosed  character  literal	86	None	replace
235	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
236	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }	  if(ch!=    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	77	None	replace
237	[BUG]  [BUGGY]  return  _eofAsInput(ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsInput(ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsInput(ch);	  return    _eofAsInput();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
238	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _origBufferLen);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	62	None	replace
239	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	62	None	replace
240	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.END_OBJECT,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.END_OBJECT,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.END_OBJECT,  _inputPtr);	  return    _endOfInput(ch,    JsonToken.END_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
241	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.END_OBJECT,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.END_OBJECT,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.END_OBJECT,  _origBufferLen);	  return    _endOfInput(ch,    JsonToken.END_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
242	[BUG]  [BUGGY]  return  _endOfInput(JsonToken.END_OBJECT,  ch);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(JsonToken.END_OBJECT,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(JsonToken.END_OBJECT,  ch);	  return    _endOfInput(ch,    JsonToken.END_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
243	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
244	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
245	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
246	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.FIELD_NAME))  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.FIELD_NAME))  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.FIELD_NAME))  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
247	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME  ||  ch  ==  JsonToken.END_OBJECT;  [CE]  incomparable  types:  int  and  JsonToken  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME  ||  ch  ==  JsonToken.END_OBJECT;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  JsonToken.FIELD_NAME  ||  ch  ==  JsonToken.END_OBJECT;	  return    JsonToken.FIELD_NAME;    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	49	None	replace
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.START_OBJECT;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	return  JsonToken.START_OBJECT;	  return    JsonToken.FIELD_NAME;    	compilable	  [FE]  AssertionFailedError  	49	1	replace
249	[BUG]  [BUGGY]  return  JsonToken.START_OBJECT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.START_OBJECT;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  JsonToken.START_OBJECT;	  return    JsonToken.FIELD_NAME;    	compilable	  [FE]  AssertionFailedError  	49	1	replace
250	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  _inputBuffer,  ch);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  _inputBuffer,  ch);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  _inputBuffer,  ch);	  return    _startValue(ch,    _inputBuffer,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	26	None	replace
251	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer);	  return    _startValue(ch,    _inputBuffer,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	26	None	replace
252	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr  +  1);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr  +  1);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr  +  1);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	76	None	replace
253	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputEnd);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	76	None	replace
254	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
255	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMPTY)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMPTY)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMPTY)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	14	None	replace
256	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    ch;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	6	None	replace
257	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _origBufferLen);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _origBufferLen);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	82	None	replace
258	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _origBuffer,  _inputPtr);  [CE]  cannot  find  symbol  _origBuffer  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _origBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _origBuffer,  _inputPtr);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _origBufferLen);    	non-compiled	[CE]  cannot  find  symbol  _origBuffer	82	None	replace
259	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL    ||    ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
260	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL    ||    ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
261	[BUG]  [BUGGY]  return  _endOfInput(ch,  _inputBufferLen);  [CE]  cannot  find  symbol  _inputBufferLen  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  _inputBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  _inputBufferLen);	  return    _endOfInput(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferLen	70	None	replace
262	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	17	None	replace
263	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	17	None	replace
264	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _endOfInput(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	63	None	replace
265	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _endOfInput(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _endOfInput(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _endOfInput(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _endOfInput(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	63	None	replace
266	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.FIELD_NAME)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.FIELD_NAME)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.FIELD_NAME)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	18	None	replace
267	[BUG]  [BUGGY]  if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
268	[BUG]  [BUGGY]  if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [CE]  unclosed  character  literal  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  unclosed  character  literal	72	None	replace
269	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
270	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  throw  new  JsonTokenException( " ");  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  throw  new  JsonTokenException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  throw  new  JsonTokenException( " ");  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
271	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
272	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  System.arraycopy(_inputBuffer,  0,  _inputPtr,  _inputPtr,  _inputPtr  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  System.arraycopy(_inputBuffer,  0,  _inputPtr,  _inputPtr,  _inputPtr  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _startDocument(ch);  _startDocument(ch);  }  else  {  System.arraycopy(_inputBuffer,  0,  _inputPtr,  _inputPtr,  _inputPtr	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
273	[BUG]  [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.START_OBJECT)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  JsonToken.END_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
274	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_ARRAY);  [CE]  cannot  find  symbol  VALUE_EMBEDDED_ARRAY  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_ARRAY);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_ARRAY);	  return    _endOfInput(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  VALUE_EMBEDDED_ARRAY	69	None	replace
275	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_COMMENT);  [CE]  cannot  find  symbol  VALUE_EMBEDDED_COMMENT  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_COMMENT);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_COMMENT);	  return    _endOfInput(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  VALUE_EMBEDDED_COMMENT	69	None	replace
276	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
277	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr  +  1);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr  +  1);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr  +  1);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	62	None	replace
278	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_ARRAY)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_ARRAY)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_ARRAY)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	57	None	replace
279	[BUG]  [BUGGY]  parserFeatures  ||  ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  parserFeatures  ||  ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	parserFeatures  ||  ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  not  a  statement	57	None	replace
280	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _endOfInput(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _endOfInput(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _endOfInput(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	57	None	replace
281	[BUG]  [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
282	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  't')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
283	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
284	[BUG]  [BUGGY]  return  _startToken(ch,  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startToken(ch,  JsonToken.VALUE_STRING);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startToken(ch,  JsonToken.VALUE_STRING);	  return    _startToken(ch);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	if(ch  ==  ' "'  ||  ch  ==  '>')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
286	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
287	[BUG]  [BUGGY]  safeToken(ch)  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  safeToken(ch)  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	safeToken(ch)  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
288	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _endOfInput();  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  _endOfInput();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  _endOfInput();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
289	[BUG]  [BUGGY]  if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  unclosed  character  literal  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  unclosed  character  literal	87	None	replace
290	[BUG]  [BUGGY]  if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  unclosed  character  literal  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  unclosed  character  literal	87	None	replace
291	[BUG]  [BUGGY]  if(ch!=  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.FIELD_NAME)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
292	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
293	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
294	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  return  _eofAsNextToken();  _eofAsNextToken();  }	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	28	None	replace
295	[BUG]  [BUGGY]  if(ch  =='<  ')  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [CE]  unclosed  character  literal  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='<  ')  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='<  ')  {  return  _eofAsNextToken();  _eofAsNextToken();  }	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  unclosed  character  literal	28	None	replace
296	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  return  _eofAsNextToken();  }  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  return  _eofAsNextToken();  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  missing  return  statement	65	None	replace
297	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  JsonToken.START_OBJECT;  }  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  missing  return  statement	65	None	replace
298	[BUG]  [BUGGY]  return  _nextToken().jsonToString();  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _nextToken().jsonToString();  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _nextToken().jsonToString();	  return    _nextToken();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
299	[BUG]  [BUGGY]  return  _eofAsFirstToken();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsFirstToken();  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsFirstToken();	  return    _eofAsInput();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
300	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
301	[BUG]  [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
302	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	4	None	replace
303	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	4	None	replace
304	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
305	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
306	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
307	[BUG]  [BUGGY]  if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  unclosed  character  literal  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  unclosed  character  literal	84	None	replace
308	[BUG]  [BUGGY]  if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  unclosed  character  literal  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  unclosed  character  literal	84	None	replace
309	[BUG]  [BUGGY]  return  _eofAsNextToken();  _endOfInput  =  true;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken();  _endOfInput  =  true;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken();  _endOfInput  =  true;	  return    _eofAsNextToken();    _endOfInput    =    false;    	non-compiled	[CE]  unreachable  statement	32	None	replace
310	[BUG]  [BUGGY]  if(ch  ==  '   "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  if(ch  ==  ':')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  '   "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  if(ch  ==  ':')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    if(ch  ==  ':')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  	non-compiled	[CE]  unclosed  character  literal	66	None	add
311	[BUG]  [BUGGY]  if(ch  ==  '   "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  if(ch  ==  '[')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  '   "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  if(ch  ==  '[')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    if(ch  ==  '[')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  	non-compiled	[CE]  unclosed  character  literal	66	None	add
312	[BUG]  [BUGGY]  if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.NOT_IMPLEMENTED;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
313	[BUG]  [BUGGY]  if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  unclosed  character  literal  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.NOT_IMPLEMENTED;    }    	non-compiled	[CE]  unclosed  character  literal	73	None	replace
314	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.NOT_IMPLEMENTED;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
315	[BUG]  [BUGGY]  return  _startDocument(JsonToken.VALUE_NULL,  ch,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(JsonToken.VALUE_NULL,  ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(JsonToken.VALUE_NULL,  ch,  _inputPtr);	  return    _startDocument(ch,    _inputPtr);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	12	None	replace
316	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	37	None	replace
317	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  break;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  break;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
318	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	1	None	replace
319	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	1	None	replace
320	[BUG]  [BUGGY]  if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
321	[BUG]  [BUGGY]  if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  unclosed  character  literal	74	None	replace
322	[BUG]  [BUGGY]  if(ch  =='}  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='}  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='}  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  unclosed  character  literal	74	None	replace
323	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  _inputPtr,  JsonToken.VALUE_NULL);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	83	None	replace
324	[BUG]  [BUGGY]  if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.EMPTY;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
325	[BUG]  [BUGGY]  if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [CE]  unclosed  character  literal  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='{  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.EMPTY;    }    	non-compiled	[CE]  unclosed  character  literal	71	None	replace
326	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  'n')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.EMPTY;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
327	[BUG]  [BUGGY]  if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='<  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  unclosed  character  literal	86	None	replace
328	[BUG]  [BUGGY]  if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  =='}  ')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  unclosed  character  literal	86	None	replace
329	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.END_ARRAY);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.END_ARRAY);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.END_ARRAY);	  return    _endOfInput(ch,    JsonToken.END_OBJECT);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
330	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	15	None	replace
331	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_STRING,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_STRING,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_STRING,  _inputBuffer,  _inputPtr);	  return    _startValue(JsonToken.VALUE_STRING,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	41	None	replace
332	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
333	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  ch,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  ch,  _inputBuffer,  _inputPtr);	  return    _startValue(_inputBuffer,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	38	None	replace
334	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  1,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  1,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  ch,  1,  _inputPtr);	  return    _startValue(JsonToken.VALUE_NULL,    ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	42	None	replace
335	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _endOfInput);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  ch,  _endOfInput);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _endOfInput);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	27	None	replace
336	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _endOfInput,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _endOfInput,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _endOfInput,  _origBufferLen);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _endOfInput);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	27	None	replace
337	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT,  _typeFactory);  [CE]  cannot  find  symbol  _typeFactory  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT,  _typeFactory);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.START_OBJECT,  _typeFactory);	  return    _endOfInput(ch,    JsonToken.START_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	59	None	replace
338	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	16	None	replace
339	[BUG]  [BUGGY]  parent  ==  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  parent  ==  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	parent  ==  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    '   "')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
340	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_inputPtr  <  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_inputPtr  <  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_inputPtr  <  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    '   "')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
341	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.START_OBJECT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
342	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.START_OBJECT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
343	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  if(!ch.equals(JsonToken.VALUE_NUMBER_INT))  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
344	[BUG]  [BUGGY]  return  _eofAsNextToken(ch,  JsonToken.START_OBJECT);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken(ch,  JsonToken.START_OBJECT);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(ch,  JsonToken.START_OBJECT);	  return    _eofAsNextToken(ch);    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	46	None	replace
345	[BUG]  [BUGGY]  return  _eofAsNextToken(ch,  JsonToken.VALUE_STRING);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken(ch,  JsonToken.VALUE_STRING);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(ch,  JsonToken.VALUE_STRING);	  return    _eofAsNextToken(ch);    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	46	None	replace
346	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
347	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >>  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >>  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >>  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
348	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);  [CE]  cannot  find  symbol  _inputLen  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);	  return    _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputLen	39	None	replace
349	[BUG]  [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputTail);  [CE]  cannot  find  symbol  _inputTail  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputTail);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  _inputBuffer,  _inputPtr,  _inputTail);	  _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputTail	40	None	replace
350	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
351	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  'n')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  'n')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
352	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.START_OBJECT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
353	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.START_OBJECT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
354	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.START_OBJECT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	50	None	replace
355	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _ofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _ofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _ofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	19	None	replace
356	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  >>  null;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  >>  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  >>  null;  }	  	non-compiled	[CE]  not  a  statement	48	None	add
357	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  >=  null;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  >=  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  >=  null;  }	  	non-compiled	[CE]  not  a  statement	48	None	add
358	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError!=  null;  }  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError!=  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError!=  null;  }	  	non-compiled	[CE]  >  expected	48	None	add
359	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  [Delete]  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  [Delete]  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  AssertionFailedError  <  AssertionFailedError  [Delete]	  	non-compiled	[CE]  ']'  expected	48	None	add
360	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	2	None	replace
361	[BUG]  [BUGGY]  if(ch!=  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
362	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
363	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT,  _eofPtr);  [CE]  cannot  find  symbol  _eofPtr  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT,  _eofPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.START_OBJECT,  _eofPtr);	  return    _endOfInput(ch,    JsonToken.START_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  _eofPtr	59	None	replace
364	[BUG]  [BUGGY]  _startValue(ch,  JsonToken.VALUE_NULL);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(ch,  JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  JsonToken.VALUE_NULL);	  return    _startValue(JsonToken.VALUE_NULL,    ch);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	24	None	replace
365	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
366	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
367	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
368	[BUG]  [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
369	[BUG]  [BUGGY]  if(ch!=  INT_0)  {  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  INT_0)  {  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  INT_0)  {  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
370	[BUG]  [BUGGY]  return  _startDocument(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);	  return    _startDocument(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	55	None	replace
371	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput();  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	19	None	replace
372	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _origBufferLen();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _origBufferLen();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _origBufferLen();  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	19	None	replace
373	[BUG]  [BUGGY]  return  _nextToken().endOfInput();  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _nextToken().endOfInput();  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _nextToken().endOfInput();	  return    _nextToken();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
374	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FI  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FI  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FI	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
375	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  unclosed  character  literal	74	None	replace
376	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  return  _eofAsNextToken();  }  [CE]  unclosed  character  literal  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  =='<  ')  {  return  _eofAsNextToken();  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  unclosed  character  literal	65	None	replace
377	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _endOfInput();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  _endOfInput();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  _endOfInput();  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
378	[BUG]  [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
379	[BUG]  [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
380	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(JsonToken.VALUE_STRING);  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(JsonToken.VALUE_STRING);  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(JsonToken.VALUE_STRING);  }  else  {  return  JsonToken.START_OBJECT;  }	  return    _endOfInput(JsonToken.VALUE_STRING);    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	23	None	replace
381	[BUG]  [BUGGY]  return  _endOfInput(ch,  _inputBufferPtr  +  1);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  _inputBufferPtr  +  1);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  _inputBufferPtr  +  1);	  return    _endOfInput(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	70	None	replace
382	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	14	None	replace
383	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	14	None	replace
384	[BUG]  [BUGGY]  return  _eofAsNextToken(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);	  return    _eofAsNextToken(ch);    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	46	None	replace
385	[BUG]  [BUGGY]  return  _eofAsNextToken(ch,  JsonToken.VALUE_NULL);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _eofAsNextToken(ch,  JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(ch,  JsonToken.VALUE_NULL);	  return    _eofAsNextToken(ch);    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	46	None	replace
386	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  if(!ch.equals(JsonToken.END_OBJECT))  {  return  JsonToken.END_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
387	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
388	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
389	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
390	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	48	None	add
391	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  else  {  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  else  {  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  return  JsonToken.FIELD_NAME;  }  else  {  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }	  	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	48	None	add
392	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME;  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    JsonToken.FIELD_NAME;    if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
393	[BUG]  [BUGGY]  return  _startDocument(jp,  ch,  _inputPtr);  [CE]  cannot  find  symbol  jp  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startDocument(jp,  ch,  _inputPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(jp,  ch,  _inputPtr);	  return    _startDocument(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol  jp	12	None	replace
394	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
395	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
396	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _eofAsNextToken();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    _eofAsNextToken();    _eofAsNextToken();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
397	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
398	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
399	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  _inputBuffer,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  _origBufferLen);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _origBufferLen);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	82	None	replace
400	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _origBufferLen);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  ch,  JsonToken.VALUE_NULL,  _origBufferLen);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _origBufferLen);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	82	None	replace
401	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    '   "')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
402	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  missing  return  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    '   "')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  missing  return  statement	85	None	replace
403	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.START_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	56	None	replace
404	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.START_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	56	None	replace
405	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  unclosed  character  literal  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  =='<  ')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	non-compiled	[CE]  unclosed  character  literal	67	None	replace
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  _endOfInput?  JsonToken.START_OBJECT  :  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	if(ch  ==  ' "')  {  return  _endOfInput?  JsonToken.START_OBJECT  :  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
407	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _endOfInput?  JsonToken.START_OBJECT  :  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  return  _endOfInput?  JsonToken.START_OBJECT  :  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  _endOfInput?  JsonToken.START_OBJECT  :  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  if(ch    ==    '   "')    {    return    _eofAsNextToken();    }    else    {    return    JsonToken.START_OBJECT;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
408	[BUG]  [BUGGY]  return  ch  ==  JsonToken.FIELD_NAME;  [CE]  incomparable  types:  int  and  JsonToken  [FE]    AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  ch  ==  JsonToken.FIELD_NAME;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  ch  ==  JsonToken.FIELD_NAME;	  return    JsonToken.FIELD_NAME;    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	49	None	replace
409	[BUG]  [BUGGY]  return  ch!=  JsonToken.FIELD_NAME;  [CE]  incomparable  types:  int  and  JsonToken  [FE]      AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  ch!=  JsonToken.FIELD_NAME;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  ch!=  JsonToken.FIELD_NAME;	  return    JsonToken.FIELD_NAME;    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	49	None	replace
410	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME  &&  ch  ==  0;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError    [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  JsonToken.FIELD_NAME  &&  ch  ==  0;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  JsonToken.FIELD_NAME  &&  ch  ==  0;	  return    JsonToken.FIELD_NAME;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	49	None	replace
411	[BUG]  [BUGGY]  return  _endOfInput;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput;  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput;	  return    _eofAsInput();    	non-compiled	[CE]  incompatible  types	68	None	replace
412	[BUG]  [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _icUTF8);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr,  _icUTF8);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  _inputBuffer,  _inputPtr,  _icUTF8);	  _startValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	40	None	replace
413	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
414	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _finishString();  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _finishString();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _finishString();  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
415	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
416	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _endOfInput  =  false;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _endOfInput  =  false;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _startDocument(ch);  }  else  {  _endOfInput  =  false;  }	  return    _startDocument(ch);    _startDocument(ch);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
417	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.START_OBJECT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
418	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
419	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [CE]  unclosed  character  literal  [FE]        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.EMPTY;    }    	non-compiled	[CE]  unclosed  character  literal	71	None	replace
420	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  null;  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(!ch.equals(JsonToken.START_OBJECT))    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	51	None	replace
421	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OF_RANGE)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OF_RANGE)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OF_RANGE)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	18	None	replace
422	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OF_ARRAY)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OF_ARRAY)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OF_ARRAY)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	18	None	replace
423	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    ch;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
424	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _endOfInput(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _endOfInput(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _endOfInput(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	4	None	replace
425	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr,  _endOfInput);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr,  _endOfInput);	  return    _startValue(ch,    JsonToken.VALUE_NULL,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	83	None	replace
426	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL    ||    ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
427	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	11	None	replace
428	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  0,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  0,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  0,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	11	None	replace
429	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch    ==    JsonToken.VALUE_NULL)    {    if(ch!=    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
430	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch,  _inputBuffer[_inputPtr++]);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.END_OBJECT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	57	None	replace
431	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	17	None	replace
432	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING  ||  ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  return  _eofAsNextToken();  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _eofAsNextToken();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	17	None	replace
433	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	61	None	replace
434	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _endOfInput(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _endOfInput(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _endOfInput(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	61	None	replace
435	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
436	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
437	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
438	[BUG]  [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  INT_0  ||  ch  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  return    _startDocument(ch);    if(ch!=    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
439	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_INPUT);  [CE]  cannot  find  symbol  VALUE_EMBEDDED_INPUT  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_INPUT);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_INPUT);	  return    _endOfInput(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  VALUE_EMBEDDED_INPUT	69	None	replace
440	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.NOT_IMPLEMENTED;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
441	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  unclosed  character  literal  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.NOT_IMPLEMENTED;    }    	non-compiled	[CE]  unclosed  character  literal	73	None	replace
442	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
443	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
444	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	13	None	replace
445	[BUG]  [BUGGY]  ch  =  _startDocument(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  ch  =  _startDocument(ch,  _inputBufferPtr);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	ch  =  _startDocument(ch,  _inputBufferPtr);	  return    _startDocument(ch);    ch    =    _startDocument(ch);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	34	None	replace
446	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _endOfInput(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	63	None	replace
447	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch,  _origBufferLen);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch,  _origBufferLen);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch,  _origBufferLen);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _endOfInput(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	63	None	replace
448	[BUG]  [BUGGY]  if(_inputPtr  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(_inputPtr  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(_inputPtr  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	76	None	replace
449	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr,  _inputLen);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	76	None	replace
450	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startDocument(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	15	None	replace
451	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
452	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [CE]  unclosed  character  literal  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  =='<  ')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }	  return    _eofAsNextToken();    if(ch    ==    '   "')    {    if(_endOfInput)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  unclosed  character  literal	72	None	replace
453	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr);  }	  if(ch!=    JsonToken.VALUE_NUMBER_INT    ||    ch    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	10	None	replace
454	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }	  if(ch!=    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	77	None	replace
455	[BUG]  [BUGGY]  if(_inputPtr  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(_inputPtr  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(_inputPtr  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch,    _inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	62	None	replace
456	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_EMBEDDED_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
457	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  '@')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  '@')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
458	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "'  ||  ch  ==  '>')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    if(_inputPtr    >=    _inputEnd)    {    return    JsonToken.FIELD_NAME;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
459	[BUG]  [BUGGY]  return  _startToken(JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  return  _startToken(JsonToken.VALUE_NULL);  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startToken(JsonToken.VALUE_NULL);	  return    _startToken(ch);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
460	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  &&  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  &&  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  &&  ch!=  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }	  if(ch!=    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	64	None	replace
461	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _endOfInput(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	2	None	replace
462	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  0,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  0,  _inputPtr);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  0,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch,    _inputPtr);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	2	None	replace
463	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  else  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  else  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    _endOfInput    =    false;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
464	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  <  =  0x7F)  {  return  _eofAsNextToken();  _endOfInput  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    _eofAsNextToken();    _endOfInput    =    false;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
465	[BUG]  [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  null;  }	  return    _eofAsNextToken();    if(ch    ==    JsonToken.START_OBJECT)    {    if(ch    ==    JsonToken.END_OBJECT)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
466	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.FIELD_NAME)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.FIELD_NAME)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
467	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    if(ch!=    JsonToken.FIELD_NAME)    {    if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startDocument(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	44	None	replace
468	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
469	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]      return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  return    _startDocument(ch);    if(ch!=    JsonToken.VALUE_STRING)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
