bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  return  _startDocument(ch);  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	return  _startDocument(ch);	return  _startValue(ch);  	compilable	  [FE]  StackOverflowError  	69	1	replace
2	[BUG]  [BUGGY]  return  _startDocument(ch);  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  return  _startDocument(ch);  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(ch);	return  _startValue(ch);  	compilable	  [FE]  StackOverflowError  	69	1	replace
3	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]      AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }	return  _startValue(ch);  	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	69	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }	return  _startValue(ch);  	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	69	None	replace
5	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }	return  _startValue(ch);  	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	69	None	replace
6	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]            AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]    [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	  	return  _startValue(ch);  	non-compiled	[CE]  missing  return  statement	69	None	replace
7	[BUG]  [BUGGY]  return  _endOfInput(ch);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  return  _endOfInput(ch);  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch);	return  _startValue(ch);  	non-compiled	[CE]  cannot  find  symbol	69	None	replace
8	[BUG]  [BUGGY]  return  _startValue(ch,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  return  _startValue(ch,  _inputPtr);  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputPtr);	return  _startValue(ch);  	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	69	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  return  _eofAsNextToken();  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	return  _eofAsNextToken();	return  _startValue(ch);  	compilable	  [FE]  AssertionFailedError  	69	1	replace
10	[BUG]  [BUGGY]  return  _eofAsNextToken();  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  return  _eofAsNextToken();  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken();	return  _startValue(ch);  	compilable	  [FE]  AssertionFailedError  	69	1	replace
11	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL);  [BUGGY]  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL);	return  _startValue(ch);  	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	69	None	replace
