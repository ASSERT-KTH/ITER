bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	4	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputPtr);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	4	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputPtr);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
5	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  ch;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  break;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	5	None	replace
10	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	5	None	replace
11	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _startValue(ch,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	5	None	replace
12	[BUG]  [BUGGY]  return  _startDocument(ch,  _inputPtr);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(ch,  _inputPtr);	  return    _startDocument(ch);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	2	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]      StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	2	None	replace
14	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	2	None	replace
15	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startDocument(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startDocument(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _startDocument(ch);  }	  return    _startDocument(ch);    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	2	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _eofAsNextToken();  }	  return    _eofAsNextToken();    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	10	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _eofAsNextToken();  }	  return    _eofAsNextToken();    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	10	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _eofAsNextToken();  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  return  _eofAsNextToken();  }	  return    _eofAsNextToken();    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	10	None	replace
19	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _eofAsNextToken();  }	  return    _eofAsNextToken();    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	10	None	replace
20	[BUG]  [BUGGY]  return  _endOfInput(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput(ch,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  _inputPtr);	  return    _endOfInput(ch);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
21	[BUG]  [BUGGY]  return  _endOfInput(_inputBuffer,  ch);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput(_inputBuffer,  ch);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(_inputBuffer,  ch);	  return    _endOfInput(ch);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
22	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_STRING);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_STRING);	  return    _endOfInput(ch);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
23	[BUG]  [BUGGY]  return  _endOfInput(JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput(JsonToken.VALUE_STRING);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(JsonToken.VALUE_STRING);	  return    _endOfInput(ch);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
24	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  ch);	  return    _startValue(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	11	None	replace
25	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputPtr);	  return    _startValue(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	11	None	replace
26	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  JsonToken.VALUE_NULL);	  return    _startValue(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	11	None	replace
27	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _endOfInput);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _endOfInput);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _endOfInput);	  return    _startValue(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	11	None	replace
28	[BUG]  [BUGGY]  return  _eofAsNextToken();  _eofAsNextToken();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  _eofAsNextToken();  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    _eofAsNextToken();	  	non-compiled	[CE]  unreachable  statement	9	None	add
29	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
30	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  JsonToken.START_OBJECT)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
31	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
32	[BUG]  [BUGGY]  return  _eofAsNextToken();  _endOfInput  =  false;  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  _endOfInput  =  false;  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    _endOfInput  =  false;	  	non-compiled	[CE]  unreachable  statement	9	None	add
33	[BUG]  [BUGGY]  return  _startDocument(ch);  _startDocument(ch);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  _startDocument(ch);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    _startDocument(ch);	  	non-compiled	[CE]  unreachable  statement	1	None	add
34	[BUG]  [BUGGY]  return  _startDocument(ch);  ch  =  _startDocument(ch);  [CE]  incompatible  types  [FE]      StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  ch  =  _startDocument(ch);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    ch  =  _startDocument(ch);	  	non-compiled	[CE]  incompatible  types	1	None	add
35	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
36	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch!=  JsonToken.VALUE_NULL)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
37	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch!=  JsonToken.VALUE_STRING)  {  if(ch  ==  JsonToken.VALUE_NULL)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
38	[BUG]  [BUGGY]  return  _startValue(_inputBuffer,  ch,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(_inputBuffer,  ch,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(_inputBuffer,  ch,  _inputPtr);	  return    _startValue(ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	8	None	replace
39	[BUG]  [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(ch,  _inputBuffer,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  _inputBuffer,  _inputPtr);	  return    _startValue(ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	8	None	replace
40	[BUG]  [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  _startValue(ch,  _inputBuffer,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	_startValue(ch,  _inputBuffer,  _inputPtr);	  return    _startValue(ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	8	None	replace
41	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_STRING,  ch,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(JsonToken.VALUE_STRING,  ch,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_STRING,  ch,  _inputPtr);	  return    _startValue(ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	8	None	replace
42	[BUG]  [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(JsonToken.VALUE_NULL,  ch,  _inputPtr);	  return    _startValue(ch,    _inputPtr);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	8	None	replace
43	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch!=  JsonToken.VALUE_NULL)  {  if(ch  ==  JsonToken.START_OBJECT)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
44	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch!=  JsonToken.FIELD_NAME)  {  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
45	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  null;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  return  _eofAsNextToken(ch);  [CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken(ch);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsNextToken(ch);	  return    _eofAsNextToken();    	non-compiled	[CE]  method  _eofAsNextToken  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	10	None	replace
47	[BUG]  [BUGGY]  return  _endOfInput();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput();  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput();	  return    _eofAsNextToken();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  JsonToken.FIELD_NAME;  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	return  JsonToken.FIELD_NAME;	  return    _eofAsNextToken();    	compilable	  [FE]  AssertionFailedError  	10	1	replace
49	[BUG]  [BUGGY]  return  JsonToken.FIELD_NAME;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  JsonToken.FIELD_NAME;  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  JsonToken.FIELD_NAME;	  return    _eofAsNextToken();    	compilable	  [FE]  AssertionFailedError  	10	1	replace
50	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  JsonToken.START_OBJECT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
51	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
52	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
53	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(!ch.equals(JsonToken.START_OBJECT))  {  return  JsonToken.END_OBJECT;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
54	[BUG]  [BUGGY]  return  _startToken(ch);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startToken(ch);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startToken(ch);	  return    _startDocument(ch);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
55	[BUG]  [BUGGY]  return  _startDocument(ch,  JsonToken.VALUE_NULL);  [CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch,  JsonToken.VALUE_NULL);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startDocument(ch,  JsonToken.VALUE_NULL);	  return    _startDocument(ch);    	non-compiled	[CE]  method  _startDocument  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	2	None	replace
56	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.START_OBJECT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	5	None	replace
57	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.END_OBJECT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	5	None	replace
58	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _typeFactory);  [CE]  cannot  find  symbol  _typeFactory  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _typeFactory);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _typeFactory);	  return    _startValue(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	11	None	replace
59	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput(ch,  JsonToken.START_OBJECT);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.START_OBJECT);	  return    _endOfInput(ch);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
60	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.END_OBJECT);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput(ch,  JsonToken.END_OBJECT);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.END_OBJECT);	  return    _endOfInput(ch);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
61	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
62	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_STRING)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	4	None	replace
63	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT  ||  ch  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  return  _endOfInput(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	5	None	replace
64	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NUMBER_INT)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NUMBER_INT)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	5	None	replace
65	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  _eofAsNextToken();  }	  return    _eofAsNextToken();    	non-compiled	[CE]  missing  return  statement	10	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    	compilable	  [FE]  AssertionFailedError  	10	1	replace
67	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  return  _eofAsNextToken();  }  else  {  return  JsonToken.START_OBJECT;  }	  return    _eofAsNextToken();    	compilable	  [FE]  AssertionFailedError  	10	1	replace
68	[BUG]  [BUGGY]  return  _eofAsInput();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsInput();  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _eofAsInput();	  return    _eofAsNextToken();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
69	[BUG]  [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);	  return    _endOfInput(ch);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
70	[BUG]  [BUGGY]  return  _endOfInput(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _endOfInput(ch,  _inputBufferPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _endOfInput(ch,  _inputBufferPtr);	  return    _endOfInput(ch);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	7	None	replace
71	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.EMPTY;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
72	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
73	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.NOT_IMPLEMENTED;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
74	[BUG]  [BUGGY]  return  _eofAsNextToken();  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _eofAsNextToken();  if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _eofAsNextToken();    if(ch  ==  ' "')  {  if(_endOfInput)  {  return  JsonToken.START_OBJECT;  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
75	[BUG]  [BUGGY]  return  _nextToken();  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _nextToken();  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _nextToken();	  return    _startDocument(ch);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
76	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  return  _startValue(ch,  _inputBuffer,  _inputPtr);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
77	[BUG]  [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch!=  JsonToken.VALUE_NULL)  {  return  _startValue(ch);  }	  if(ch    ==    JsonToken.VALUE_NULL)    {    return    _startValue(ch);    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	3	None	replace
78	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
79	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
80	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
81	[BUG]  [BUGGY]  return  _startDocument(ch);  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startDocument(ch);  if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return    _startDocument(ch);    if(ch!=  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
82	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _origBufferLen);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _origBufferLen);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _origBufferLen);	  return    _startValue(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	11	None	replace
83	[BUG]  [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);  [CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	return  _startValue(ch,  JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);	  return    _startValue(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _startValue  in  class  NonBlockingJsonParser  cannot  be  applied  to  given  types;	11	None	replace
84	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  ' "')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.FIELD_NAME;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
86	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.START_OBJECT;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
87	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case  return  _eofAsNextToken();  }  return  JsonToken.NOT_AVAILABLE;  }  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  }    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }  [BUGGY]    }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  if(_inputPtr  >=  _inputEnd)  {  return  JsonToken.VALUE_STRING;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
