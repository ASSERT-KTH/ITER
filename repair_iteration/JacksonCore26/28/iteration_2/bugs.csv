bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue  +  1;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue  +  1;	  _binaryValue    =    _binaryValue;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
2	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.trim();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue.trim();  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue.trim();	  _binaryValue    =    _binaryValue;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
3	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.toString();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue.toString();  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue.toString();	  _binaryValue    =    _binaryValue;    	non-compiled	[CE]  incompatible  types	2	None	replace
4	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	      	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	7	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
6	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	      	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
7	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	      	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	7	None	replace
8	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++];  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++];	  _binaryValue    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  ';'  expected	4	None	replace
10	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputPtr);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputPtr);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING,  _inputPtr);	  _binaryValue    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  ';'  expected	4	None	replace
11	[BUG]  [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]      if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	        if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startValue(ch);  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
12	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;	  _binaryValue    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  incompatible  types	9	None	replace
13	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF;	  _binaryValue    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  incompatible  types	9	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
15	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
16	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);	  	non-compiled	[CE]  orphaned  case	1	None	add
17	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);	  	non-compiled	[CE]  orphaned  case	1	None	add
18	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF	  	non-compiled	[CE]  orphaned  case	1	None	add
19	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);	  	non-compiled	[CE]  orphaned  case	1	None	add
20	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr);  [CE]  cannot  find  symbol  ch  [FE]              AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputPtr);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol  ch	5	None	replace
21	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME  +  1;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NAME  +  1;	  _binaryValue    =    JsonToken.FIELD_NAME;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
22	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_VALUE;  [CE]  cannot  find  symbol  FIELD_VALUE  [FE]            AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.FIELD_VALUE;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_VALUE;	  _binaryValue    =    JsonToken.FIELD_NAME;    	non-compiled	[CE]  cannot  find  symbol  FIELD_VALUE	3	None	replace
23	[BUG]  [BUGGY]      ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  ch  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]      ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	        ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  cannot  find  symbol  ch	6	None	add
24	[BUG]  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]      AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	        int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	6	None	add
25	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer);  [CE]  cannot  find  symbol  ch  [FE]              AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol  ch	5	None	replace
26	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  ch  [FE]                AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol  ch	5	None	replace
27	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  int  _binaryValue  =  _binaryValue;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  int  _binaryValue  =  _binaryValue;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    int  _binaryValue  =  _binaryValue;	  	non-compiled	[CE]  incompatible  types	1	None	add
28	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    (_binaryValue  =  _binaryValue);	  	non-compiled	[CE]  not  a  statement	1	None	add
29	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    (_binaryValue  =  _binaryValue;	  	non-compiled	[CE]  ')'  expected	1	None	add
30	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++];  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++];	  _binaryValue    =    JsonToken.FIELD_NAME;    	non-compiled	[CE]  ';'  expected	3	None	replace
31	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]            AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT;	  _binaryValue    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	4	None	replace
32	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]              AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT;	  _binaryValue    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	4	None	replace
33	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME;	  _binaryValue    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	4	None	replace
34	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY;	  _binaryValue    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	4	None	replace
35	[BUG]  [BUGGY]  _binaryValue  =  _binaryValid;  [CE]  cannot  find  symbol  _binaryValid  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValid;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValid;	  _binaryValue    =    _binaryValue;    	non-compiled	[CE]  cannot  find  symbol  _binaryValid	2	None	replace
36	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  ch  [FE]              AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBufferPtr);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol  ch	5	None	replace
37	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]);  [CE]  cannot  find  symbol  ch  [FE]                AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol  ch	5	None	replace
38	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);	  	non-compiled	[CE]  not  a  statement	1	None	add
39	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  0xFF);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  0xFF);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    ((  _binaryValue  =  _binaryValue)&  0xFF);	  	non-compiled	[CE]  not  a  statement	1	None	add
40	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue    =    _binaryValue;    ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;	  	non-compiled	[CE]  ')'  expected	1	None	add
41	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.START_OBJECT_FIELD_FIRST;  [CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST  [FE]            AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.START_OBJECT_FIELD_FIRST;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.START_OBJECT_FIELD_FIRST;	  _binaryValue    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST	4	None	replace
42	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT;	  _binaryValue    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	4	None	replace
43	[BUG]  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	        int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	6	None	add
44	[BUG]  [BUGGY]  _binaryValue  =  _currToken;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _currToken;  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken;	  _binaryValue    =    _binaryValue;    	non-compiled	[CE]  incompatible  types	2	None	replace
45	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr);	  _binaryValue    =    _binaryValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
46	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;      [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL);  [BUGGY]    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(JsonToken.VALUE_NULL);	  _binaryValue    =    _binaryValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
