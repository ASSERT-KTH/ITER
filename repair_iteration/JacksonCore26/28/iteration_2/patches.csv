bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputPtr  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputPtr  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NAME,  _inputPtr  +  1;	  _binaryValue    =    JsonToken.FIELD_NAME    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
2	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
3	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
4	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    int  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	5	None	add
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
6	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
7	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startDocument(ch);	          int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    return    _startValue(ch);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	43	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  }	          int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    return    _startValue(ch);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
9	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  }	          int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    return    _startValue(ch);    	compilable	  [FE]  AssertionFailedError  	43	1	replace
10	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [CE]  cannot  find  symbol  ch  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startDocument(ch);	          int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    return    _startValue(ch);    	non-compiled	[CE]  cannot  find  symbol  ch	43	None	replace
11	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]  &  0xFF;	  _binaryValue    =    JsonToken.VALUE_STRING,    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  ';'  expected	9	None	replace
12	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr  +  1);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr  +  1);	  _binaryValue    =    _binaryValue(_inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
13	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr++);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr++);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr++);	  _binaryValue    =    _binaryValue(_inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_inputPtr  =  _inputBuffer[_inputPtr++];	  if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
15	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++];	  if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
16	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]  ==  JsonToken.FIELD_NAME)  {  return  _finishToken();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue);    	non-compiled	[CE]  not  a  statement	38	None	replace
18	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  0)?  0xFF  :  _binaryValue);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  0)?  0xFF  :  _binaryValue);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue;  ((  _binaryValue  =  0)?  0xFF  :  _binaryValue);	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue);    	non-compiled	[CE]  not  a  statement	38	None	replace
19	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.START_OBJECT;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.START_OBJECT;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.START_OBJECT;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.START_OBJECT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	32	None	replace
20	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT,  _inputPtr;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT,  _inputPtr;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT,  _inputPtr;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.START_OBJECT;    	non-compiled	[CE]  ';'  expected	32	None	replace
21	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT_FIELD_FIRST;  [CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT_FIELD_FIRST;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.START_OBJECT_FIELD_FIRST;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.START_OBJECT;    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST	32	None	replace
22	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.END_ARRAY;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.END_ARRAY;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.END_ARRAY;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.END_ARRAY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	34	None	replace
23	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY  +  1;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.END_ARRAY;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	34	None	replace
24	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_VALUE  +  1;  [CE]  cannot  find  symbol  FIELD_VALUE  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_VALUE  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_VALUE  +  1;	  _binaryValue    =    JsonToken.FIELD_VALUE;    	non-compiled	[CE]  cannot  find  symbol  FIELD_VALUE	22	None	replace
25	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.END_OBJECT;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.END_OBJECT;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.END_OBJECT;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.END_OBJECT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	31	None	replace
26	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT,  _inputPtr;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT,  _inputPtr;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT,  _inputPtr;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.END_OBJECT;    	non-compiled	[CE]  ';'  expected	31	None	replace
27	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue.getValue();  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue.getValue();	  _binaryValue    =    _binaryValue.toString();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
28	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.toByteArray();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue.toByteArray();  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue.toByteArray();	  _binaryValue    =    _binaryValue.toString();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
29	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]    &    0xFF    	non-compiled	[CE]  ')'  expected	18	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]    &    0xFF    	compilable	  [FE]  AssertionFailedError  	18	1	replace
31	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]    &    0xFF    	compilable	  [FE]  AssertionFailedError  	18	1	replace
32	[BUG]  [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	Integer  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  Integer    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	7	None	replace
33	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue;    	non-compiled	[CE]  ')'  expected	29	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
35	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue;    	compilable	  [FE]  AssertionFailedError  	29	1	replace
36	[BUG]  [BUGGY]  _binaryValue  =  _currToken.nextToken();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _currToken.nextToken();  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken.nextToken();	  _binaryValue    =    _currToken;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
38	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xF;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
39	[BUG]  [BUGGY]  _inputPtr  =  buf[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  buf  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  buf[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr  =  buf[_inputPtr++]  &  0xFF;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol  buf	6	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
41	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
42	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);	  	non-compiled	[CE]  orphaned  case	14	None	add
43	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:	  	non-compiled	[CE]  orphaned  case	14	None	add
44	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  int  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  int  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    int  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;	  	non-compiled	[CE]  incompatible  types	14	None	add
45	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputPtr);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputPtr);	  _binaryValue    =    _binaryValue(JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
46	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _numTypesValid);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _numTypesValid);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _numTypesValid);	  _binaryValue    =    _binaryValue(JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
47	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer[_inputPtr++]);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer[_inputPtr++]);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer[_inputPtr++]);	  _binaryValue    =    _binaryValue(JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
48	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]  ==  null)  {  return  _startValue(ch);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]  ==  null)  {  return  _startValue(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]  ==  null)  {  return  _startValue(ch);  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    null)    {    return    _startValue(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue;    	non-compiled	[CE]  ')'  expected	40	None	replace
50	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue;    	non-compiled	[CE]  ')'  expected	40	None	replace
51	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue);  }	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue;    	non-compiled	[CE]  not  a  statement	40	None	replace
52	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &&  JsonToken.START_OBJECT_FIELD_FIRST;  [CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &&  JsonToken.START_OBJECT_FIELD_FIRST;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  &&  JsonToken.START_OBJECT_FIELD_FIRST;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.START_OBJECT_FIELD_FIRST;    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST	41	None	replace
53	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr  +  1);  [CE]  cannot  find  symbol  ch  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr  +  1);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBufferPtr  +  1);	  _binaryValue    =    _binaryValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol  ch	36	None	replace
54	[BUG]  [BUGGY]  int  _binaryValue  =  _binaryValue;  [CE]  variable  _binaryValue  might  not  have  been  initialized  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  int  _binaryValue  =  _binaryValue;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	int  _binaryValue  =  _binaryValue;	  _binaryValue    =    _binaryValue;    int    _binaryValue    =    _binaryValue;    	non-compiled	[CE]  variable  _binaryValue  might  not  have  been  initialized	27	None	replace
55	[BUG]  [BUGGY]  (_binaryValue  =  _binaryValue);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  (_binaryValue  =  _binaryValue);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	(_binaryValue  =  _binaryValue);	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue);    	non-compiled	[CE]  not  a  statement	28	None	replace
56	[BUG]  [BUGGY]  (_binaryValue  =  null);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  (_binaryValue  =  null);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	(_binaryValue  =  null);	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue);    	non-compiled	[CE]  not  a  statement	28	None	replace
57	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch);    	non-compiled	[CE]  incompatible  types	17	None	replace
58	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  0;  _binaryValue  =  0;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_majorState)  {  _binaryValue  =  0;  _binaryValue  =  0;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_majorState)  {  _binaryValue  =  0;  _binaryValue  =  0;  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch);    	non-compiled	[CE]  incompatible  types	17	None	replace
59	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	          int    ch    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
60	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  cannot  find  symbol  ch  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol  ch	37	None	replace
61	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue  *  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue  *  1;	  _binaryValue    =    _binaryValue    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
62	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue  +  1L;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue  +  1L;	  _binaryValue    =    _binaryValue    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
63	[BUG]  [BUGGY]  ((  _binaryValue  =  _binaryValue)&  0xFF);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  ((  _binaryValue  =  _binaryValue)&  0xFF);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	((  _binaryValue  =  _binaryValue)&  0xFF);	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)&    0xFF);    	non-compiled	[CE]  not  a  statement	39	None	replace
64	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  0)&  0xFF);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  0)&  0xFF);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue;  ((  _binaryValue  =  0)&  0xFF);	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)&    0xFF);    	non-compiled	[CE]  not  a  statement	39	None	replace
65	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  1xFF);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  1xFF);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  1xFF);	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)&    0xFF);    	non-compiled	[CE]  ')'  expected	39	None	replace
66	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);  [CE]  cannot  find  symbol  ch  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol  ch	26	None	replace
67	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.FIELD_NAME;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.FIELD_NAME;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  &  JsonToken.FIELD_NAME;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.FIELD_NAME;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	33	None	replace
68	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME,  _inputPtr;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME,  _inputPtr;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME,  _inputPtr;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.FIELD_NAME;    	non-compiled	[CE]  ';'  expected	33	None	replace
69	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
70	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]);	  _binaryValue    =    JsonToken.VALUE_STRING,    _inputPtr);    	non-compiled	[CE]  ';'  expected	10	None	replace
71	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr]);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr]);	  _binaryValue    =    JsonToken.VALUE_STRING,    _inputPtr);    	non-compiled	[CE]  ';'  expected	10	None	replace
72	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++]  &  0xFF;	  _binaryValue    =    JsonToken.FIELD_NAME,    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  ';'  expected	30	None	replace
73	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_NUMBER_FLOAT  ||  JsonToken.VALUE_STRING;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_NUMBER_FLOAT  ||  JsonToken.VALUE_STRING;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_NUMBER_FLOAT  ||  JsonToken.VALUE_STRING;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.VALUE_NUMBER_FLOAT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	42	None	replace
74	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_NUMBER_INT  ||  JsonToken.VALUE_NUMBER_FLOAT;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_NUMBER_INT  ||  JsonToken.VALUE_NUMBER_FLOAT;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_NUMBER_INT  ||  JsonToken.VALUE_NUMBER_FLOAT;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.VALUE_NUMBER_FLOAT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	42	None	replace
75	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT,  _inputPtr;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT,  _inputPtr;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT,  _inputPtr;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.VALUE_NUMBER_FLOAT;    	non-compiled	[CE]  ';'  expected	42	None	replace
76	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);  }  [CE]  cannot  find  symbol  ch  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol  ch	19	None	replace
77	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _start  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _start  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _start	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  orphaned  case	19	None	replace
78	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]    &    0xFF);    	non-compiled	[CE]  '.class'  expected	16	None	replace
79	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  }  [CE]  cannot  find  symbol  ch  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]    &    0xFF);    	non-compiled	[CE]  cannot  find  symbol  ch	16	None	replace
80	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]    &    0xFF);    	non-compiled	[CE]  ')'  expected	16	None	replace
81	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]    &    0xFF);    	non-compiled	[CE]  incompatible  types	16	None	replace
82	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]);  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  incompatible  types	19	None	replace
83	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  ==  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.START_OBJECT)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.START_OBJECT)  {  return  _finishToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.START_OBJECT)  {  return  _finishToken();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue;    	non-compiled	[CE]  ')'  expected	29	None	replace
86	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue;  }	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue;    	non-compiled	[CE]  ')'  expected	29	None	replace
87	[BUG]  [BUGGY]  Integer  _binaryValue  =  _binaryValue;  [CE]  variable  _binaryValue  might  not  have  been  initialized  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  Integer  _binaryValue  =  _binaryValue;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	Integer  _binaryValue  =  _binaryValue;	  _binaryValue    =    _binaryValue;    int    _binaryValue    =    _binaryValue;    	non-compiled	[CE]  variable  _binaryValue  might  not  have  been  initialized	27	None	replace
88	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length());  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue.substring(0,  _binaryValue.length());	  _binaryValue    =    _binaryValue.trim();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
89	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer,  _inputPtr);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer,  _inputPtr);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer,  _inputPtr);	  _binaryValue    =    JsonToken.VALUE_STRING,    _inputPtr);    	non-compiled	[CE]  ';'  expected	10	None	replace
90	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.VALUE_NUMBER_FLOAT  +  1;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.VALUE_NUMBER_FLOAT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
91	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &&  JsonToken.VALUE_NUMBER_FLOAT;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  &&  JsonToken.VALUE_NUMBER_FLOAT;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  &&  JsonToken.VALUE_NUMBER_FLOAT;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.VALUE_NUMBER_FLOAT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	42	None	replace
92	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
93	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
94	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  0xFF);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  0xFF);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  0xFF);  }	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)&    0xFF);    	non-compiled	[CE]  not  a  statement	39	None	replace
95	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  0xFF);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  0xFF);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)&  0xFF);  }	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)&    0xFF);    	non-compiled	[CE]  not  a  statement	39	None	replace
96	[BUG]  [BUGGY]  if(_binaryValid  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValid  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValid  ==  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue;    	non-compiled	[CE]  ')'  expected	40	None	replace
97	[BUG]  [BUGGY]  if(_binaryValid!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValid!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValid!=  null)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue;    	non-compiled	[CE]  ')'  expected	40	None	replace
98	[BUG]  [BUGGY]  _binaryValue  =  _buffer[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  _buffer  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _buffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _buffer[_inputPtr++]  &  0xFF;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol  _buffer	12	None	replace
99	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  _inputPtr  might  not  have  been  initialized  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    Integer  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  _inputPtr  might  not  have  been  initialized	5	None	add
100	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
101	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++]  +  0xFF;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
102	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer);	  _binaryValue    =    _binaryValue(JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
103	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startDocument(ch);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startDocument(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  null)  {  return  _startDocument(ch);  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    null)    {    return    _startValue(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
104	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT  |  JsonToken.VALUE_STRING;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT  |  JsonToken.VALUE_STRING;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.START_OBJECT  |  JsonToken.VALUE_STRING;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.START_OBJECT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	32	None	replace
105	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch,  _inputBuffer[_inputPtr++]  &  0xFF	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]    &    0xFF    	non-compiled	[CE]  ')'  expected	18	None	replace
106	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer[_inputPtr++]  &  0xF;	  _binaryValue    =    JsonToken.VALUE_STRING,    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  ';'  expected	9	None	replace
107	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer[_inputPtr++]  &  0xF;	  _binaryValue    =    JsonToken.FIELD_NAME,    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  ';'  expected	30	None	replace
108	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.END_OBJECT  |  JsonToken.VALUE_STRING;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.END_OBJECT  |  JsonToken.VALUE_STRING;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.END_OBJECT  |  JsonToken.VALUE_STRING;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.END_OBJECT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	31	None	replace
109	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST  ||  JsonToken.VALUE_STRING;  [CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST  ||  JsonToken.VALUE_STRING;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST  ||  JsonToken.VALUE_STRING;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.START_OBJECT_FIELD_FIRST;    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST	41	None	replace
110	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.START_OBJECT_FIRST;  [CE]  cannot  find  symbol  START_OBJECT_FIRST  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.START_OBJECT_FIRST;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  ||  JsonToken.START_OBJECT_FIRST;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.START_OBJECT_FIELD_FIRST;    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT_FIRST	41	None	replace
111	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_ARRAY;  [CE]  cannot  find  symbol  FIELD_ARRAY  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_ARRAY;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_ARRAY;	  _binaryValue    =    JsonToken.FIELD_VALUE;    	non-compiled	[CE]  cannot  find  symbol  FIELD_ARRAY	22	None	replace
112	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NUMBER_VALUE;  [CE]  cannot  find  symbol  FIELD_NUMBER_VALUE  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_NUMBER_VALUE;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NUMBER_VALUE;	  _binaryValue    =    JsonToken.FIELD_VALUE;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NUMBER_VALUE	22	None	replace
113	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer[_inputPtr++]);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer[_inputPtr++]);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(_inputBuffer[_inputPtr++]);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
115	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
116	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  return  _startDocument(ch);  }  [CE]  cannot  find  symbol  ch  [FE]      AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  return  _startDocument(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  cannot  find  symbol  ch	14	None	add
117	[BUG]  [BUGGY]  _binaryValue  =  NR_UNKNOWN;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  NR_UNKNOWN;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  NR_UNKNOWN;	  _binaryValue    =    _binaryValid;    	non-compiled	[CE]  incompatible  types	35	None	replace
118	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument(ch);  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch);    	non-compiled	[CE]  orphaned  case	17	None	replace
119	[BUG]  [BUGGY]  _binaryValue  =  _currToken  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _currToken  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken  +  1;	  _binaryValue    =    _currToken;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	44	None	replace
120	[BUG]  [BUGGY]  _binaryValue  =  _currToken.next;  [CE]  cannot  find  symbol  next  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _currToken.next;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken.next;	  _binaryValue    =    _currToken;    	non-compiled	[CE]  cannot  find  symbol  next	44	None	replace
121	[BUG]  [BUGGY]  _binaryValue  =  _currToken.toByteArray();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _currToken.toByteArray();  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken.toByteArray();	  _binaryValue    =    _currToken;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
122	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME  +  1L;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NAME  +  1L;	  _binaryValue    =    JsonToken.FIELD_NAME    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
123	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    	compilable	  [FE]  RuntimeException  	15	1	replace
124	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    	compilable	  [FE]  RuntimeException  	15	1	replace
125	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.FIELD_NAME  +  1;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.FIELD_NAME;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	33	None	replace
126	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue);  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue);  }	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue);    	non-compiled	[CE]  not  a  statement	28	None	replace
127	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue);  }  else  {  return  _startValue(ch);  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue);  }  else  {  return  _startValue(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  (_binaryValue  =  _binaryValue);  }  else  {  return  _startValue(ch);  }	  _binaryValue    =    _binaryValue;    (_binaryValue    =    _binaryValue);    	non-compiled	[CE]  not  a  statement	28	None	replace
128	[BUG]  [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	char  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  return  _startValue(ch);	          int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    return    _startValue(ch);    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
129	[BUG]  [BUGGY]  _binaryValue  =  _nextToken();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _nextToken();  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _nextToken();	  _binaryValue    =    _binaryValid;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
130	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer.length);  [CE]  cannot  find  symbol  ch  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer.length);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer.length);	  _binaryValue    =    _binaryValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol  ch	20	None	replace
131	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	5	None	add
132	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++].&  0xFF;  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF;  _inputPtr  =  _inputBuffer[_inputPtr++].&  0xFF;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    _inputPtr  =  _inputBuffer[_inputPtr++].&  0xFF;	  	non-compiled	[CE]  <identifier>  expected	5	None	add
133	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  case  MAJOR_OBJECT_FIELD_FIRST:  return  _startDocument	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  orphaned  case	19	None	replace
134	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputBuffer[_inputPtr++]);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputBuffer[_inputPtr++]);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(_inputBuffer,  _inputBuffer[_inputPtr++]);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
135	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputEnd);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputEnd);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputEnd);	  _binaryValue    =    _binaryValue(_inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    	compilable	  [FE]  RuntimeException  	15	1	replace
137	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _finishToken();  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    	compilable	  [FE]  RuntimeException  	15	1	replace
138	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _inputPtr  =  _inputBuffer[_inputPtr++]  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _inputPtr  =  _inputBuffer[_inputPtr++]  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  _inputPtr  =  _inputBuffer[_inputPtr++]	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    	non-compiled	[CE]  ';'  expected	15	None	replace
139	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT  |  _inputPtr;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT  |  _inputPtr;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_OBJECT  |  _inputPtr;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.END_OBJECT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	31	None	replace
140	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.START_OBJECT;	  _binaryValue    =    JsonToken.FIELD_VALUE;    	non-compiled	[CE]  incompatible  types	22	None	replace
141	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_NULL;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_NULL;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_NULL;	  _binaryValue    =    JsonToken.FIELD_VALUE;    	non-compiled	[CE]  incompatible  types	22	None	replace
142	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);	  _binaryValue    =    _binaryValue.trim();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
143	[BUG]  [BUGGY]  _binaryValue  =  _currToken.decodeBase64Value(_inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _currToken.decodeBase64Value(_inputBuffer,  _inputPtr);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken.decodeBase64Value(_inputBuffer,  _inputPtr);	  _binaryValue    =    _currToken;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
144	[BUG]  [BUGGY]  _binaryValue  =  _currToken.trim();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _currToken.trim();  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken.trim();	  _binaryValue    =    _currToken;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
145	[BUG]  [BUGGY]  _binaryValue  =  _currToken.FIELD_NAME,  _inputBuffer[_inputPtr++];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _currToken.FIELD_NAME,  _inputBuffer[_inputPtr++];  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken.FIELD_NAME,  _inputBuffer[_inputPtr++];	  _binaryValue    =    JsonToken.FIELD_NAME,    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  ';'  expected	30	None	replace
146	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST  ||  JsonToken.START_OBJECT_FIELD_FIRST;  [CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST  ||  JsonToken.START_OBJECT_FIELD_FIRST;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST  ||  JsonToken.START_OBJECT_FIELD_FIRST;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.START_OBJECT_FIELD_FIRST;    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST	41	None	replace
147	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST;  [CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.START_OBJECT_FIELD_FIRST;	  _binaryValue    =    JsonToken.VALUE_STRING    ||    JsonToken.START_OBJECT_FIELD_FIRST;    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT_FIELD_FIRST	41	None	replace
148	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  ((  _binaryValue  =  _binaryValue)?  0xFF  :  _binaryValue;  }	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue;    	non-compiled	[CE]  ')'  expected	40	None	replace
149	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer.length);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING,  _inputBuffer.length);	  _binaryValue    =    JsonToken.VALUE_STRING,    _inputPtr);    	non-compiled	[CE]  ';'  expected	10	None	replace
150	[BUG]  [BUGGY]  if(_majorState)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startValue(ch);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_majorState)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startValue(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_majorState)  {  if(_inputPtr  >=  _inputEnd)  {  return  _startValue(ch);  }	          if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    null)    {    return    _startValue(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
151	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [CE]  variable  ch  is  already  defined  in  method  nextToken()  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;	  int    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  nextToken()	4	None	replace
152	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	12	None	replace
153	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  <  0)?  0xFF  :  _binaryValue);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue;  ((  _binaryValue  <  0)?  0xFF  :  _binaryValue);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue;  ((  _binaryValue  <  0)?  0xFF  :  _binaryValue);	  _binaryValue    =    _binaryValue;    ((    _binaryValue    =    _binaryValue)?    0xFF    :    _binaryValue);    	non-compiled	[CE]  not  a  statement	38	None	replace
154	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr++);  [CE]  cannot  find  symbol  ch  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr++);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBufferPtr++);	  _binaryValue    =    _binaryValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol  ch	36	None	replace
155	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputLen);  [CE]  cannot  find  symbol  _inputLen  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputLen);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputLen);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputLen	26	None	replace
156	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputPtr);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(_inputBuffer,  _inputPtr,  _inputPtr);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
157	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer,  _inputPtr  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer,  _inputPtr  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NAME,  _inputBuffer,  _inputPtr  +  1;	  _binaryValue    =    JsonToken.FIELD_NAME    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
158	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME  |  JsonToken.FIELD_NAME  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.FIELD_NAME  |  JsonToken.FIELD_NAME  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.FIELD_NAME  |  JsonToken.FIELD_NAME  +  1;	  _binaryValue    =    JsonToken.FIELD_NAME    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
159	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch);  }  [CE]  cannot  find  symbol  ch  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  return  _startDocument(ch);  }	  _binaryValue    =    _binaryValue;    _binaryValue    =    _binaryValue;    case    MAJOR_OBJECT_FIELD_FIRST:    return    _startDocument(ch);    	non-compiled	[CE]  cannot  find  symbol  ch	17	None	replace
160	[BUG]  [BUGGY]  _binaryValue  =  _currToken.VALUE_STRING,  _inputBuffer[_inputPtr++];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _currToken.VALUE_STRING,  _inputBuffer[_inputPtr++];  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _currToken.VALUE_STRING,  _inputBuffer[_inputPtr++];	  _binaryValue    =    JsonToken.VALUE_STRING,    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  ';'  expected	9	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	6	1	replace
162	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_inputPtr  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;	  _inputPtr    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  AssertionFailedError  	6	1	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
164	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
165	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  return  _startDocument(ch);  }  [CE]  cannot  find  symbol  ch  [FE]      AssertionFailedError    [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue    =    _binaryValue;    _binaryValue  =  _binaryValue;  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  return  _startDocument(ch);  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue        =        _binaryValue;        _binaryValue    =    _binaryValue;    if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue;  _binaryValue  =  _binaryValue;  }  else  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  cannot  find  symbol  ch	14	None	add
166	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue(JsonToken.VALUE_NULL,  _inputBuffer,  _inputPtr);	  _binaryValue    =    _binaryValue(JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
167	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.toString()  +  1;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue.toString()  +  1;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue.toString()  +  1;	  _binaryValue    =    _binaryValue.toString();    	non-compiled	[CE]  incompatible  types	3	None	replace
168	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue.clone();  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	_binaryValue  =  _binaryValue.clone();	  _binaryValue    =    _binaryValue.toString();    	compilable	  [FE]  NullPointerException  	3	1	replace
169	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  _binaryValue.clone();  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  _binaryValue.clone();	  _binaryValue    =    _binaryValue.toString();    	compilable	  [FE]  NullPointerException  	3	1	replace
170	[BUG]  [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY,  _inputPtr;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  _binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY,  _inputPtr;  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	_binaryValue  =  JsonToken.VALUE_STRING  |  JsonToken.END_ARRAY,  _inputPtr;	  _binaryValue    =    JsonToken.VALUE_STRING    |    JsonToken.END_ARRAY;    	non-compiled	[CE]  ';'  expected	34	None	replace
171	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  <  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _finishToken();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
172	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _startToken();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _startToken();  }  [BUGGY]      int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputBuffer[_inputPtr++]!=  JsonToken.FIELD_NAME)  {  return  _startToken();  }	  if(_inputPtr    >=    _inputEnd)    {    if(_inputBuffer[_inputPtr++]!=    JsonToken.FIELD_NAME)    {    return    _finishToken();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
