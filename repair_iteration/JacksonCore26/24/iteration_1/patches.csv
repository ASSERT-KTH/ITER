bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
2	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  ==  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
3	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  >>  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
4	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
5	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >=  0)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  >=  0)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_inputPtr  >=  0)  {	  if(_inputPtr!=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
7	[BUG]  [BUGGY]  if(_inputPtr  >=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  >=  0)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  0)  {	  if(_inputPtr!=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
8	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  <  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
9	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
10	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  =  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  =  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  <  =  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
11	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  ==  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
12	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  >  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  >  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  >  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
14	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
16	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
17	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
18	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
19	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
20	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
21	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
23	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
25	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
27	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
29	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
30	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
31	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  ==  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  ==  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
32	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  <  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  <  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  <  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
33	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  >>  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  >>  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
34	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
36	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
38	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
39	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
40	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
41	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
42	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
43	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FUNCTION)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
44	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  {  _inputEnd)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  {  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  {  _inputEnd)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
46	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
48	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
50	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
51	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr!=  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr!=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
52	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd  ||  _currentToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >=  _inputEnd  ||  _currentToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  >=  _inputEnd  ||  _currentToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
53	[BUG]  [BUGGY]  _finishTokenWithEOF();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  _finishTokenWithEOF();  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_finishTokenWithEOF();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  START_EOF  [FE]              AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }	      	non-compiled	[CE]  cannot  find  symbol  START_EOF	5	None	replace
55	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
56	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
58	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
60	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
61	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
62	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
63	[BUG]  [BUGGY]  if(_inputPtr  <  =  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  =  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  <  =  _inputEnd)  {	  if(_inputPtr    ==    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd)    {    if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
65	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_inputPtr  >  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_inputPtr  >  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
66	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
67	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr!=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=    _inputEnd)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	7	1	replace
69	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  RuntimeException  	7	1	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
71	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
73	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
74	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
75	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
76	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  >=  false)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  >=  false)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  >=  false)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
77	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  <  =  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_inputPtr  <  =  _inputEnd)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr  <  =  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
78	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    ==    _inputEnd)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_inputPtr  <  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
80	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  <  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
82	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	      	compilable	  [FE]  AssertionFailedError  	5	1	replace
83	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]              AssertionFailedError    [CONTEXT]    {      [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }	      	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	5	None	replace
84	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {      [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen);  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
85	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {      [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen);  [BUGGY]    if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
