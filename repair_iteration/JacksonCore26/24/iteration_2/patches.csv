bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
2	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
3	[BUG]  [BUGGY]  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
4	[BUG]  [BUGGY]  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  ==  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_inputPtr  ==  0)  {	  if(_inputPtr    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
6	[BUG]  [BUGGY]  if(_inputPtr  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  ==  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  ==  0)  {	  if(_inputPtr    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
7	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_EOF)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
8	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_EOF)  {  return  _finishTokenWithEOF();  }  [CE]  cannot  find  symbol  END_EOF  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_EOF)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_EOF)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_EOF)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  cannot  find  symbol  END_EOF	54	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
10	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
12	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
13	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {	  if(_inputPtr    <    _inputEnd)    {    if(_inputPtr    <    _inputEnd    ||    _cfgPtr    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
14	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _cfgPtr  >  0)  {  [CE]  cannot  find  symbol  _cfgPtr  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _cfgPtr  >  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd  ||  _cfgPtr  >  0)  {	  if(_inputPtr    <    _inputEnd)    {    if(_inputPtr    <    _inputEnd    ||    _cfgPtr    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  _cfgPtr	64	None	replace
15	[BUG]  [BUGGY]  if(_cfgPtr  >=  _inputEnd)  {  [CE]  cannot  find  symbol  _cfgPtr  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_cfgPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_cfgPtr  >=  _inputEnd)  {	  if(_inputPtr    <    _inputEnd)    {    if(_inputPtr    <    _inputEnd    ||    _cfgPtr    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  _cfgPtr	64	None	replace
16	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {  [CE]  cannot  find  symbol  _cfgPtr  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >  0)  {	  if(_inputPtr    <    _inputEnd)    {    if(_inputPtr    <    _inputEnd    ||    _cfgPtr    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  _cfgPtr	64	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
18	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    >=    false)    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
20	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    >=    false)    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    >=    false)    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
22	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    >=    false)    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
23	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
24	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
25	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
26	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
27	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
29	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
31	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
33	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
34	[BUG]  [BUGGY]  _finishTokenWithCurrentToken();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  _finishTokenWithCurrentToken();  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_finishTokenWithCurrentToken();	  _finishTokenWithEOF();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
35	[BUG]  [BUGGY]  _finishToken();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  _finishToken();  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_finishToken();	  _finishTokenWithEOF();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
36	[BUG]  [BUGGY]  _finishTokenWithString();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  _finishTokenWithString();  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_finishTokenWithString();	  _finishTokenWithEOF();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
37	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
38	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
40	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  0)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
42	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _inputPtr  >=  0)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
44	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME  ||  _inputPtr  >=  _inputEnd)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _inputPtr    >=    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
45	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_EMPTY)  {  [CE]  cannot  find  symbol  VALUE_EMPTY  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_EMPTY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_EMPTY)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    	non-compiled	[CE]  cannot  find  symbol  VALUE_EMPTY	38	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
47	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
48	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd    &&!loadMore())    {    if(_inputPtr  >=  _inputEnd  &&!loadMore())  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
49	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd    &&!loadMore())    {    if(_inputPtr  <  _inputEnd  &&!loadMore())  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
50	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  <  _inputEnd  ||!loadMore())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  <  _inputEnd  ||!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd    &&!loadMore())    {    if(_inputPtr  <  _inputEnd  ||!loadMore())  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
51	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd    &&!loadMore())    {    if(_inputPtr  >=  _inputEnd  ||!loadMore())  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
52	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd    &&!loadMore())    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
53	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
54	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
55	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
56	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
57	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
58	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
59	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
60	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
61	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
63	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
64	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
65	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
66	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
67	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
68	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
70	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
72	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	23	1	replace
74	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	23	1	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _endOfInput  ==  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _endOfInput  ==  false)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
76	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _endOfInput  ==  false)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _endOfInput  ==  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _endOfInput  ==  false)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
77	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  null)  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  null)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  null)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	71	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  true)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  true)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
79	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  true)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  true)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  true)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    	compilable	  [FE]  AssertionFailedError  	71	1	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
81	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
82	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	27	None	replace
83	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currentToken!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  _currentToken  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _currentToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd  ||  _currentToken!=  JsonToken.FIELD_NAME)  {	  if(_inputPtr!=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd    ||    _currentToken!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  _currentToken	52	None	replace
84	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  _currentToken!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  _currentToken  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  _currentToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd  &&  _currentToken!=  JsonToken.FIELD_NAME)  {	  if(_inputPtr!=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd    ||    _currentToken!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  _currentToken	52	None	replace
85	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
86	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  true)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  true)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  true)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
87	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishTokenWithEOF())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishTokenWithEOF())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishTokenWithEOF())  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
88	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _endOfInput  ==  false)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _endOfInput  ==  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _endOfInput  ==  false)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
89	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    if(_currToken!=  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
91	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
93	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
95	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  ==  _inputEnd  &&!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_inputPtr  ==  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
97	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd  &&!loadMore())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  ==  _inputEnd  &&!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  ==  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr!=  _inputEnd  &&!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_inputPtr!=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
99	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd  &&!loadMore())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr!=  _inputEnd  &&!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr!=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    <    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  ||!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_inputPtr  <  _inputEnd  ||!loadMore())  {	  if(_inputPtr    <    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
101	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  ||!loadMore())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  ||!loadMore())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  <  _inputEnd  ||!loadMore())  {	  if(_inputPtr    <    _inputEnd    &&!loadMore())    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
102	[BUG]  [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  >=  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    >=    0)    {    if(_inputPtr  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
103	[BUG]  [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    >=    0)    {    if(_inputPtr  >=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
104	[BUG]  [BUGGY]  if(_inputPtr  >=  0)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  0)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    >=    0)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
105	[BUG]  [BUGGY]  if(_inputPtr  >=  0)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  0)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    >=    0)    {    if(_currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
106	[BUG]  [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  ==  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    >=    0)    {    if(_inputPtr  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
108	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
109	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
110	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
111	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken!=  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
112	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()!=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()!=  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()!=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
113	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.END_NAME)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.END_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.END_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	82	1	replace
115	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	82	1	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  true)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  true)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	82	1	replace
117	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  true)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  true)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  true)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	82	1	replace
118	[BUG]  [BUGGY]  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _endOfInput  ==  false))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _endOfInput  ==  false))  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	||(_currToken  ==  JsonToken.FIELD_NAME  &&  _endOfInput  ==  false))  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
119	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
120	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
121	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
122	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
123	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
124	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
125	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
126	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
127	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
128	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken!=  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken!=  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    ||(_currToken!=  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.END_OBJECT))  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
129	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
130	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
131	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
132	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
133	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.START_OBJECT))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.START_OBJECT))  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken!=  JsonToken.START_OBJECT))  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
134	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {  [CE]  cannot  find  symbol  _cfgPtr  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {	  if(_inputPtr    <    _inputEnd)    {    if(_inputPtr    <    _inputEnd    ||    _cfgPtr    >=    _inputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  _cfgPtr	62	None	replace
135	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {  [CE]  cannot  find  symbol  _cfgPtr  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  <  _inputEnd  ||  _cfgPtr  >=  _inputEnd)  {	  if(_inputPtr    <    _inputEnd)    {    if(_inputPtr    <    _inputEnd    ||    _cfgPtr    >=    _inputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  _cfgPtr	62	None	replace
136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	69	1	replace
137	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	69	1	replace
138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	69	1	replace
139	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	69	1	replace
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  &&  _finishToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  &&  _finishToken()  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
141	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  &&  _finishToken()  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  &&  _finishToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  &&  _finishToken()  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
142	[BUG]  [BUGGY]  ||  _currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  ||  _currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	||  _currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	25	1	replace
144	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	25	1	replace
145	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	25	None	replace
146	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
147	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_closed)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_closed)  {  return  null;  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_closed)  {  return  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
148	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _endOfInput!=  false))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _endOfInput!=  false))  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _endOfInput!=  false))  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
149	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  false)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  false)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
150	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    ||  _currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
151	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
152	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
153	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
154	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
155	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.VALUE_STRING))  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.VALUE_STRING))  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    ||(_currToken  ==  JsonToken.FIELD_NAME  &&  _currToken  ==  JsonToken.VALUE_STRING))  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
156	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
157	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
158	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
159	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
160	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    null)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	83	None	replace
161	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishTokenWithEOF)  {  return  null;  }  [CE]  cannot  find  symbol  _finishTokenWithEOF  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishTokenWithEOF)  {  return  null;  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishTokenWithEOF)  {  return  null;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    null)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  cannot  find  symbol  _finishTokenWithEOF	83	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_closed)  {  return  null;  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_closed)  {  return  null;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    null)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	83	1	replace
163	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_closed)  {  return  null;  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_closed)  {  return  null;  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_closed)  {  return  null;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    null)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	83	1	replace
164	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
165	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
166	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
167	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
168	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FUNCTION)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
169	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen  + "  expected: "+_origBufferLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen  + "  expected: "+_origBufferLen);  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen  + "  expected: "+_origBufferLen);	  _reportError(   "Current    token(   "+_currToken+   ")not    an    ARRAY    but   "+_origBufferLen);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
170	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_endOfInput);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_endOfInput);  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_endOfInput);	  _reportError(   "Current    token(   "+_currToken+   ")not    an    ARRAY    but   "+_origBufferLen);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
171	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken  ==  JsonToken.VALUE_STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
172	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
173	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
174	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken!=  JsonToken.VALUE_STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
175	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
177	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
179	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
181	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
182	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
183	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
184	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
185	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
186	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
187	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
188	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
189	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
190	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
191	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
192	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_endOfInput);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_endOfInput);  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_endOfInput);	  _reportError(   "Current    token(   "+_currToken+   ")not    a    valid    start    of    type   "+_origBufferLen);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
193	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen,  _currentToken);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen,  _currentToken);  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen,  _currentToken);	  _reportError(   "Current    token(   "+_currToken+   ")not    a    valid    start    of    type   "+_origBufferLen);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
195	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
196	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
197	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
198	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
199	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
200	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
201	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ALLOW)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ALLOW)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ALLOW)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
202	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_FUNCTION)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
203	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_inputPtr    ==    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
204	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_inputPtr    ==    _inputEnd)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
205	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
206	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
207	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
209	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
210	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    null)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	83	None	replace
211	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput!=  null)  {  return  _finishTokenWithEOF();  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput!=  null)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput!=  null)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    null)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	83	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
213	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
214	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
215	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
216	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF()  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF()  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF()	  	non-compiled	[CE]  ';'  expected	26	None	add
217	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
218	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
219	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
220	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ASSIGN)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ASSIGN)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
221	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.END_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	69	1	replace
223	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	69	1	replace
224	[BUG]  [BUGGY]  if(_finishToken()  ==  JsonToken.FIELD_NAME  ||  _currToken()  ==  JsonToken.END_OBJECT)  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      {        [BUGGY]  if(_finishToken()  ==  JsonToken.FIELD_NAME  ||  _currToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_finishToken()  ==  JsonToken.FIELD_NAME  ||  _currToken()  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
225	[BUG]  [BUGGY]  _finishTokenWithEOF(_currToken);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  _finishTokenWithEOF(_currToken);  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_finishTokenWithEOF(_currToken);	  _finishTokenWithEOF();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
226	[BUG]  [BUGGY]  _finishTokenWithCurrentSegment();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  _finishTokenWithCurrentSegment();  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_finishTokenWithCurrentSegment();	  _finishTokenWithEOF();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
227	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _endOfInput    ==    false)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput!=  false)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
228	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
229	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
230	[BUG]  [BUGGY]  if(_currentToken  ==  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  _currentToken  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currentToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currentToken  ==  JsonToken.FIELD_NAME)  {	  if(_inputPtr!=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd    ||    _currentToken!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  _currentToken	52	None	replace
231	[BUG]  [BUGGY]  ||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  ||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
232	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
234	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
236	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
237	[BUG]  [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  >=  inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  >=  inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    >=    0)    {    if(_inputPtr  >=  inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
238	[BUG]  [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  >=  input.length)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >=  0)  {  if(_inputPtr  >=  input.length)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    >=    0)    {    if(_inputPtr  >=  input.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
239	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen  + "  bytes  are  not  supported. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen  + "  bytes  are  not  supported. ");  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen  + "  bytes  are  not  supported. ");	  _reportError(   "Current    token(   "+_currToken+   ")not    a    valid    start    of    type   "+_origBufferLen);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
241	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	27	1	replace
242	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.VALUE_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.VALUE_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.VALUE_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
243	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen,  _origToken);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen,  _origToken);  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen,  _origToken);	  _reportError(   "Current    token(   "+_currToken+   ")not    an    ARRAY    but   "+_origBufferLen);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
244	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen  + "  expected  by  default ");  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen  + "  expected  by  default ");  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  an  ARRAY  but "+_origBufferLen  + "  expected  by  default ");	  _reportError(   "Current    token(   "+_currToken+   ")not    an    ARRAY    but   "+_origBufferLen);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
245	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  <  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd  &&!loadMore())  {  if(_inputPtr  <  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr    <    _inputEnd    &&!loadMore())    {    if(_inputPtr  <  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	23	1	replace
247	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	23	1	replace
248	[BUG]  [BUGGY]  if(_cfgPtr  >  0)  {  [CE]  cannot  find  symbol  _cfgPtr  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_cfgPtr  >  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_cfgPtr  >  0)  {	  if(_inputPtr    <    _inputEnd)    {    if(_inputPtr    <    _inputEnd    ||    _cfgPtr    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  _cfgPtr	64	None	replace
249	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
250	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishToken()  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	25	1	replace
252	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	25	1	replace
253	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
254	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
255	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
256	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_finishToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
257	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_EOF)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
258	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
259	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
260	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	46	1	replace
262	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	46	1	replace
263	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
264	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
266	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
268	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
269	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.EMPTY)  {  [CE]  cannot  find  symbol  EMPTY  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.EMPTY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.EMPTY)  {	  if(_inputPtr    ==    _inputEnd)    {    if(_inputPtr    {    _inputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  EMPTY	44	None	replace
270	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
272	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
273	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_EOF)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
274	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_EOF)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_EOF)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
275	[BUG]  [BUGGY]  if(_closed)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_closed)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_closed)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
276	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
277	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	69	1	replace
278	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.START_OBJECT)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    	compilable	  [FE]  RuntimeException  	69	1	replace
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_inputPtr  >  0)  {	  if(_inputPtr    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
280	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_inputPtr  >  0)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >  0)  {	  if(_inputPtr    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
281	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {	  if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
283	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {	  if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
284	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
285	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.VALUE_STRING)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
286	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
287	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
288	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  <  _inputEnd)  {  if(_currToken  ==  JsonToken.VALUE_NULL)  {	  if(_inputPtr!=    _inputEnd)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
289	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
290	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
291	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FUNCTION)  {  [CE]  cannot  find  symbol  FUNCTION  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FUNCTION)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FUNCTION)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	43	None	replace
292	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
294	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
295	[BUG]  [BUGGY]  if(_inputPtr  >>  _inputEnd)  {  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_inputPtr  >>  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_inputPtr  >>  _inputEnd)  {	  if(_inputPtr    <    =    _inputEnd)    {    	non-compiled	[CE]  incompatible  types	63	None	replace
296	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
297	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen  + "  bytes  can  not  be  deprecated. ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  _reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen  + "  bytes  can  not  be  deprecated. ");  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	_reportError( "Current  token( "+_currToken+ ")not  a  valid  start  of  type "+_origBufferLen  + "  bytes  can  not  be  deprecated. ");	  _reportError(   "Current    token(   "+_currToken+   ")not    a    valid    start    of    type   "+_origBufferLen);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
298	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  true)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  false)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  true)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    false)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_endOfInput  ==  true)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
300	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
301	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_OBJECT  ||  _finishTokenWithEOF())  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	23	None	replace
302	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	23	1	replace
304	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.END_ARRAY)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  AssertionFailedError  	23	1	replace
305	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.START_OBJECT    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.START_ARRAY  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
306	[BUG]  [BUGGY]  if(_cfgPtr  <  _inputEnd)  {  [CE]  cannot  find  symbol  _cfgPtr  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_cfgPtr  <  _inputEnd)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_cfgPtr  <  _inputEnd)  {	  if(_inputPtr    <    _inputEnd)    {    if(_inputPtr    <    _inputEnd    ||    _cfgPtr    >=    _inputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  _cfgPtr	62	None	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
308	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	40	1	replace
309	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _currToken    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
310	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
311	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput())  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishToken()  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput())  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME    ||    _finishToken()    ==    JsonToken.END_OBJECT)    {    if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput())  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
312	[BUG]  [BUGGY]  if(_currentToken!=  JsonToken.FIELD_NAME)  {  [CE]  cannot  find  symbol  _currentToken  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currentToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currentToken!=  JsonToken.FIELD_NAME)  {	  if(_inputPtr!=    _inputEnd)    {    if(_inputPtr    >=    _inputEnd    ||    _currentToken!=    JsonToken.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  _currentToken	52	None	replace
313	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _endOfInput  ==  null)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    null)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
314	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishTokenWithEOF)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishTokenWithEOF)  {  return  null;  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _finishTokenWithEOF)  {  return  null;  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_endOfInput    ==    null)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
315	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME  ||  _currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
316	[BUG]  [BUGGY]  [FE]  JsonEOFException  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  JsonEOFException  	25	1	replace
317	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [FE]  JsonEOFException  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }	  if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    	compilable	  [FE]  JsonEOFException  	25	1	replace
318	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {  _finishTokenWithEOF();  }	  _finishTokenWithEOF();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
319	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.EMPTY)  {  _finishTokenWithEOF();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.EMPTY)  {  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken  ==  JsonToken.EMPTY)  {  _finishTokenWithEOF();  }	  _finishTokenWithEOF();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
320	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.END_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken!=    JsonToken.END_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
321	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_ARRAY)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
322	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.START_OBJECT)  {  return  _finishTokenWithEOF();  }  if(_currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }  [BUGGY]      if  (_closed)  {  return  null;  }  if  (_endOfInput)  {  //  except  for  this  special  case    if  (_currToken  ==  JsonToken.NOT_AVAILABLE)  {  return  _finishTokenWithEOF();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	if(_currToken    ==    JsonToken.FIELD_NAME)    {    if(_currToken    ==    JsonToken.START_OBJECT)    {    return    _finishTokenWithEOF();    }    if(_currToken  ==  JsonToken.END_OBJECT)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  return  _finishTokenWithEOF();  }	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
