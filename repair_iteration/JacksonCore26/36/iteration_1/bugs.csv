bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {    [BUGGY]  if  (ch  ==  0)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if  (ch  ==  0)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
2	[BUG]  [BUGGY]  if  (ch  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {    [BUGGY]  if  (ch  ==  0)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if  (ch  ==  0)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {    [BUGGY]  if  (ch  <  0x0020)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if  (ch  <  0x0020)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
4	[BUG]  [BUGGY]  if  (ch  <  0x0020)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {    [BUGGY]  if  (ch  <  0x0020)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if  (ch  <  0x0020)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {    [BUGGY]  if  (ch  ==  0x0020)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if  (ch  ==  0x0020)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
6	[BUG]  [BUGGY]  if  (ch  ==  0x0020)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {    [BUGGY]  if  (ch  ==  0x0020)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if  (ch  ==  0x0020)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
7	[BUG]  [BUGGY]    [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError  [CONTEXT]  {    [BUGGY]    [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	  	if  (ch  <=  0x0020)  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken!=  null)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  null)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
9	[BUG]  [BUGGY]  if(_currToken!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken!=  null)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
10	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken  ==  null)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  null)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	71	1	replace
11	[BUG]  [BUGGY]  if(_currToken  ==  null)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken  ==  null)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  null)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	71	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
13	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
14	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_STRING)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	71	1	replace
15	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_STRING)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	71	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(ch  ==  INT_QUOTE)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  INT_QUOTE)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
17	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(ch  ==  INT_QUOTE)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
18	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NULL)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	71	1	replace
19	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NULL)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	71	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
21	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {    [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL)  {	if  (ch  <=  0x0020)  {  	compilable	  [FE]  AssertionFailedError  	71	1	replace
